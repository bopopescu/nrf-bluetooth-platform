PHYS: initializing bus pirate
  PHYS: setting binary mode
  PHYS: waiting for BBIO1
    PHYS: data: BBIO1
  PHYS: setting raw mode
  PHYS: waiting for RAW1
    PHYS: data: BBIO1RAW1
  PHYS: configuring lines
  PHYS: flush 8a 63 48
PHYS: swd raw: 11111111111111111111111111111111111111111111111111111111
PHYS: swd raw: 1001111011100111
PHYS: swd raw: 11111111111111111111111111111111111111111111111111111111
PHYS: swd raw: 00000000
PHYS: transfer a5 = read dp 0
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 16 ff ff ff ff ff ff ff 11 9e e7 16 ff ff ff ff ff ff ff 10 00 10 a5 07 07 07
        PHYS: expecting 29 = 26 ack + 3 data bytes
      PHYS: skipping 26 acks: 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 77 14 b1 0b 01
  PHYS: read word: 0bb11477, parity 1
PHYS: swd raw: 11111111111111111111111111111111111111111111111111111111
  PHYS: turning out
PHYS: swd raw: 00000000
PHYS: transfer a5 = read dp 0
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 16 ff ff ff ff ff ff ff 10 00 10 a5 07 07 07
        PHYS: expecting 16 = 13 ack + 3 data bytes
      PHYS: skipping 13 acks: 01 01 01 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 77 14 b1 0b 01
  PHYS: read word: 0bb11477, parity 1
SWD: write dp 0 = 0000001e
PHYS: transfer 81 = write dp 0
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 81 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 30 and 0
  PHYS: turning out
PHYS: write_bits 48 and 0
SWD: write dp 8 = 00000000
PHYS: transfer b1 = write dp 8
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 1e 00 00 00 30 00 10 b1 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 0 and 0
  PHYS: turning out
PHYS: write_bits 48 and 0
  REG: writing #<Peripheral::CachingProxy:0xa2d9e48> @ 0x00000004 backing Adiv5::DP::CTRLSTAT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0xa2d9e48> @ 0x00000004 backing Adiv5::DP::CTRLSTAT = 0000000000
  REG: writing Adiv5::DP::CTRLSTAT.CDBGPWRUPREQ = 0x00000001
  REG: writing #<Peripheral::CachingProxy:0xa2d9e48> @ 0x00000004 backing Adiv5::DP::CTRLSTAT = 0x10000000
  REG: reading #<Peripheral::CachingProxy:0xa2d9e48> @ 0x00000004 backing Adiv5::DP::CTRLSTAT = 0x10000000
  REG: writing Adiv5::DP::CTRLSTAT.CSYSPWRUPREQ = 0x00000001
  REG: writing #<Peripheral::CachingProxy:0xa2d9e48> @ 0x00000004 backing Adiv5::DP::CTRLSTAT = 0x50000000
  DP: write dp 00000004 = 50000000
SWD: write dp 4 = 50000000
PHYS: transfer a9 = write dp 4
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 00 00 00 00 30 00 10 a9 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 1342177280 and 0
  PHYS: turning out
PHYS: write_bits 48 and 0
  SWD: read dp 4 (1 words)...
PHYS: transfer 8d = read dp 4
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 00 00 00 50 30 00 10 8d 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 f0 00
  PHYS: read word: f0000000, parity 0
SWD: read  dp 4 < f0000000
  DP: read dp 00000004 < f0000000
  REG: reading #<Peripheral::BackingProxy:0xa2d2fe4> @ 0x00000004 backing Adiv5::DP::CTRLSTAT = 0xf0000000
  REG: reading #<Peripheral::CachingProxy:0xa292e6c> @ 0x00000004 backing Adiv5::DP::CTRLSTAT = 0xf0000000
  REG: reading Adiv5::DP::CTRLSTAT.CDBGPWRUPACK = 0x00000001
  REG: reading #<Peripheral::CachingProxy:0xa292e6c> @ 0x00000004 backing Adiv5::DP::CTRLSTAT = 0xf0000000
  REG: reading Adiv5::DP::CTRLSTAT.CSYSPWRUPACK = 0x00000001
AP: all systems up
    DP: selecting 0:f
  REG: writing #<Peripheral::CachingProxy:0xa291148> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0xa291148> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0xa291148> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0xa291148> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0x0000000f
  REG: writing #<Peripheral::CachingProxy:0xa291148> @ 0x00000008 backing Adiv5::DP::SELECT = 0x000000f0
  DP: write dp 00000008 = 000000f0
SWD: write dp 8 = 000000f0
PHYS: transfer b1 = write dp 8
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 240 and 0
  PHYS: turning out
PHYS: write_bits 48 and 0
  SWD: read ap c (1 words)...
PHYS: transfer 9f = read ap c
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 f0 00 00 00 30 00 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 21 00 77 04 01
  PHYS: read word: 04770021, parity 1
SWD: read  ap c < 04770021
  DP: read ap 0000000c < 04770021
    AP: 0 read 000000fc < 04770021
  REG: reading #<Peripheral::BackingProxy:0xa2917b0> @ 0x000000fc backing Adiv5::AP::IDR = 0x04770021
  SWD: read ap c (1 words)...
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 21 00 77 04 01
  PHYS: read word: 04770021, parity 1
SWD: read  ap c < 04770021
  DP: read ap 0000000c < 04770021
    AP: 0 read 000000fc < 04770021
  REG: reading #<Peripheral::BackingProxy:0xa2360a4> @ 0x000000fc backing Adiv5::AP::IDR = 0x04770021
  REG: reading Adiv5::AP::IDR.mem? = 0x00000001
AP: initializing memap 0
    DP: selecting 0:0
  REG: writing #<Peripheral::CachingProxy:0xa19b414> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0xa19b414> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0xa19b414> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0xa19b414> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0xa19b414> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  DP: write dp 00000008 = 00000000
SWD: write dp 8 = 00000000
PHYS: transfer b1 = write dp 8
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 0 and 0
  PHYS: turning out
PHYS: write_bits 48 and 0
  SWD: read ap 0 (1 words)...
PHYS: transfer 87 = read ap 0
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 00 00 00 00 30 00 10 87 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 40 00 00 03 01
  PHYS: read word: 03000040, parity 1
SWD: read  ap 0 < 03000040
  DP: read ap 00000000 < 03000040
    AP: 0 read 00000000 < 03000040
  REG: reading #<Peripheral::CachingProxy:0xa19c5bc> @ 0000000000 backing Adiv5::MemAP::CSW = 0x03000040
  REG: writing Adiv5::MemAP::CSW.Size = 0x00000002
  REG: writing #<Peripheral::CachingProxy:0xa19c5bc> @ 0000000000 backing Adiv5::MemAP::CSW = 0x03000042
  REG: reading #<Peripheral::CachingProxy:0xa19c5bc> @ 0000000000 backing Adiv5::MemAP::CSW = 0x03000042
  REG: writing Adiv5::MemAP::CSW.AddrInc = 0x00000001
  REG: writing #<Peripheral::CachingProxy:0xa19c5bc> @ 0000000000 backing Adiv5::MemAP::CSW = 0x03000052
  REG: reading #<Peripheral::CachingProxy:0xa19c5bc> @ 0000000000 backing Adiv5::MemAP::CSW = 0x03000052
  REG: writing Adiv5::MemAP::CSW.Mode = 0000000000
  REG: writing #<Peripheral::CachingProxy:0xa19c5bc> @ 0000000000 backing Adiv5::MemAP::CSW = 0x03000052
    AP: 0 write 00000000 = 03000052
  DP: write ap 00000000 = 03000052
SWD: write ap 0 = 03000052
PHYS: transfer a3 = write ap 0
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 a3 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 50331730 and 1
  PHYS: turning out
PHYS: write_bits 48 and 128
    DP: selecting 0:f
  REG: writing #<Peripheral::CachingProxy:0x9fed0b8> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9fed0b8> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9fed0b8> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9fed0b8> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0x0000000f
  REG: writing #<Peripheral::CachingProxy:0x9fed0b8> @ 0x00000008 backing Adiv5::DP::SELECT = 0x000000f0
  DP: write dp 00000008 = 000000f0
SWD: write dp 8 = 000000f0
PHYS: transfer b1 = write dp 8
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 52 00 00 03 30 80 10 b1 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 240 and 0
  PHYS: turning out
PHYS: write_bits 48 and 0
  SWD: read ap 4 (1 words)...
PHYS: transfer af = read ap 4
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 f0 00 00 00 30 00 10 af 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
SWD: read  ap 4 < 00000000
  DP: read ap 00000004 < 00000000
    AP: 0 read 000000f4 < 00000000
  REG: reading #<Peripheral::BackingProxy:0x9fed4dc> @ 0x000000f4 backing Adiv5::MemAP::CFG = 0000000000
  REG: reading Adiv5::MemAP::CFG.endian = 0000000000
AP: found AP 0, #<Adiv5::AP::IDR:0xa3179dc>, mem: true
  SWD: read ap c (1 words)...
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 21 00 77 04 01
  PHYS: read word: 04770021, parity 1
SWD: read  ap c < 04770021
  DP: read ap 0000000c < 04770021
    AP: 0 read 000000fc < 04770021
  REG: reading #<Peripheral::BackingProxy:0xa31784c> @ 0x000000fc backing Adiv5::AP::IDR = 0x04770021
  REG: writing Adiv5::MemAP.TAR = 0xe000ed00
    AP: 0 write 00000004 = e000ed00
    DP: selecting 0:0
  REG: writing #<Peripheral::CachingProxy:0xa30ed3c> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0xa30ed3c> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0xa30ed3c> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0xa30ed3c> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0xa30ed3c> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  DP: write dp 00000008 = 00000000
SWD: write dp 8 = 00000000
PHYS: transfer b1 = write dp 8
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 0 and 0
  PHYS: turning out
PHYS: write_bits 48 and 0
  DP: write ap 00000004 = e000ed00
SWD: write ap 4 = e000ed00
PHYS: transfer 8b = write ap 4
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 00 00 00 00 30 00 10 8b 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 3758157056 and 1
  PHYS: turning out
PHYS: write_bits 48 and 128
  SWD: read ap c (1 words)...
PHYS: transfer 9f = read ap c
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 00 ed 00 e0 30 80 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 c2 0c 41 01
  PHYS: read word: 410cc200, parity 1
SWD: read  ap c < 410cc200
  DP: read ap 0000000c < 410cc200
    AP: 0 read 0000000c < 410cc200
MEM: read e000ed00 < 410cc200
  REG: writing Adiv5::MemAP.TAR = 0x10000010
    AP: 0 write 00000004 = 10000010
  DP: write ap 00000004 = 10000010
SWD: write ap 4 = 10000010
PHYS: transfer 8b = write ap 4
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 8b 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 268435472 and 0
  PHYS: turning out
PHYS: write_bits 48 and 0
  SWD: read ap c (1 words)...
PHYS: transfer 9f = read ap c
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 10 00 00 10 30 00 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 04 00 00 01
  PHYS: read word: 00000400, parity 1
SWD: read  ap c < 00000400
  DP: read ap 0000000c < 00000400
    AP: 0 read 0000000c < 00000400
MEM: read 10000010 < 00000400
  REG: reading #<Adiv5::MemAP:0xa1d7af4> @ 0x10000010 backing NRF51::FICR = 0x00000400
  REG: reading NRF51::FICR.CODEPAGESIZE = 0x00000400
  REG: writing Adiv5::MemAP.TAR = 0x10000034
    AP: 0 write 00000004 = 10000034
  DP: write ap 00000004 = 10000034
SWD: write ap 4 = 10000034
PHYS: transfer 8b = write ap 4
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 8b 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 268435508 and 0
  PHYS: turning out
PHYS: write_bits 48 and 0
  SWD: read ap c (1 words)...
PHYS: transfer 9f = read ap c
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 34 00 00 10 30 00 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 02 00 00 00 01
  PHYS: read word: 00000002, parity 1
SWD: read  ap c < 00000002
  DP: read ap 0000000c < 00000002
    AP: 0 read 0000000c < 00000002
MEM: read 10000034 < 00000002
  REG: reading #<Adiv5::MemAP:0xa1d7af4> @ 0x10000034 backing NRF51::FICR = 0x00000002
  REG: reading NRF51::FICR.NUMRAMBLOCK = 0x00000002
    DP: selecting 0:1
  REG: writing #<Peripheral::CachingProxy:0xa1291ac> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0xa1291ac> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0xa1291ac> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0xa1291ac> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0x00000001
  REG: writing #<Peripheral::CachingProxy:0xa1291ac> @ 0x00000008 backing Adiv5::DP::SELECT = 0x00000010
  DP: write dp 00000008 = 00000010
SWD: write dp 8 = 00000010
PHYS: transfer b1 = write dp 8
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 16 and 1
  PHYS: turning out
PHYS: write_bits 48 and 128
  SWD: read ap 8 (1 words)...
PHYS: transfer b7 = read ap 8
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 10 00 00 00 30 80 10 b7 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 20 00 00 01
  PHYS: read word: 00002000, parity 1
SWD: read  ap 8 < 00002000
  DP: read ap 00000008 < 00002000
    AP: 0 read 00000018 < 00002000
MEM: read 10000038 < 00002000
  REG: reading #<Adiv5::MemAP:0xa1d7af4> @ 0x10000038 backing NRF51::FICR = 0x00002000
  REG: reading NRF51::FICR.SIZERAMBLOCK[0] = 0x00002000
  SWD: read ap c (1 words)...
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 20 00 00 01
  PHYS: read word: 00002000, parity 1
SWD: read  ap c < 00002000
  DP: read ap 0000000c < 00002000
    AP: 0 read 0000001c < 00002000
MEM: read 1000003c < 00002000
  REG: reading #<Adiv5::MemAP:0xa1d7af4> @ 0x1000003c backing NRF51::FICR = 0x00002000
  REG: reading NRF51::FICR.SIZERAMBLOCK[1] = 0x00002000
  REG: writing Adiv5::MemAP.TAR = 0x10000014
    AP: 0 write 00000004 = 10000014
    DP: selecting 0:0
  REG: writing #<Peripheral::CachingProxy:0x9fd4cac> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9fd4cac> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9fd4cac> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9fd4cac> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9fd4cac> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  DP: write dp 00000008 = 00000000
SWD: write dp 8 = 00000000
PHYS: transfer b1 = write dp 8
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 0 and 0
  PHYS: turning out
PHYS: write_bits 48 and 0
  DP: write ap 00000004 = 10000014
SWD: write ap 4 = 10000014
PHYS: transfer 8b = write ap 4
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 00 00 00 00 30 00 10 8b 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 268435476 and 1
  PHYS: turning out
PHYS: write_bits 48 and 128
  SWD: read ap c (1 words)...
PHYS: transfer 9f = read ap c
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 14 00 00 10 30 80 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 01 00 00 01
  PHYS: read word: 00000100, parity 1
SWD: read  ap c < 00000100
  DP: read ap 0000000c < 00000100
    AP: 0 read 0000000c < 00000100
MEM: read 10000014 < 00000100
  REG: reading #<Adiv5::MemAP:0xa1d7af4> @ 0x10000014 backing NRF51::FICR = 0x00000100
  REG: reading NRF51::FICR.CODESIZE = 0x00000100
    DP: selecting 0:1
  REG: writing #<Peripheral::CachingProxy:0xa30fad4> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0xa30fad4> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0xa30fad4> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0xa30fad4> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0x00000001
  REG: writing #<Peripheral::CachingProxy:0xa30fad4> @ 0x00000008 backing Adiv5::DP::SELECT = 0x00000010
  DP: write dp 00000008 = 00000010
SWD: write dp 8 = 00000010
PHYS: transfer b1 = write dp 8
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 16 and 1
  PHYS: turning out
PHYS: write_bits 48 and 128
  SWD: read ap 0 (1 words)...
PHYS: transfer 87 = read ap 0
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 10 00 00 00 30 80 10 87 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 04 00 00 01
  PHYS: read word: 00000400, parity 1
SWD: read  ap 0 < 00000400
  DP: read ap 00000000 < 00000400
    AP: 0 read 00000010 < 00000400
MEM: read 10000010 < 00000400
  REG: reading #<Adiv5::MemAP:0xa1d7af4> @ 0x10000010 backing NRF51::FICR = 0x00000400
  REG: reading NRF51::FICR.CODEPAGESIZE = 0x00000400
    DP: selecting 0:f
  REG: writing #<Peripheral::CachingProxy:0xa2b27d0> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0xa2b27d0> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0xa2b27d0> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0xa2b27d0> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0x0000000f
  REG: writing #<Peripheral::CachingProxy:0xa2b27d0> @ 0x00000008 backing Adiv5::DP::SELECT = 0x000000f0
  DP: write dp 00000008 = 000000f0
SWD: write dp 8 = 000000f0
PHYS: transfer b1 = write dp 8
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 240 and 0
  PHYS: turning out
PHYS: write_bits 48 and 0
  SWD: read ap 8 (1 words)...
PHYS: transfer b7 = read ap 8
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 f0 00 00 00 30 00 10 b7 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 03 00 00 f0 00
  PHYS: read word: f0000003, parity 0
SWD: read  ap 8 < f0000003
  DP: read ap 00000008 < f0000003
    AP: 0 read 000000f8 < f0000003
  REG: reading #<Peripheral::BackingProxy:0xa2b2b18> @ 0x000000f8 backing Adiv5::MemAP::BASE = 0xf0000003
  REG: reading #<Peripheral::CachingProxy:0xa242250> @ 0x000000f8 backing Adiv5::MemAP::BASE = 0xf0000003
  REG: reading #<Peripheral::CachingProxy:0xa242250> @ 0x000000f8 backing Adiv5::MemAP::BASE = 0xf0000003
  REG: reading Adiv5::MemAP::BASE.format? = 0x00000001
  REG: reading #<Peripheral::CachingProxy:0xa242250> @ 0x000000f8 backing Adiv5::MemAP::BASE = 0xf0000003
  REG: reading Adiv5::MemAP::BASE.present? = 0x00000001
  REG: reading #<Peripheral::CachingProxy:0xa242250> @ 0x000000f8 backing Adiv5::MemAP::BASE = 0xf0000003
  REG: reading Adiv5::MemAP::BASE.BASEADDR = 0xf0000000
AP: Adiv5::DebugDevice at f0000000
  REG: writing Adiv5::MemAP.TAR = 0xf0000ff0
    AP: 0 write 00000004 = f0000ff0
    DP: selecting 0:0
  REG: writing #<Peripheral::CachingProxy:0xa23fc44> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0xa23fc44> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0xa23fc44> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0xa23fc44> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0xa23fc44> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  DP: write dp 00000008 = 00000000
SWD: write dp 8 = 00000000
PHYS: transfer b1 = write dp 8
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 0 and 0
  PHYS: turning out
PHYS: write_bits 48 and 0
  DP: write ap 00000004 = f0000ff0
SWD: write ap 4 = f0000ff0
PHYS: transfer 8b = write ap 4
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 00 00 00 00 30 00 10 8b 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 4026535920 and 0
  PHYS: turning out
PHYS: write_bits 48 and 0
  SWD: read ap c (4 words)...
PHYS: transfer 9f = read ap c
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 f0 0f 00 f0 30 00 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 0d 00 00 00 01
  PHYS: read word: 0000000d, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 10 00 00 00 01
  PHYS: read word: 00000010, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 05 00 00 00 00
  PHYS: read word: 00000005, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: b1 00 00 00 00
  PHYS: read word: 000000b1, parity 0
SWD: read  ap c < 0000000d 00000010 00000005 000000b1
  DP: read ap 0000000c < 0000000d, 00000010, 00000005, 000000b1
    AP: 0 read 0000000c < 0000000d, 00000010, 00000005, 000000b1
MEM: read f0000ff0 < 0000000d, 00000010, 00000005, 000000b1
  AP: device component class: rom
  REG: writing Adiv5::MemAP.TAR = 0xf0000fd0
    AP: 0 write 00000004 = f0000fd0
  DP: write ap 00000004 = f0000fd0
SWD: write ap 4 = f0000fd0
PHYS: transfer 8b = write ap 4
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 8b 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 4026535888 and 1
  PHYS: turning out
PHYS: write_bits 48 and 128
  SWD: read ap c (1 words)...
PHYS: transfer 9f = read ap c
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 d0 0f 00 f0 30 80 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 02 00 00 00 01
  PHYS: read word: 00000002, parity 1
SWD: read  ap c < 00000002
  DP: read ap 0000000c < 00000002
    AP: 0 read 0000000c < 00000002
MEM: read f0000fd0 < 00000002
  REG: reading #<Adiv5::MemAP:0xa1d7af4> @ 0xf0000fd0 backing Adiv5::DebugDevice = 0x00000002
    DP: selecting 0:1
  REG: writing #<Peripheral::CachingProxy:0xa311078> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0xa311078> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0xa311078> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0xa311078> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0x00000001
  REG: writing #<Peripheral::CachingProxy:0xa311078> @ 0x00000008 backing Adiv5::DP::SELECT = 0x00000010
  DP: write dp 00000008 = 00000010
SWD: write dp 8 = 00000010
PHYS: transfer b1 = write dp 8
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 16 and 1
  PHYS: turning out
PHYS: write_bits 48 and 128
  SWD: read ap 4 (1 words)...
PHYS: transfer af = read ap 4
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 10 00 00 00 30 80 10 af 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
SWD: read  ap 4 < 00000000
  DP: read ap 00000004 < 00000000
    AP: 0 read 00000014 < 00000000
MEM: read f0000fd4 < 00000000
  REG: reading #<Adiv5::MemAP:0xa1d7af4> @ 0xf0000fd4 backing Adiv5::DebugDevice = 0000000000
  SWD: read ap 8 (1 words)...
PHYS: transfer b7 = read ap 8
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 b7 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
SWD: read  ap 8 < 00000000
  DP: read ap 00000008 < 00000000
    AP: 0 read 00000018 < 00000000
MEM: read f0000fd8 < 00000000
  REG: reading #<Adiv5::MemAP:0xa1d7af4> @ 0xf0000fd8 backing Adiv5::DebugDevice = 0000000000
  SWD: read ap c (1 words)...
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
SWD: read  ap c < 00000000
  DP: read ap 0000000c < 00000000
    AP: 0 read 0000001c < 00000000
MEM: read f0000fdc < 00000000
  REG: reading #<Adiv5::MemAP:0xa1d7af4> @ 0xf0000fdc backing Adiv5::DebugDevice = 0000000000
  REG: reading #<Peripheral::BackingProxy:0xa3259d8> @ 0000000000 backing Adiv5::DebugDevice::PeripheralID::PERIPHERAL4 = 0x00000002
  REG: reading Adiv5::DebugDevice::PeripheralID::PERIPHERAL4.count_4kb = 0000000000
  AP: device size: 4096
AP: Adiv5::ROMTable at f0000000
  REG: writing Adiv5::MemAP.TAR = 0xf0000ff0
    AP: 0 write 00000004 = f0000ff0
    DP: selecting 0:0
  REG: writing #<Peripheral::CachingProxy:0xa2370d0> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0xa2370d0> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0xa2370d0> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0xa2370d0> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0xa2370d0> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  DP: write dp 00000008 = 00000000
SWD: write dp 8 = 00000000
PHYS: transfer b1 = write dp 8
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 0 and 0
  PHYS: turning out
PHYS: write_bits 48 and 0
  DP: write ap 00000004 = f0000ff0
SWD: write ap 4 = f0000ff0
PHYS: transfer 8b = write ap 4
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 00 00 00 00 30 00 10 8b 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 4026535920 and 0
  PHYS: turning out
PHYS: write_bits 48 and 0
  SWD: read ap c (4 words)...
PHYS: transfer 9f = read ap c
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 f0 0f 00 f0 30 00 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 0d 00 00 00 01
  PHYS: read word: 0000000d, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 10 00 00 00 01
  PHYS: read word: 00000010, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 05 00 00 00 00
  PHYS: read word: 00000005, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: b1 00 00 00 00
  PHYS: read word: 000000b1, parity 0
SWD: read  ap c < 0000000d 00000010 00000005 000000b1
  DP: read ap 0000000c < 0000000d, 00000010, 00000005, 000000b1
    AP: 0 read 0000000c < 0000000d, 00000010, 00000005, 000000b1
MEM: read f0000ff0 < 0000000d, 00000010, 00000005, 000000b1
  AP: device component class: rom
  REG: writing Adiv5::MemAP.TAR = 0xf0000fd0
    AP: 0 write 00000004 = f0000fd0
  DP: write ap 00000004 = f0000fd0
SWD: write ap 4 = f0000fd0
PHYS: transfer 8b = write ap 4
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 8b 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 4026535888 and 1
  PHYS: turning out
PHYS: write_bits 48 and 128
  SWD: read ap c (1 words)...
PHYS: transfer 9f = read ap c
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 d0 0f 00 f0 30 80 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 02 00 00 00 01
  PHYS: read word: 00000002, parity 1
SWD: read  ap c < 00000002
  DP: read ap 0000000c < 00000002
    AP: 0 read 0000000c < 00000002
MEM: read f0000fd0 < 00000002
  REG: reading #<Adiv5::MemAP:0xa1d7af4> @ 0xf0000fd0 backing Adiv5::ROMTable = 0x00000002
    DP: selecting 0:1
  REG: writing #<Peripheral::CachingProxy:0xa129e90> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0xa129e90> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0xa129e90> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0xa129e90> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0x00000001
  REG: writing #<Peripheral::CachingProxy:0xa129e90> @ 0x00000008 backing Adiv5::DP::SELECT = 0x00000010
  DP: write dp 00000008 = 00000010
SWD: write dp 8 = 00000010
PHYS: transfer b1 = write dp 8
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 16 and 1
  PHYS: turning out
PHYS: write_bits 48 and 128
  SWD: read ap 4 (1 words)...
PHYS: transfer af = read ap 4
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 10 00 00 00 30 80 10 af 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
SWD: read  ap 4 < 00000000
  DP: read ap 00000004 < 00000000
    AP: 0 read 00000014 < 00000000
MEM: read f0000fd4 < 00000000
  REG: reading #<Adiv5::MemAP:0xa1d7af4> @ 0xf0000fd4 backing Adiv5::ROMTable = 0000000000
  SWD: read ap 8 (1 words)...
PHYS: transfer b7 = read ap 8
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 b7 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
SWD: read  ap 8 < 00000000
  DP: read ap 00000008 < 00000000
    AP: 0 read 00000018 < 00000000
MEM: read f0000fd8 < 00000000
  REG: reading #<Adiv5::MemAP:0xa1d7af4> @ 0xf0000fd8 backing Adiv5::ROMTable = 0000000000
  SWD: read ap c (1 words)...
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
SWD: read  ap c < 00000000
  DP: read ap 0000000c < 00000000
    AP: 0 read 0000001c < 00000000
MEM: read f0000fdc < 00000000
  REG: reading #<Adiv5::MemAP:0xa1d7af4> @ 0xf0000fdc backing Adiv5::ROMTable = 0000000000
  REG: reading #<Peripheral::BackingProxy:0x9fe8d88> @ 0000000000 backing Adiv5::DebugDevice::PeripheralID::PERIPHERAL4 = 0x00000002
  REG: reading Adiv5::DebugDevice::PeripheralID::PERIPHERAL4.count_4kb = 0000000000
  AP: device size: 4096
  REG: writing Adiv5::MemAP.TAR = 0xf0000fcc
    AP: 0 write 00000004 = f0000fcc
    DP: selecting 0:0
  REG: writing #<Peripheral::CachingProxy:0xa2b2d34> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0xa2b2d34> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0xa2b2d34> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0xa2b2d34> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0xa2b2d34> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  DP: write dp 00000008 = 00000000
SWD: write dp 8 = 00000000
PHYS: transfer b1 = write dp 8
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 0 and 0
  PHYS: turning out
PHYS: write_bits 48 and 0
  DP: write ap 00000004 = f0000fcc
SWD: write ap 4 = f0000fcc
PHYS: transfer 8b = write ap 4
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 00 00 00 00 30 00 10 8b 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 4026535884 and 0
  PHYS: turning out
PHYS: write_bits 48 and 0
  SWD: read ap c (1 words)...
PHYS: transfer 9f = read ap c
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 cc 0f 00 f0 30 00 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 01 00 00 00 01
  PHYS: read word: 00000001, parity 1
SWD: read  ap c < 00000001
  DP: read ap 0000000c < 00000001
    AP: 0 read 0000000c < 00000001
MEM: read f0000fcc < 00000001
  REG: reading #<Adiv5::MemAP:0xa1d7af4> @ 0xf0000fcc backing Adiv5::ROMTable = 0x00000001
  REG: reading #<Peripheral::BackingProxy:0xa2b35f4> @ 0x00000fcc backing Adiv5::ROMTable::MEMTYPE = 0x00000001
  REG: reading Adiv5::ROMTable::MEMTYPE.sysmem? = 0000000000
  REG: writing Adiv5::MemAP.TAR = 0xf0000000
    AP: 0 write 00000004 = f0000000
  DP: write ap 00000004 = f0000000
SWD: write ap 4 = f0000000
PHYS: transfer 8b = write ap 4
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 8b 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 4026531840 and 0
  PHYS: turning out
PHYS: write_bits 48 and 0
  SWD: read ap c (1 words)...
PHYS: transfer 9f = read ap c
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 00 00 00 f0 30 00 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 03 f0 0f f0 00
  PHYS: read word: f00ff003, parity 0
SWD: read  ap c < f00ff003
  DP: read ap 0000000c < f00ff003
    AP: 0 read 0000000c < f00ff003
MEM: read f0000000 < f00ff003
  REG: reading #<Adiv5::MemAP:0xa1d7af4> @ 0xf0000000 backing Adiv5::ROMTable = 0xf00ff003
  REG: reading #<Peripheral::BackingProxy:0xa316d84> @ 0000000000 backing Adiv5::ROMTable::Entries = 0xf00ff003
  REG: reading Adiv5::ROMTable::Entries.format? = 0x00000001
    DP: selecting 0:1
  REG: writing #<Peripheral::CachingProxy:0xa326f54> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0xa326f54> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0xa326f54> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0xa326f54> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0x00000001
  REG: writing #<Peripheral::CachingProxy:0xa326f54> @ 0x00000008 backing Adiv5::DP::SELECT = 0x00000010
  DP: write dp 00000008 = 00000010
SWD: write dp 8 = 00000010
PHYS: transfer b1 = write dp 8
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 16 and 1
  PHYS: turning out
PHYS: write_bits 48 and 128
  SWD: read ap 0 (1 words)...
PHYS: transfer 87 = read ap 0
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 10 00 00 00 30 80 10 87 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 03 f0 0f f0 00
  PHYS: read word: f00ff003, parity 0
SWD: read  ap 0 < f00ff003
  DP: read ap 00000000 < f00ff003
    AP: 0 read 00000010 < f00ff003
MEM: read f0000000 < f00ff003
  REG: reading #<Adiv5::MemAP:0xa1d7af4> @ 0xf0000000 backing Adiv5::ROMTable = 0xf00ff003
  REG: reading #<Peripheral::BackingProxy:0xa327300> @ 0000000000 backing Adiv5::ROMTable::Entries = 0xf00ff003
  SWD: read ap 0 (1 words)...
PHYS: transfer 87 = read ap 0
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 87 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 03 f0 0f f0 00
  PHYS: read word: f00ff003, parity 0
SWD: read  ap 0 < f00ff003
  DP: read ap 00000000 < f00ff003
    AP: 0 read 00000010 < f00ff003
MEM: read f0000000 < f00ff003
  REG: reading #<Adiv5::MemAP:0xa1d7af4> @ 0xf0000000 backing Adiv5::ROMTable = 0xf00ff003
  REG: reading #<Peripheral::BackingProxy:0xa327300> @ 0000000000 backing Adiv5::ROMTable::Entries = 0xf00ff003
  AP: rom table entry f00ff003
  SWD: read ap 0 (1 words)...
PHYS: transfer 87 = read ap 0
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 87 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 03 f0 0f f0 00
  PHYS: read word: f00ff003, parity 0
SWD: read  ap 0 < f00ff003
  DP: read ap 00000000 < f00ff003
    AP: 0 read 00000010 < f00ff003
MEM: read f0000000 < f00ff003
  REG: reading #<Adiv5::MemAP:0xa1d7af4> @ 0xf0000000 backing Adiv5::ROMTable = 0xf00ff003
  REG: reading #<Peripheral::BackingProxy:0xa327300> @ 0000000000 backing Adiv5::ROMTable::Entries = 0xf00ff003
  REG: reading Adiv5::ROMTable::Entries.present? = 0x00000001
  SWD: read ap 0 (1 words)...
PHYS: transfer 87 = read ap 0
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 87 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 03 f0 0f f0 00
  PHYS: read word: f00ff003, parity 0
SWD: read  ap 0 < f00ff003
  DP: read ap 00000000 < f00ff003
    AP: 0 read 00000010 < f00ff003
MEM: read f0000000 < f00ff003
  REG: reading #<Adiv5::MemAP:0xa1d7af4> @ 0xf0000000 backing Adiv5::ROMTable = 0xf00ff003
  REG: reading #<Peripheral::BackingProxy:0xa327300> @ 0000000000 backing Adiv5::ROMTable::Entries = 0xf00ff003
  REG: reading Adiv5::ROMTable::Entries.addroffs = 0xf00ff000
AP: Adiv5::DebugDevice at e00ff000
  REG: writing Adiv5::MemAP.TAR = 0xe00ffff0
    AP: 0 write 00000004 = e00ffff0
    DP: selecting 0:0
  REG: writing #<Peripheral::CachingProxy:0xa2535c8> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0xa2535c8> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0xa2535c8> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0xa2535c8> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0xa2535c8> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  DP: write dp 00000008 = 00000000
SWD: write dp 8 = 00000000
PHYS: transfer b1 = write dp 8
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 0 and 0
  PHYS: turning out
PHYS: write_bits 48 and 0
  DP: write ap 00000004 = e00ffff0
SWD: write ap 4 = e00ffff0
PHYS: transfer 8b = write ap 4
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 00 00 00 00 30 00 10 8b 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 3759144944 and 1
  PHYS: turning out
PHYS: write_bits 48 and 128
  SWD: read ap c (4 words)...
PHYS: transfer 9f = read ap c
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 f0 ff 0f e0 30 80 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 0d 00 00 00 01
  PHYS: read word: 0000000d, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 10 00 00 00 01
  PHYS: read word: 00000010, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 05 00 00 00 00
  PHYS: read word: 00000005, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: b1 00 00 00 00
  PHYS: read word: 000000b1, parity 0
SWD: read  ap c < 0000000d 00000010 00000005 000000b1
  DP: read ap 0000000c < 0000000d, 00000010, 00000005, 000000b1
    AP: 0 read 0000000c < 0000000d, 00000010, 00000005, 000000b1
MEM: read e00ffff0 < 0000000d, 00000010, 00000005, 000000b1
  AP: device component class: rom
  REG: writing Adiv5::MemAP.TAR = 0xe00fffd0
    AP: 0 write 00000004 = e00fffd0
  DP: write ap 00000004 = e00fffd0
SWD: write ap 4 = e00fffd0
PHYS: transfer 8b = write ap 4
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 8b 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 3759144912 and 0
  PHYS: turning out
PHYS: write_bits 48 and 0
  SWD: read ap c (1 words)...
PHYS: transfer 9f = read ap c
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 d0 ff 0f e0 30 00 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 04 00 00 00 01
  PHYS: read word: 00000004, parity 1
SWD: read  ap c < 00000004
  DP: read ap 0000000c < 00000004
    AP: 0 read 0000000c < 00000004
MEM: read e00fffd0 < 00000004
  REG: reading #<Adiv5::MemAP:0xa1d7af4> @ 0xe00fffd0 backing Adiv5::DebugDevice = 0x00000004
    DP: selecting 0:1
  REG: writing #<Peripheral::CachingProxy:0xa31540c> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0xa31540c> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0xa31540c> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0xa31540c> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0x00000001
  REG: writing #<Peripheral::CachingProxy:0xa31540c> @ 0x00000008 backing Adiv5::DP::SELECT = 0x00000010
  DP: write dp 00000008 = 00000010
SWD: write dp 8 = 00000010
PHYS: transfer b1 = write dp 8
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 16 and 1
  PHYS: turning out
PHYS: write_bits 48 and 128
  SWD: read ap 4 (1 words)...
PHYS: transfer af = read ap 4
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 10 00 00 00 30 80 10 af 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
SWD: read  ap 4 < 00000000
  DP: read ap 00000004 < 00000000
    AP: 0 read 00000014 < 00000000
MEM: read e00fffd4 < 00000000
  REG: reading #<Adiv5::MemAP:0xa1d7af4> @ 0xe00fffd4 backing Adiv5::DebugDevice = 0000000000
  SWD: read ap 8 (1 words)...
PHYS: transfer b7 = read ap 8
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 b7 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
SWD: read  ap 8 < 00000000
  DP: read ap 00000008 < 00000000
    AP: 0 read 00000018 < 00000000
MEM: read e00fffd8 < 00000000
  REG: reading #<Adiv5::MemAP:0xa1d7af4> @ 0xe00fffd8 backing Adiv5::DebugDevice = 0000000000
  SWD: read ap c (1 words)...
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
SWD: read  ap c < 00000000
  DP: read ap 0000000c < 00000000
    AP: 0 read 0000001c < 00000000
MEM: read e00fffdc < 00000000
  REG: reading #<Adiv5::MemAP:0xa1d7af4> @ 0xe00fffdc backing Adiv5::DebugDevice = 0000000000
  REG: reading #<Peripheral::BackingProxy:0x9fd6908> @ 0000000000 backing Adiv5::DebugDevice::PeripheralID::PERIPHERAL4 = 0x00000004
  REG: reading Adiv5::DebugDevice::PeripheralID::PERIPHERAL4.count_4kb = 0000000000
  AP: device size: 4096
AP: Adiv5::ROMTable at e00ff000
  REG: writing Adiv5::MemAP.TAR = 0xe00ffff0
    AP: 0 write 00000004 = e00ffff0
    DP: selecting 0:0
  REG: writing #<Peripheral::CachingProxy:0xa242020> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0xa242020> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0xa242020> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0xa242020> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0xa242020> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  DP: write dp 00000008 = 00000000
SWD: write dp 8 = 00000000
PHYS: transfer b1 = write dp 8
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 0 and 0
  PHYS: turning out
PHYS: write_bits 48 and 0
  DP: write ap 00000004 = e00ffff0
SWD: write ap 4 = e00ffff0
PHYS: transfer 8b = write ap 4
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 00 00 00 00 30 00 10 8b 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 3759144944 and 1
  PHYS: turning out
PHYS: write_bits 48 and 128
  SWD: read ap c (4 words)...
PHYS: transfer 9f = read ap c
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 f0 ff 0f e0 30 80 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 0d 00 00 00 01
  PHYS: read word: 0000000d, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 10 00 00 00 01
  PHYS: read word: 00000010, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 05 00 00 00 00
  PHYS: read word: 00000005, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: b1 00 00 00 00
  PHYS: read word: 000000b1, parity 0
SWD: read  ap c < 0000000d 00000010 00000005 000000b1
  DP: read ap 0000000c < 0000000d, 00000010, 00000005, 000000b1
    AP: 0 read 0000000c < 0000000d, 00000010, 00000005, 000000b1
MEM: read e00ffff0 < 0000000d, 00000010, 00000005, 000000b1
  AP: device component class: rom
  REG: writing Adiv5::MemAP.TAR = 0xe00fffd0
    AP: 0 write 00000004 = e00fffd0
  DP: write ap 00000004 = e00fffd0
SWD: write ap 4 = e00fffd0
PHYS: transfer 8b = write ap 4
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 8b 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 3759144912 and 0
  PHYS: turning out
PHYS: write_bits 48 and 0
  SWD: read ap c (1 words)...
PHYS: transfer 9f = read ap c
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 d0 ff 0f e0 30 00 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 04 00 00 00 01
  PHYS: read word: 00000004, parity 1
SWD: read  ap c < 00000004
  DP: read ap 0000000c < 00000004
    AP: 0 read 0000000c < 00000004
MEM: read e00fffd0 < 00000004
  REG: reading #<Adiv5::MemAP:0xa1d7af4> @ 0xe00fffd0 backing Adiv5::ROMTable = 0x00000004
    DP: selecting 0:1
  REG: writing #<Peripheral::CachingProxy:0xa314c3c> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0xa314c3c> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0xa314c3c> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0xa314c3c> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0x00000001
  REG: writing #<Peripheral::CachingProxy:0xa314c3c> @ 0x00000008 backing Adiv5::DP::SELECT = 0x00000010
  DP: write dp 00000008 = 00000010
SWD: write dp 8 = 00000010
PHYS: transfer b1 = write dp 8
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 16 and 1
  PHYS: turning out
PHYS: write_bits 48 and 128
  SWD: read ap 4 (1 words)...
PHYS: transfer af = read ap 4
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 10 00 00 00 30 80 10 af 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
SWD: read  ap 4 < 00000000
  DP: read ap 00000004 < 00000000
    AP: 0 read 00000014 < 00000000
MEM: read e00fffd4 < 00000000
  REG: reading #<Adiv5::MemAP:0xa1d7af4> @ 0xe00fffd4 backing Adiv5::ROMTable = 0000000000
  SWD: read ap 8 (1 words)...
PHYS: transfer b7 = read ap 8
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 b7 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
SWD: read  ap 8 < 00000000
  DP: read ap 00000008 < 00000000
    AP: 0 read 00000018 < 00000000
MEM: read e00fffd8 < 00000000
  REG: reading #<Adiv5::MemAP:0xa1d7af4> @ 0xe00fffd8 backing Adiv5::ROMTable = 0000000000
  SWD: read ap c (1 words)...
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
SWD: read  ap c < 00000000
  DP: read ap 0000000c < 00000000
    AP: 0 read 0000001c < 00000000
MEM: read e00fffdc < 00000000
  REG: reading #<Adiv5::MemAP:0xa1d7af4> @ 0xe00fffdc backing Adiv5::ROMTable = 0000000000
  REG: reading #<Peripheral::BackingProxy:0x9fd4798> @ 0000000000 backing Adiv5::DebugDevice::PeripheralID::PERIPHERAL4 = 0x00000004
  REG: reading Adiv5::DebugDevice::PeripheralID::PERIPHERAL4.count_4kb = 0000000000
  AP: device size: 4096
  REG: writing Adiv5::MemAP.TAR = 0xe00fffcc
    AP: 0 write 00000004 = e00fffcc
    DP: selecting 0:0
  REG: writing #<Peripheral::CachingProxy:0xa240dd8> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0xa240dd8> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0xa240dd8> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0xa240dd8> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0xa240dd8> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  DP: write dp 00000008 = 00000000
SWD: write dp 8 = 00000000
PHYS: transfer b1 = write dp 8
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 0 and 0
  PHYS: turning out
PHYS: write_bits 48 and 0
  DP: write ap 00000004 = e00fffcc
SWD: write ap 4 = e00fffcc
PHYS: transfer 8b = write ap 4
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 00 00 00 00 30 00 10 8b 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 3759144908 and 1
  PHYS: turning out
PHYS: write_bits 48 and 128
  SWD: read ap c (1 words)...
PHYS: transfer 9f = read ap c
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 cc ff 0f e0 30 80 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 01 00 00 00 01
  PHYS: read word: 00000001, parity 1
SWD: read  ap c < 00000001
  DP: read ap 0000000c < 00000001
    AP: 0 read 0000000c < 00000001
MEM: read e00fffcc < 00000001
  REG: reading #<Adiv5::MemAP:0xa1d7af4> @ 0xe00fffcc backing Adiv5::ROMTable = 0x00000001
  REG: reading #<Peripheral::BackingProxy:0xa242084> @ 0x00000fcc backing Adiv5::ROMTable::MEMTYPE = 0x00000001
  REG: reading Adiv5::ROMTable::MEMTYPE.sysmem? = 0000000000
  REG: writing Adiv5::MemAP.TAR = 0xe00ff000
    AP: 0 write 00000004 = e00ff000
  DP: write ap 00000004 = e00ff000
SWD: write ap 4 = e00ff000
PHYS: transfer 8b = write ap 4
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 8b 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 3759140864 and 1
  PHYS: turning out
PHYS: write_bits 48 and 128
  SWD: read ap c (1 words)...
PHYS: transfer 9f = read ap c
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 00 f0 0f e0 30 80 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 03 f0 f0 ff 00
  PHYS: read word: fff0f003, parity 0
SWD: read  ap c < fff0f003
  DP: read ap 0000000c < fff0f003
    AP: 0 read 0000000c < fff0f003
MEM: read e00ff000 < fff0f003
  REG: reading #<Adiv5::MemAP:0xa1d7af4> @ 0xe00ff000 backing Adiv5::ROMTable = 0xfff0f003
  REG: reading #<Peripheral::BackingProxy:0xa126e98> @ 0000000000 backing Adiv5::ROMTable::Entries = 0xfff0f003
  REG: reading Adiv5::ROMTable::Entries.format? = 0x00000001
    DP: selecting 0:1
  REG: writing #<Peripheral::CachingProxy:0x9fe88d8> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9fe88d8> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9fe88d8> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9fe88d8> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0x00000001
  REG: writing #<Peripheral::CachingProxy:0x9fe88d8> @ 0x00000008 backing Adiv5::DP::SELECT = 0x00000010
  DP: write dp 00000008 = 00000010
SWD: write dp 8 = 00000010
PHYS: transfer b1 = write dp 8
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 16 and 1
  PHYS: turning out
PHYS: write_bits 48 and 128
  SWD: read ap 0 (1 words)...
PHYS: transfer 87 = read ap 0
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 10 00 00 00 30 80 10 87 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 03 f0 f0 ff 00
  PHYS: read word: fff0f003, parity 0
SWD: read  ap 0 < fff0f003
  DP: read ap 00000000 < fff0f003
    AP: 0 read 00000010 < fff0f003
MEM: read e00ff000 < fff0f003
  REG: reading #<Adiv5::MemAP:0xa1d7af4> @ 0xe00ff000 backing Adiv5::ROMTable = 0xfff0f003
  REG: reading #<Peripheral::BackingProxy:0x9fe8e28> @ 0000000000 backing Adiv5::ROMTable::Entries = 0xfff0f003
  SWD: read ap 0 (1 words)...
PHYS: transfer 87 = read ap 0
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 87 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 03 f0 f0 ff 00
  PHYS: read word: fff0f003, parity 0
SWD: read  ap 0 < fff0f003
  DP: read ap 00000000 < fff0f003
    AP: 0 read 00000010 < fff0f003
MEM: read e00ff000 < fff0f003
  REG: reading #<Adiv5::MemAP:0xa1d7af4> @ 0xe00ff000 backing Adiv5::ROMTable = 0xfff0f003
  REG: reading #<Peripheral::BackingProxy:0x9fe8e28> @ 0000000000 backing Adiv5::ROMTable::Entries = 0xfff0f003
  AP: rom table entry fff0f003
  SWD: read ap 0 (1 words)...
PHYS: transfer 87 = read ap 0
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 87 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 03 f0 f0 ff 00
  PHYS: read word: fff0f003, parity 0
SWD: read  ap 0 < fff0f003
  DP: read ap 00000000 < fff0f003
    AP: 0 read 00000010 < fff0f003
MEM: read e00ff000 < fff0f003
  REG: reading #<Adiv5::MemAP:0xa1d7af4> @ 0xe00ff000 backing Adiv5::ROMTable = 0xfff0f003
  REG: reading #<Peripheral::BackingProxy:0x9fe8e28> @ 0000000000 backing Adiv5::ROMTable::Entries = 0xfff0f003
  REG: reading Adiv5::ROMTable::Entries.present? = 0x00000001
  SWD: read ap 0 (1 words)...
PHYS: transfer 87 = read ap 0
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 87 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 03 f0 f0 ff 00
  PHYS: read word: fff0f003, parity 0
SWD: read  ap 0 < fff0f003
  DP: read ap 00000000 < fff0f003
    AP: 0 read 00000010 < fff0f003
MEM: read e00ff000 < fff0f003
  REG: reading #<Adiv5::MemAP:0xa1d7af4> @ 0xe00ff000 backing Adiv5::ROMTable = 0xfff0f003
  REG: reading #<Peripheral::BackingProxy:0x9fe8e28> @ 0000000000 backing Adiv5::ROMTable::Entries = 0xfff0f003
  REG: reading Adiv5::ROMTable::Entries.addroffs = 0xfff0f000
AP: Adiv5::DebugDevice at e000e000
  REG: writing Adiv5::MemAP.TAR = 0xe000eff0
    AP: 0 write 00000004 = e000eff0
    DP: selecting 0:0
  REG: writing #<Peripheral::CachingProxy:0xa292778> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0xa292778> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0xa292778> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0xa292778> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0xa292778> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  DP: write dp 00000008 = 00000000
SWD: write dp 8 = 00000000
PHYS: transfer b1 = write dp 8
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 0 and 0
  PHYS: turning out
PHYS: write_bits 48 and 0
  DP: write ap 00000004 = e000eff0
SWD: write ap 4 = e000eff0
PHYS: transfer 8b = write ap 4
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 00 00 00 00 30 00 10 8b 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 3758157808 and 0
  PHYS: turning out
PHYS: write_bits 48 and 0
  SWD: read ap c (4 words)...
PHYS: transfer 9f = read ap c
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 f0 ef 00 e0 30 00 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 0d 00 00 00 01
  PHYS: read word: 0000000d, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: e0 00 00 00 01
  PHYS: read word: 000000e0, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 05 00 00 00 00
  PHYS: read word: 00000005, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: b1 00 00 00 00
  PHYS: read word: 000000b1, parity 0
SWD: read  ap c < 0000000d 000000e0 00000005 000000b1
  DP: read ap 0000000c < 0000000d, 000000e0, 00000005, 000000b1
    AP: 0 read 0000000c < 0000000d, 000000e0, 00000005, 000000b1
MEM: read e000eff0 < 0000000d, 000000e0, 00000005, 000000b1
  AP: device component class: generic_ip
  REG: writing Adiv5::MemAP.TAR = 0xe000efd0
    AP: 0 write 00000004 = e000efd0
  DP: write ap 00000004 = e000efd0
SWD: write ap 4 = e000efd0
PHYS: transfer 8b = write ap 4
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 8b 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 3758157776 and 1
  PHYS: turning out
PHYS: write_bits 48 and 128
  SWD: read ap c (1 words)...
PHYS: transfer 9f = read ap c
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 d0 ef 00 e0 30 80 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 04 00 00 00 01
  PHYS: read word: 00000004, parity 1
SWD: read  ap c < 00000004
  DP: read ap 0000000c < 00000004
    AP: 0 read 0000000c < 00000004
MEM: read e000efd0 < 00000004
  REG: reading #<Adiv5::MemAP:0xa1d7af4> @ 0xe000efd0 backing Adiv5::DebugDevice = 0x00000004
    DP: selecting 0:1
  REG: writing #<Peripheral::CachingProxy:0xa323c8c> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0xa323c8c> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0xa323c8c> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0xa323c8c> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0x00000001
  REG: writing #<Peripheral::CachingProxy:0xa323c8c> @ 0x00000008 backing Adiv5::DP::SELECT = 0x00000010
  DP: write dp 00000008 = 00000010
SWD: write dp 8 = 00000010
PHYS: transfer b1 = write dp 8
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 16 and 1
  PHYS: turning out
PHYS: write_bits 48 and 128
  SWD: read ap 4 (1 words)...
PHYS: transfer af = read ap 4
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 10 00 00 00 30 80 10 af 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
SWD: read  ap 4 < 00000000
  DP: read ap 00000004 < 00000000
    AP: 0 read 00000014 < 00000000
MEM: read e000efd4 < 00000000
  REG: reading #<Adiv5::MemAP:0xa1d7af4> @ 0xe000efd4 backing Adiv5::DebugDevice = 0000000000
  SWD: read ap 8 (1 words)...
PHYS: transfer b7 = read ap 8
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 b7 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
SWD: read  ap 8 < 00000000
  DP: read ap 00000008 < 00000000
    AP: 0 read 00000018 < 00000000
MEM: read e000efd8 < 00000000
  REG: reading #<Adiv5::MemAP:0xa1d7af4> @ 0xe000efd8 backing Adiv5::DebugDevice = 0000000000
  SWD: read ap c (1 words)...
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
SWD: read  ap c < 00000000
  DP: read ap 0000000c < 00000000
    AP: 0 read 0000001c < 00000000
MEM: read e000efdc < 00000000
  REG: reading #<Adiv5::MemAP:0xa1d7af4> @ 0xe000efdc backing Adiv5::DebugDevice = 0000000000
  REG: reading #<Peripheral::BackingProxy:0x9feb0c4> @ 0000000000 backing Adiv5::DebugDevice::PeripheralID::PERIPHERAL4 = 0x00000004
  REG: reading Adiv5::DebugDevice::PeripheralID::PERIPHERAL4.count_4kb = 0000000000
  AP: device size: 4096
  REG: writing Adiv5::MemAP.TAR = 0xe00ff004
    AP: 0 write 00000004 = e00ff004
    DP: selecting 0:0
  REG: writing #<Peripheral::CachingProxy:0xa29133c> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0xa29133c> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0xa29133c> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0xa29133c> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0xa29133c> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  DP: write dp 00000008 = 00000000
SWD: write dp 8 = 00000000
PHYS: transfer b1 = write dp 8
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 0 and 0
  PHYS: turning out
PHYS: write_bits 48 and 0
  DP: write ap 00000004 = e00ff004
SWD: write ap 4 = e00ff004
PHYS: transfer 8b = write ap 4
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 00 00 00 00 30 00 10 8b 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 3759140868 and 0
  PHYS: turning out
PHYS: write_bits 48 and 0
  SWD: read ap c (1 words)...
PHYS: transfer 9f = read ap c
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 04 f0 0f e0 30 00 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 03 20 f0 ff 01
  PHYS: read word: fff02003, parity 1
SWD: read  ap c < fff02003
  DP: read ap 0000000c < fff02003
    AP: 0 read 0000000c < fff02003
MEM: read e00ff004 < fff02003
  REG: reading #<Adiv5::MemAP:0xa1d7af4> @ 0xe00ff004 backing Adiv5::ROMTable = 0xfff02003
  REG: reading #<Peripheral::BackingProxy:0xa292a20> @ 0x00000004 backing Adiv5::ROMTable::Entries = 0xfff02003
    DP: selecting 0:1
  REG: writing #<Peripheral::CachingProxy:0xa206430> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0xa206430> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0xa206430> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0xa206430> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0x00000001
  REG: writing #<Peripheral::CachingProxy:0xa206430> @ 0x00000008 backing Adiv5::DP::SELECT = 0x00000010
  DP: write dp 00000008 = 00000010
SWD: write dp 8 = 00000010
PHYS: transfer b1 = write dp 8
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 16 and 1
  PHYS: turning out
PHYS: write_bits 48 and 128
  SWD: read ap 4 (1 words)...
PHYS: transfer af = read ap 4
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 10 00 00 00 30 80 10 af 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 03 20 f0 ff 01
  PHYS: read word: fff02003, parity 1
SWD: read  ap 4 < fff02003
  DP: read ap 00000004 < fff02003
    AP: 0 read 00000014 < fff02003
MEM: read e00ff004 < fff02003
  REG: reading #<Adiv5::MemAP:0xa1d7af4> @ 0xe00ff004 backing Adiv5::ROMTable = 0xfff02003
  REG: reading #<Peripheral::BackingProxy:0xa292a20> @ 0x00000004 backing Adiv5::ROMTable::Entries = 0xfff02003
  AP: rom table entry fff02003
  SWD: read ap 4 (1 words)...
PHYS: transfer af = read ap 4
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 af 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 03 20 f0 ff 01
  PHYS: read word: fff02003, parity 1
SWD: read  ap 4 < fff02003
  DP: read ap 00000004 < fff02003
    AP: 0 read 00000014 < fff02003
MEM: read e00ff004 < fff02003
  REG: reading #<Adiv5::MemAP:0xa1d7af4> @ 0xe00ff004 backing Adiv5::ROMTable = 0xfff02003
  REG: reading #<Peripheral::BackingProxy:0xa292a20> @ 0x00000004 backing Adiv5::ROMTable::Entries = 0xfff02003
  REG: reading Adiv5::ROMTable::Entries.present? = 0x00000001
  SWD: read ap 4 (1 words)...
PHYS: transfer af = read ap 4
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 af 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 03 20 f0 ff 01
  PHYS: read word: fff02003, parity 1
SWD: read  ap 4 < fff02003
  DP: read ap 00000004 < fff02003
    AP: 0 read 00000014 < fff02003
MEM: read e00ff004 < fff02003
  REG: reading #<Adiv5::MemAP:0xa1d7af4> @ 0xe00ff004 backing Adiv5::ROMTable = 0xfff02003
  REG: reading #<Peripheral::BackingProxy:0xa292a20> @ 0x00000004 backing Adiv5::ROMTable::Entries = 0xfff02003
  REG: reading Adiv5::ROMTable::Entries.addroffs = 0xfff02000
AP: Adiv5::DebugDevice at e0001000
  REG: writing Adiv5::MemAP.TAR = 0xe0001ff0
    AP: 0 write 00000004 = e0001ff0
    DP: selecting 0:0
  REG: writing #<Peripheral::CachingProxy:0xa324588> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0xa324588> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0xa324588> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0xa324588> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0xa324588> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  DP: write dp 00000008 = 00000000
SWD: write dp 8 = 00000000
PHYS: transfer b1 = write dp 8
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 0 and 0
  PHYS: turning out
PHYS: write_bits 48 and 0
  DP: write ap 00000004 = e0001ff0
SWD: write ap 4 = e0001ff0
PHYS: transfer 8b = write ap 4
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 00 00 00 00 30 00 10 8b 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 3758104560 and 0
  PHYS: turning out
PHYS: write_bits 48 and 0
  SWD: read ap c (4 words)...
PHYS: transfer 9f = read ap c
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 f0 1f 00 e0 30 00 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 0d 00 00 00 01
  PHYS: read word: 0000000d, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: e0 00 00 00 01
  PHYS: read word: 000000e0, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 05 00 00 00 00
  PHYS: read word: 00000005, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: b1 00 00 00 00
  PHYS: read word: 000000b1, parity 0
SWD: read  ap c < 0000000d 000000e0 00000005 000000b1
  DP: read ap 0000000c < 0000000d, 000000e0, 00000005, 000000b1
    AP: 0 read 0000000c < 0000000d, 000000e0, 00000005, 000000b1
MEM: read e0001ff0 < 0000000d, 000000e0, 00000005, 000000b1
  AP: device component class: generic_ip
  REG: writing Adiv5::MemAP.TAR = 0xe0001fd0
    AP: 0 write 00000004 = e0001fd0
  DP: write ap 00000004 = e0001fd0
SWD: write ap 4 = e0001fd0
PHYS: transfer 8b = write ap 4
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 8b 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 3758104528 and 1
  PHYS: turning out
PHYS: write_bits 48 and 128
  SWD: read ap c (1 words)...
PHYS: transfer 9f = read ap c
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 d0 1f 00 e0 30 80 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 04 00 00 00 01
  PHYS: read word: 00000004, parity 1
SWD: read  ap c < 00000004
  DP: read ap 0000000c < 00000004
    AP: 0 read 0000000c < 00000004
MEM: read e0001fd0 < 00000004
  REG: reading #<Adiv5::MemAP:0xa1d7af4> @ 0xe0001fd0 backing Adiv5::DebugDevice = 0x00000004
    DP: selecting 0:1
  REG: writing #<Peripheral::CachingProxy:0xa19c8b4> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0xa19c8b4> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0xa19c8b4> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0xa19c8b4> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0x00000001
  REG: writing #<Peripheral::CachingProxy:0xa19c8b4> @ 0x00000008 backing Adiv5::DP::SELECT = 0x00000010
  DP: write dp 00000008 = 00000010
SWD: write dp 8 = 00000010
PHYS: transfer b1 = write dp 8
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 16 and 1
  PHYS: turning out
PHYS: write_bits 48 and 128
  SWD: read ap 4 (1 words)...
PHYS: transfer af = read ap 4
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 10 00 00 00 30 80 10 af 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
SWD: read  ap 4 < 00000000
  DP: read ap 00000004 < 00000000
    AP: 0 read 00000014 < 00000000
MEM: read e0001fd4 < 00000000
  REG: reading #<Adiv5::MemAP:0xa1d7af4> @ 0xe0001fd4 backing Adiv5::DebugDevice = 0000000000
  SWD: read ap 8 (1 words)...
PHYS: transfer b7 = read ap 8
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 b7 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
SWD: read  ap 8 < 00000000
  DP: read ap 00000008 < 00000000
    AP: 0 read 00000018 < 00000000
MEM: read e0001fd8 < 00000000
  REG: reading #<Adiv5::MemAP:0xa1d7af4> @ 0xe0001fd8 backing Adiv5::DebugDevice = 0000000000
  SWD: read ap c (1 words)...
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
SWD: read  ap c < 00000000
  DP: read ap 0000000c < 00000000
    AP: 0 read 0000001c < 00000000
MEM: read e0001fdc < 00000000
  REG: reading #<Adiv5::MemAP:0xa1d7af4> @ 0xe0001fdc backing Adiv5::DebugDevice = 0000000000
  REG: reading #<Peripheral::BackingProxy:0xa2544f0> @ 0000000000 backing Adiv5::DebugDevice::PeripheralID::PERIPHERAL4 = 0x00000004
  REG: reading Adiv5::DebugDevice::PeripheralID::PERIPHERAL4.count_4kb = 0000000000
  AP: device size: 4096
  REG: writing Adiv5::MemAP.TAR = 0xe00ff008
    AP: 0 write 00000004 = e00ff008
    DP: selecting 0:0
  REG: writing #<Peripheral::CachingProxy:0xa3238e0> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0xa3238e0> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0xa3238e0> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0xa3238e0> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0xa3238e0> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  DP: write dp 00000008 = 00000000
SWD: write dp 8 = 00000000
PHYS: transfer b1 = write dp 8
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 0 and 0
  PHYS: turning out
PHYS: write_bits 48 and 0
  DP: write ap 00000004 = e00ff008
SWD: write ap 4 = e00ff008
PHYS: transfer 8b = write ap 4
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 00 00 00 00 30 00 10 8b 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 3759140872 and 0
  PHYS: turning out
PHYS: write_bits 48 and 0
  SWD: read ap c (1 words)...
PHYS: transfer 9f = read ap c
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 08 f0 0f e0 30 00 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 03 30 f0 ff 00
  PHYS: read word: fff03003, parity 0
SWD: read  ap c < fff03003
  DP: read ap 0000000c < fff03003
    AP: 0 read 0000000c < fff03003
MEM: read e00ff008 < fff03003
  REG: reading #<Adiv5::MemAP:0xa1d7af4> @ 0xe00ff008 backing Adiv5::ROMTable = 0xfff03003
  REG: reading #<Peripheral::BackingProxy:0xa3243bc> @ 0x00000008 backing Adiv5::ROMTable::Entries = 0xfff03003
    DP: selecting 0:1
  REG: writing #<Peripheral::CachingProxy:0xa2dad20> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0xa2dad20> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0xa2dad20> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0xa2dad20> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0x00000001
  REG: writing #<Peripheral::CachingProxy:0xa2dad20> @ 0x00000008 backing Adiv5::DP::SELECT = 0x00000010
  DP: write dp 00000008 = 00000010
SWD: write dp 8 = 00000010
PHYS: transfer b1 = write dp 8
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 16 and 1
  PHYS: turning out
PHYS: write_bits 48 and 128
  SWD: read ap 8 (1 words)...
PHYS: transfer b7 = read ap 8
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 10 00 00 00 30 80 10 b7 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 03 30 f0 ff 00
  PHYS: read word: fff03003, parity 0
SWD: read  ap 8 < fff03003
  DP: read ap 00000008 < fff03003
    AP: 0 read 00000018 < fff03003
MEM: read e00ff008 < fff03003
  REG: reading #<Adiv5::MemAP:0xa1d7af4> @ 0xe00ff008 backing Adiv5::ROMTable = 0xfff03003
  REG: reading #<Peripheral::BackingProxy:0xa3243bc> @ 0x00000008 backing Adiv5::ROMTable::Entries = 0xfff03003
  AP: rom table entry fff03003
  SWD: read ap 8 (1 words)...
PHYS: transfer b7 = read ap 8
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 b7 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 03 30 f0 ff 00
  PHYS: read word: fff03003, parity 0
SWD: read  ap 8 < fff03003
  DP: read ap 00000008 < fff03003
    AP: 0 read 00000018 < fff03003
MEM: read e00ff008 < fff03003
  REG: reading #<Adiv5::MemAP:0xa1d7af4> @ 0xe00ff008 backing Adiv5::ROMTable = 0xfff03003
  REG: reading #<Peripheral::BackingProxy:0xa3243bc> @ 0x00000008 backing Adiv5::ROMTable::Entries = 0xfff03003
  REG: reading Adiv5::ROMTable::Entries.present? = 0x00000001
  SWD: read ap 8 (1 words)...
PHYS: transfer b7 = read ap 8
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 b7 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 03 30 f0 ff 00
  PHYS: read word: fff03003, parity 0
SWD: read  ap 8 < fff03003
  DP: read ap 00000008 < fff03003
    AP: 0 read 00000018 < fff03003
MEM: read e00ff008 < fff03003
  REG: reading #<Adiv5::MemAP:0xa1d7af4> @ 0xe00ff008 backing Adiv5::ROMTable = 0xfff03003
  REG: reading #<Peripheral::BackingProxy:0xa3243bc> @ 0x00000008 backing Adiv5::ROMTable::Entries = 0xfff03003
  REG: reading Adiv5::ROMTable::Entries.addroffs = 0xfff03000
AP: Adiv5::DebugDevice at e0002000
  REG: writing Adiv5::MemAP.TAR = 0xe0002ff0
    AP: 0 write 00000004 = e0002ff0
    DP: selecting 0:0
  REG: writing #<Peripheral::CachingProxy:0xa1d8224> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0xa1d8224> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0xa1d8224> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0xa1d8224> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0xa1d8224> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  DP: write dp 00000008 = 00000000
SWD: write dp 8 = 00000000
PHYS: transfer b1 = write dp 8
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 0 and 0
  PHYS: turning out
PHYS: write_bits 48 and 0
  DP: write ap 00000004 = e0002ff0
SWD: write ap 4 = e0002ff0
PHYS: transfer 8b = write ap 4
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 00 00 00 00 30 00 10 8b 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 3758108656 and 0
  PHYS: turning out
PHYS: write_bits 48 and 0
  SWD: read ap c (4 words)...
PHYS: transfer 9f = read ap c
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 f0 2f 00 e0 30 00 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 0d 00 00 00 01
  PHYS: read word: 0000000d, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: e0 00 00 00 01
  PHYS: read word: 000000e0, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 05 00 00 00 00
  PHYS: read word: 00000005, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: b1 00 00 00 00
  PHYS: read word: 000000b1, parity 0
SWD: read  ap c < 0000000d 000000e0 00000005 000000b1
  DP: read ap 0000000c < 0000000d, 000000e0, 00000005, 000000b1
    AP: 0 read 0000000c < 0000000d, 000000e0, 00000005, 000000b1
MEM: read e0002ff0 < 0000000d, 000000e0, 00000005, 000000b1
  AP: device component class: generic_ip
  REG: writing Adiv5::MemAP.TAR = 0xe0002fd0
    AP: 0 write 00000004 = e0002fd0
  DP: write ap 00000004 = e0002fd0
SWD: write ap 4 = e0002fd0
PHYS: transfer 8b = write ap 4
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 8b 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 3758108624 and 1
  PHYS: turning out
PHYS: write_bits 48 and 128
  SWD: read ap c (1 words)...
PHYS: transfer 9f = read ap c
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 d0 2f 00 e0 30 80 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 04 00 00 00 01
  PHYS: read word: 00000004, parity 1
SWD: read  ap c < 00000004
  DP: read ap 0000000c < 00000004
    AP: 0 read 0000000c < 00000004
MEM: read e0002fd0 < 00000004
  REG: reading #<Adiv5::MemAP:0xa1d7af4> @ 0xe0002fd0 backing Adiv5::DebugDevice = 0x00000004
    DP: selecting 0:1
  REG: writing #<Peripheral::CachingProxy:0xa2d5cf8> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0xa2d5cf8> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0xa2d5cf8> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0xa2d5cf8> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0x00000001
  REG: writing #<Peripheral::CachingProxy:0xa2d5cf8> @ 0x00000008 backing Adiv5::DP::SELECT = 0x00000010
  DP: write dp 00000008 = 00000010
SWD: write dp 8 = 00000010
PHYS: transfer b1 = write dp 8
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 16 and 1
  PHYS: turning out
PHYS: write_bits 48 and 128
  SWD: read ap 4 (1 words)...
PHYS: transfer af = read ap 4
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 10 00 00 00 30 80 10 af 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
SWD: read  ap 4 < 00000000
  DP: read ap 00000004 < 00000000
    AP: 0 read 00000014 < 00000000
MEM: read e0002fd4 < 00000000
  REG: reading #<Adiv5::MemAP:0xa1d7af4> @ 0xe0002fd4 backing Adiv5::DebugDevice = 0000000000
  SWD: read ap 8 (1 words)...
PHYS: transfer b7 = read ap 8
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 b7 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
SWD: read  ap 8 < 00000000
  DP: read ap 00000008 < 00000000
    AP: 0 read 00000018 < 00000000
MEM: read e0002fd8 < 00000000
  REG: reading #<Adiv5::MemAP:0xa1d7af4> @ 0xe0002fd8 backing Adiv5::DebugDevice = 0000000000
  SWD: read ap c (1 words)...
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
SWD: read  ap c < 00000000
  DP: read ap 0000000c < 00000000
    AP: 0 read 0000001c < 00000000
MEM: read e0002fdc < 00000000
  REG: reading #<Adiv5::MemAP:0xa1d7af4> @ 0xe0002fdc backing Adiv5::DebugDevice = 0000000000
  REG: reading #<Peripheral::BackingProxy:0xa3164d8> @ 0000000000 backing Adiv5::DebugDevice::PeripheralID::PERIPHERAL4 = 0x00000004
  REG: reading Adiv5::DebugDevice::PeripheralID::PERIPHERAL4.count_4kb = 0000000000
  AP: device size: 4096
  REG: writing Adiv5::MemAP.TAR = 0xe00ff00c
    AP: 0 write 00000004 = e00ff00c
    DP: selecting 0:0
  REG: writing #<Peripheral::CachingProxy:0xa19b194> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0xa19b194> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0xa19b194> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0xa19b194> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0xa19b194> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  DP: write dp 00000008 = 00000000
SWD: write dp 8 = 00000000
PHYS: transfer b1 = write dp 8
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 0 and 0
  PHYS: turning out
PHYS: write_bits 48 and 0
  DP: write ap 00000004 = e00ff00c
SWD: write ap 4 = e00ff00c
PHYS: transfer 8b = write ap 4
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 00 00 00 00 30 00 10 8b 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 3759140876 and 1
  PHYS: turning out
PHYS: write_bits 48 and 128
  SWD: read ap c (1 words)...
PHYS: transfer 9f = read ap c
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 0c f0 0f e0 30 80 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
SWD: read  ap c < 00000000
  DP: read ap 0000000c < 00000000
    AP: 0 read 0000000c < 00000000
MEM: read e00ff00c < 00000000
  REG: reading #<Adiv5::MemAP:0xa1d7af4> @ 0xe00ff00c backing Adiv5::ROMTable = 0000000000
  REG: reading #<Peripheral::BackingProxy:0xa1d7fb8> @ 0x0000000c backing Adiv5::ROMTable::Entries = 0000000000
  REG: writing Adiv5::MemAP.TAR = 0xf0000004
    AP: 0 write 00000004 = f0000004
  DP: write ap 00000004 = f0000004
SWD: write ap 4 = f0000004
PHYS: transfer 8b = write ap 4
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 8b 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 4026531844 and 1
  PHYS: turning out
PHYS: write_bits 48 and 128
  SWD: read ap c (1 words)...
PHYS: transfer 9f = read ap c
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 04 00 00 f0 30 80 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 03 20 00 00 01
  PHYS: read word: 00002003, parity 1
SWD: read  ap c < 00002003
  DP: read ap 0000000c < 00002003
    AP: 0 read 0000000c < 00002003
MEM: read f0000004 < 00002003
  REG: reading #<Adiv5::MemAP:0xa1d7af4> @ 0xf0000004 backing Adiv5::ROMTable = 0x00002003
  REG: reading #<Peripheral::BackingProxy:0x9fec884> @ 0x00000004 backing Adiv5::ROMTable::Entries = 0x00002003
    DP: selecting 0:1
  REG: writing #<Peripheral::CachingProxy:0xa3243f8> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0xa3243f8> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0xa3243f8> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0xa3243f8> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0x00000001
  REG: writing #<Peripheral::CachingProxy:0xa3243f8> @ 0x00000008 backing Adiv5::DP::SELECT = 0x00000010
  DP: write dp 00000008 = 00000010
SWD: write dp 8 = 00000010
PHYS: transfer b1 = write dp 8
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 16 and 1
  PHYS: turning out
PHYS: write_bits 48 and 128
  SWD: read ap 4 (1 words)...
PHYS: transfer af = read ap 4
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 10 00 00 00 30 80 10 af 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 03 20 00 00 01
  PHYS: read word: 00002003, parity 1
SWD: read  ap 4 < 00002003
  DP: read ap 00000004 < 00002003
    AP: 0 read 00000014 < 00002003
MEM: read f0000004 < 00002003
  REG: reading #<Adiv5::MemAP:0xa1d7af4> @ 0xf0000004 backing Adiv5::ROMTable = 0x00002003
  REG: reading #<Peripheral::BackingProxy:0x9fec884> @ 0x00000004 backing Adiv5::ROMTable::Entries = 0x00002003
  AP: rom table entry 00002003
  SWD: read ap 4 (1 words)...
PHYS: transfer af = read ap 4
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 af 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 03 20 00 00 01
  PHYS: read word: 00002003, parity 1
SWD: read  ap 4 < 00002003
  DP: read ap 00000004 < 00002003
    AP: 0 read 00000014 < 00002003
MEM: read f0000004 < 00002003
  REG: reading #<Adiv5::MemAP:0xa1d7af4> @ 0xf0000004 backing Adiv5::ROMTable = 0x00002003
  REG: reading #<Peripheral::BackingProxy:0x9fec884> @ 0x00000004 backing Adiv5::ROMTable::Entries = 0x00002003
  REG: reading Adiv5::ROMTable::Entries.present? = 0x00000001
  SWD: read ap 4 (1 words)...
PHYS: transfer af = read ap 4
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 af 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 03 20 00 00 01
  PHYS: read word: 00002003, parity 1
SWD: read  ap 4 < 00002003
  DP: read ap 00000004 < 00002003
    AP: 0 read 00000014 < 00002003
MEM: read f0000004 < 00002003
  REG: reading #<Adiv5::MemAP:0xa1d7af4> @ 0xf0000004 backing Adiv5::ROMTable = 0x00002003
  REG: reading #<Peripheral::BackingProxy:0x9fec884> @ 0x00000004 backing Adiv5::ROMTable::Entries = 0x00002003
  REG: reading Adiv5::ROMTable::Entries.addroffs = 0x00002000
AP: Adiv5::DebugDevice at f0002000
  REG: writing Adiv5::MemAP.TAR = 0xf0002ff0
    AP: 0 write 00000004 = f0002ff0
    DP: selecting 0:0
  REG: writing #<Peripheral::CachingProxy:0xa291490> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0xa291490> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0xa291490> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0xa291490> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0xa291490> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  DP: write dp 00000008 = 00000000
SWD: write dp 8 = 00000000
PHYS: transfer b1 = write dp 8
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 0 and 0
  PHYS: turning out
PHYS: write_bits 48 and 0
  DP: write ap 00000004 = f0002ff0
SWD: write ap 4 = f0002ff0
PHYS: transfer 8b = write ap 4
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 00 00 00 00 30 00 10 8b 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 4026544112 and 1
  PHYS: turning out
PHYS: write_bits 48 and 128
  SWD: read ap c (4 words)...
PHYS: transfer 9f = read ap c
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 f0 2f 00 f0 30 80 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 0d 00 00 00 01
  PHYS: read word: 0000000d, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 90 00 00 00 00
  PHYS: read word: 00000090, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 05 00 00 00 00
  PHYS: read word: 00000005, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: b1 00 00 00 00
  PHYS: read word: 000000b1, parity 0
SWD: read  ap c < 0000000d 00000090 00000005 000000b1
  DP: read ap 0000000c < 0000000d, 00000090, 00000005, 000000b1
    AP: 0 read 0000000c < 0000000d, 00000090, 00000005, 000000b1
MEM: read f0002ff0 < 0000000d, 00000090, 00000005, 000000b1
  AP: device component class: debug
  REG: writing Adiv5::MemAP.TAR = 0xf0002fd0
    AP: 0 write 00000004 = f0002fd0
  DP: write ap 00000004 = f0002fd0
SWD: write ap 4 = f0002fd0
PHYS: transfer 8b = write ap 4
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 8b 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 4026544080 and 0
  PHYS: turning out
PHYS: write_bits 48 and 0
  SWD: read ap c (1 words)...
PHYS: transfer 9f = read ap c
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 d0 2f 00 f0 30 00 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 04 00 00 00 01
  PHYS: read word: 00000004, parity 1
SWD: read  ap c < 00000004
  DP: read ap 0000000c < 00000004
    AP: 0 read 0000000c < 00000004
MEM: read f0002fd0 < 00000004
  REG: reading #<Adiv5::MemAP:0xa1d7af4> @ 0xf0002fd0 backing Adiv5::DebugDevice = 0x00000004
    DP: selecting 0:1
  REG: writing #<Peripheral::CachingProxy:0xa31f2e0> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0xa31f2e0> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0xa31f2e0> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0xa31f2e0> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0x00000001
  REG: writing #<Peripheral::CachingProxy:0xa31f2e0> @ 0x00000008 backing Adiv5::DP::SELECT = 0x00000010
  DP: write dp 00000008 = 00000010
SWD: write dp 8 = 00000010
PHYS: transfer b1 = write dp 8
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 16 and 1
  PHYS: turning out
PHYS: write_bits 48 and 128
  SWD: read ap 4 (1 words)...
PHYS: transfer af = read ap 4
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 10 00 00 00 30 80 10 af 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
SWD: read  ap 4 < 00000000
  DP: read ap 00000004 < 00000000
    AP: 0 read 00000014 < 00000000
MEM: read f0002fd4 < 00000000
  REG: reading #<Adiv5::MemAP:0xa1d7af4> @ 0xf0002fd4 backing Adiv5::DebugDevice = 0000000000
  SWD: read ap 8 (1 words)...
PHYS: transfer b7 = read ap 8
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 b7 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
SWD: read  ap 8 < 00000000
  DP: read ap 00000008 < 00000000
    AP: 0 read 00000018 < 00000000
MEM: read f0002fd8 < 00000000
  REG: reading #<Adiv5::MemAP:0xa1d7af4> @ 0xf0002fd8 backing Adiv5::DebugDevice = 0000000000
  SWD: read ap c (1 words)...
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
SWD: read  ap c < 00000000
  DP: read ap 0000000c < 00000000
    AP: 0 read 0000001c < 00000000
MEM: read f0002fdc < 00000000
  REG: reading #<Adiv5::MemAP:0xa1d7af4> @ 0xf0002fdc backing Adiv5::DebugDevice = 0000000000
  REG: reading #<Peripheral::BackingProxy:0x9fea124> @ 0000000000 backing Adiv5::DebugDevice::PeripheralID::PERIPHERAL4 = 0x00000004
  REG: reading Adiv5::DebugDevice::PeripheralID::PERIPHERAL4.count_4kb = 0000000000
  AP: device size: 4096
  REG: writing Adiv5::MemAP.TAR = 0xf0000008
    AP: 0 write 00000004 = f0000008
    DP: selecting 0:0
  REG: writing #<Peripheral::CachingProxy:0xa280bf4> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0xa280bf4> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0xa280bf4> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0xa280bf4> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0xa280bf4> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  DP: write dp 00000008 = 00000000
SWD: write dp 8 = 00000000
PHYS: transfer b1 = write dp 8
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 0 and 0
  PHYS: turning out
PHYS: write_bits 48 and 0
  DP: write ap 00000004 = f0000008
SWD: write ap 4 = f0000008
PHYS: transfer 8b = write ap 4
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 00 00 00 00 30 00 10 8b 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 4026531848 and 1
  PHYS: turning out
PHYS: write_bits 48 and 128
  SWD: read ap c (1 words)...
PHYS: transfer 9f = read ap c
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 08 00 00 f0 30 80 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
SWD: read  ap c < 00000000
  DP: read ap 0000000c < 00000000
    AP: 0 read 0000000c < 00000000
MEM: read f0000008 < 00000000
  REG: reading #<Adiv5::MemAP:0xa1d7af4> @ 0xf0000008 backing Adiv5::ROMTable = 0000000000
  REG: reading #<Peripheral::BackingProxy:0xa29160c> @ 0x00000008 backing Adiv5::ROMTable::Entries = 0000000000
  REG: writing Adiv5::MemAP.TAR = 0000000000
    AP: 0 write 00000004 = 00000000
  DP: write ap 00000004 = 00000000
SWD: write ap 4 = 00000000
PHYS: transfer 8b = write ap 4
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 8b 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: write_word_and_parity 0 and 0
  PHYS: turning out
PHYS: write_bits 48 and 0
  SWD: read ap c (256 words)...
PHYS: transfer 9f = read ap c
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 13 00 00 00 00 30 00 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 40 00 20 00
  PHYS: read word: 20004000, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 15 04 00 00 00
  PHYS: read word: 00000415, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 5d 04 00 00 00
  PHYS: read word: 0000045d, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 5f 04 00 00 01
  PHYS: read word: 0000045f, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 61 04 00 00 00
  PHYS: read word: 00000461, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 63 04 00 00 01
  PHYS: read word: 00000463, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 65 04 00 00 01
  PHYS: read word: 00000465, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 67 04 00 00 00
  PHYS: read word: 00000467, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 67 04 00 00 00
  PHYS: read word: 00000467, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 67 04 00 00 00
  PHYS: read word: 00000467, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 67 04 00 00 00
  PHYS: read word: 00000467, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 67 04 00 00 00
  PHYS: read word: 00000467, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 67 04 00 00 00
  PHYS: read word: 00000467, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 67 04 00 00 00
  PHYS: read word: 00000467, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 67 04 00 00 00
  PHYS: read word: 00000467, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 67 04 00 00 00
  PHYS: read word: 00000467, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 67 04 00 00 00
  PHYS: read word: 00000467, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 67 04 00 00 00
  PHYS: read word: 00000467, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 67 04 00 00 00
  PHYS: read word: 00000467, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 67 04 00 00 00
  PHYS: read word: 00000467, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 67 04 00 00 00
  PHYS: read word: 00000467, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 67 04 00 00 00
  PHYS: read word: 00000467, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 67 04 00 00 00
  PHYS: read word: 00000467, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 67 04 00 00 00
  PHYS: read word: 00000467, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 67 04 00 00 00
  PHYS: read word: 00000467, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 67 04 00 00 00
  PHYS: read word: 00000467, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 67 04 00 00 00
  PHYS: read word: 00000467, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 67 04 00 00 00
  PHYS: read word: 00000467, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 67 04 00 00 00
  PHYS: read word: 00000467, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 67 04 00 00 00
  PHYS: read word: 00000467, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 67 04 00 00 00
  PHYS: read word: 00000467, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 67 04 00 00 00
  PHYS: read word: 00000467, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 10 b5 06 4c 01
  PHYS: read word: 4c06b510, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 23 78 00 2b 01
  PHYS: read word: 2b007823, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 07 d1 05 4b 01
  PHYS: read word: 4b05d107, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 2b 02 d0 00
  PHYS: read word: d0022b00, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 04 48 00 e0 00
  PHYS: read word: e0004804, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 bf 01 23 01
  PHYS: read word: 2301bf00, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 23 70 10 bd 01
  PHYS: read word: bd107023, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 68 20 00 20 01
  PHYS: read word: 20002068, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 88 04 00 00 01
  PHYS: read word: 00000488, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 08 b5 08 4b 01
  PHYS: read word: 4b08b508, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 2b 03 d0 01
  PHYS: read word: d0032b00, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 07 48 08 49 01
  PHYS: read word: 49084807, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 e0 00 bf 00
  PHYS: read word: bf00e000, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 07 48 03 68 00
  PHYS: read word: 68034807, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 2b 00 d1 00
  PHYS: read word: d1002b00, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 08 bd 06 4b 01
  PHYS: read word: 4b06bd08, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 2b fb d0 00
  PHYS: read word: d0fb2b00, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 98 47 f9 e7 01
  PHYS: read word: e7f94798, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 88 04 00 00 01
  PHYS: read word: 00000488, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 6c 20 00 20 00
  PHYS: read word: 2000206c, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 68 20 00 20 01
  PHYS: read word: 20002068, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 16 4b 00 2b 01
  PHYS: read word: 2b004b16, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 d1 14 4b 00
  PHYS: read word: 4b14d100, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 9d 46 40 22 01
  PHYS: read word: 2240469d, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 92 02 9a 1a 01
  PHYS: read word: 1a9a0292, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 92 46 00 21 00
  PHYS: read word: 21004692, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 8b 46 0f 46 00
  PHYS: read word: 460f468b, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 13 48 14 4a 00
  PHYS: read word: 4a144813, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 12 1a 00 f0 01
  PHYS: read word: f0001a12, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 67 f8 0f 4b 00
  PHYS: read word: 4b0ff867, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 2b 00 d0 01
  PHYS: read word: d0002b00, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 98 47 0e 4b 00
  PHYS: read word: 4b0e4798, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 2b 00 d0 01
  PHYS: read word: d0002b00, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 98 47 00 20 00
  PHYS: read word: 20004798, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 21 04 00 01
  PHYS: read word: 00042100, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 0d 00 0d 48 00
  PHYS: read word: 480d000d, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 28 02 d0 00
  PHYS: read word: d0022800, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 0c 48 00 e0 01
  PHYS: read word: e000480c, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 bf 00 f0 01
  PHYS: read word: f000bf00, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 2d f8 20 00 00
  PHYS: read word: 0020f82d, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 29 00 00 f0 01
  PHYS: read word: f0000029, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: a7 f8 00 f0 00
  PHYS: read word: f000f8a7, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 11 f8 c0 46 00
  PHYS: read word: 46c0f811, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 08 00 01
  PHYS: read word: 00080000, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 40 00 20 00
  PHYS: read word: 20004000, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 68 20 00 20 01
  PHYS: read word: 20002068, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 84 20 00 20 00
  PHYS: read word: 20002084, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 08 4b 10 b5 01
  PHYS: read word: b5104b08, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 04 1c 00 2b 00
  PHYS: read word: 2b001c04, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 02 d0 00 21 00
  PHYS: read word: 2100d002, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 e0 00 bf 00
  PHYS: read word: bf00e000, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 05 4b 18 68 01
  PHYS: read word: 68184b05, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 83 6a 00 2b 01
  PHYS: read word: 2b006a83, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 d0 98 47 00
  PHYS: read word: 4798d000, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 20 1c 00 f0 00
  PHYS: read word: f0001c20, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 33 f8 c0 46 00
  PHYS: read word: 46c0f833, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 84 04 00 00 01
  PHYS: read word: 00000484, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 0e 4b 70 b5 01
  PHYS: read word: b5704b0e, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 25 1e 1c 00
  PHYS: read word: 1c1e2500, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 0d 4c e4 1a 01
  PHYS: read word: 1ae44c0d, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: a4 10 a5 42 00
  PHYS: read word: 42a510a4, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 04 d0 ab 00 01
  PHYS: read word: 00abd004, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: f3 58 98 47 00
  PHYS: read word: 479858f3, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 01 35 f8 e7 00
  PHYS: read word: e7f83501, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 f0 42 f9 00
  PHYS: read word: f942f000, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 08 4b 00 25 00
  PHYS: read word: 25004b08, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 1e 1c 08 4c 01
  PHYS: read word: 4c081c1e, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: e4 1a a4 10 01
  PHYS: read word: 10a41ae4, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: a5 42 04 d0 00
  PHYS: read word: d00442a5, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: ab 00 f3 58 00
  PHYS: read word: 58f300ab, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 98 47 01 35 00
  PHYS: read word: 35014798, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: f8 e7 70 bd 00
  PHYS: read word: bd70e7f8, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 60 20 00 20 00
  PHYS: read word: 20002060, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 60 20 00 20 00
  PHYS: read word: 20002060, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 60 20 00 20 00
  PHYS: read word: 20002060, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 64 20 00 20 01
  PHYS: read word: 20002064, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 03 1c 82 18 01
  PHYS: read word: 18821c03, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 93 42 02 d0 00
  PHYS: read word: d0024293, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 19 70 01 33 01
  PHYS: read word: 33017019, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: fa e7 70 47 01
  PHYS: read word: 4770e7fa, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: fe e7 c0 46 00
  PHYS: read word: 46c0e7fe, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 1f 4b 1b 78 01
  PHYS: read word: 781b4b1f, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 01 2b 00 d0 00
  PHYS: read word: d0002b01, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 70 47 1e 4b 01
  PHYS: read word: 4b1e4770, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 1b 68 1b 07 00
  PHYS: read word: 071b681b, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: fa d1 f0 22 00
  PHYS: read word: 22f0d1fa, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 1c 4b 1b 68 00
  PHYS: read word: 681b4b1c, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 13 40 18 d1 00
  PHYS: read word: d1184013, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 1b 4b 1b 68 01
  PHYS: read word: 681b4b1b, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 13 42 1a d0 01
  PHYS: read word: d01a4213, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 17 4b 1b 68 01
  PHYS: read word: 681b4b17, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 1b 07 ed d1 01
  PHYS: read word: d1ed071b, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: f0 22 16 4b 01
  PHYS: read word: 4b1622f0, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 1b 68 13 40 01
  PHYS: read word: 4013681b, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 40 2b e7 d1 01
  PHYS: read word: d1e72b40, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 14 4b 1b 68 01
  PHYS: read word: 681b4b14, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 13 42 e3 d1 00
  PHYS: read word: d1e34213, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: c1 23 80 22 01
  PHYS: read word: 228023c1, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 01 21 db 00 01
  PHYS: read word: 00db2101, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: d2 05 d1 50 00
  PHYS: read word: 50d105d2, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: dc e7 10 2b 00
  PHYS: read word: 2b10e7dc, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 0f d1 0e 4b 01
  PHYS: read word: 4b0ed10f, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 1b 68 13 42 00
  PHYS: read word: 4213681b, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: e8 d1 0d 4a 00
  PHYS: read word: 4a0dd1e8, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 0d 4b 1a 60 00
  PHYS: read word: 601a4b0d, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 80 22 0d 4b 00
  PHYS: read word: 4b0d2280, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 12 02 1a 60 00
  PHYS: read word: 601a0212, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 05 4b 1b 78 00
  PHYS: read word: 781b4b05, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 01 2b d9 d0 01
  PHYS: read word: d0d92b01, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: ca e7 30 2b 00
  PHYS: read word: 2b30e7ca, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: da d1 05 4b 01
  PHYS: read word: 4b05d1da, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 1b 68 13 42 00
  PHYS: read word: 4213681b, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: d6 d1 ec e7 00
  PHYS: read word: e7ecd1d6, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: e0 0f 00 f0 01
  PHYS: read word: f0000fe0, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: e4 0f 00 f0 00
  PHYS: read word: f0000fe4, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: e8 0f 00 f0 00
  PHYS: read word: f0000fe8, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: ec 0f 00 f0 01
  PHYS: read word: f0000fec, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: df ff 07 c0 00
  PHYS: read word: c007ffdf, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 04 05 00 40 00
  PHYS: read word: 40000504, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 18 6c 00 40 01
  PHYS: read word: 40006c18, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 70 b5 e9 22 01
  PHYS: read word: 22e9b570, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: a0 24 03 23 01
  PHYS: read word: 230324a0, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 25 e4 05 01
  PHYS: read word: 05e42500, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: d2 00 a3 50 00
  PHYS: read word: 50a300d2, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 3d 4a 3e 4e 01
  PHYS: read word: 4e3e4a3d, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: a3 50 04 32 00
  PHYS: read word: 320450a3, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: a3 50 3d 4a 00
  PHYS: read word: 4a3d50a3, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: a3 50 04 32 00
  PHYS: read word: 320450a3, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: a3 50 fa 20 01
  PHYS: read word: 20fa50a3, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 80 00 00 f0 01
  PHYS: read word: f0000080, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 77 f8 a3 59 01
  PHYS: read word: 59a3f877, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 01 23 01 35 01
  PHYS: read word: 35012301, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: ed b2 2b 40 01
  PHYS: read word: 402bb2ed, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 33 d1 80 21 01
  PHYS: read word: 2180d133, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: a1 22 c9 02 00
  PHYS: read word: 02c922a1, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: d2 00 a1 50 01
  PHYS: read word: 50a100d2, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 34 4a a3 50 00
  PHYS: read word: 50a34a34, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: a3 59 02 23 00
  PHYS: read word: 230259a3, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 2b 40 33 d1 01
  PHYS: read word: d133402b, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 80 21 a1 22 00
  PHYS: read word: 22a12180, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 09 03 d2 00 00
  PHYS: read word: 00d20309, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: a1 50 2f 4a 01
  PHYS: read word: 4a2f50a1, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: a3 50 a3 59 00
  PHYS: read word: 59a350a3, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 04 23 2b 40 01
  PHYS: read word: 402b2304, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 33 d1 80 21 01
  PHYS: read word: 2180d133, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: a1 22 49 03 00
  PHYS: read word: 034922a1, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: d2 00 a1 50 01
  PHYS: read word: 50a100d2, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 29 4a a3 50 00
  PHYS: read word: 50a34a29, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: a3 59 08 23 00
  PHYS: read word: 230859a3, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 2b 40 33 d1 01
  PHYS: read word: d133402b, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 80 21 a1 22 00
  PHYS: read word: 22a12180, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 89 03 d2 00 01
  PHYS: read word: 00d20389, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: a1 50 24 4a 00
  PHYS: read word: 4a2450a1, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: a3 50 a3 59 00
  PHYS: read word: 59a350a3, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 10 23 2b 40 01
  PHYS: read word: 402b2310, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 33 d1 80 21 01
  PHYS: read word: 2180d133, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: a1 22 c9 03 01
  PHYS: read word: 03c922a1, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: d2 00 a1 50 01
  PHYS: read word: 50a100d2, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 1e 4a a3 50 01
  PHYS: read word: 50a34a1e, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: c1 e7 80 22 00
  PHYS: read word: 2280e7c1, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 1c 4b d2 02 00
  PHYS: read word: 02d24b1c, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: e2 50 00 22 00
  PHYS: read word: 220050e2, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 04 3b e2 50 00
  PHYS: read word: 50e23b04, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: a3 59 02 23 00
  PHYS: read word: 230259a3, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 2b 40 cb d0 01
  PHYS: read word: d0cb402b, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 80 22 17 4b 01
  PHYS: read word: 4b172280, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 12 03 e2 50 00
  PHYS: read word: 50e20312, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 22 04 3b 00
  PHYS: read word: 3b042200, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: e2 50 a3 59 00
  PHYS: read word: 59a350e2, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 04 23 2b 40 01
  PHYS: read word: 402b2304, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: cb d0 80 22 01
  PHYS: read word: 2280d0cb, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 11 4b 52 03 01
  PHYS: read word: 03524b11, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: e2 50 00 22 00
  PHYS: read word: 220050e2, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 04 3b e2 50 00
  PHYS: read word: 50e23b04, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: a3 59 08 23 00
  PHYS: read word: 230859a3, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 2b 40 cb d0 01
  PHYS: read word: d0cb402b, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 80 22 0c 4b 01
  PHYS: read word: 4b0c2280, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 92 03 e2 50 01
  PHYS: read word: 50e20392, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 22 04 3b 00
  PHYS: read word: 3b042200, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: e2 50 a3 59 00
  PHYS: read word: 59a350e2, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 10 23 2b 40 01
  PHYS: read word: 402b2310, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: cb d0 80 22 01
  PHYS: read word: 2280d0cb, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 06 4b d2 03 00
  PHYS: read word: 03d24b06, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: e2 50 00 22 00
  PHYS: read word: 220050e2, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 04 3b e2 50 00
  PHYS: read word: 50e23b04, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 8d e7 c0 46 01
  PHYS: read word: 46c0e78d, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 4c 07 00 00 00
  PHYS: read word: 0000074c, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 04 05 00 00 01
  PHYS: read word: 00000504, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 54 07 00 00 00
  PHYS: read word: 00000754, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 0c 05 00 00 00
  PHYS: read word: 0000050c, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 82 b0 01 90 00
  PHYS: read word: 9001b082, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 01 9b 00 2b 00
  PHYS: read word: 2b009b01, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 14 d0 01 9b 01
  PHYS: read word: 9b01d014, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 0a 48 01 3b 00
  PHYS: read word: 3b01480a, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 01 93 01 38 01
  PHYS: read word: 38019301, parity 1
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: c0 46 c0 46 00
  PHYS: read word: 46c046c0, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: c0 46 c0 46 00
  PHYS: read word: 46c046c0, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: c0 46 c0 46 00
  PHYS: read word: 46c046c0, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: c0 46 c0 46 00
  PHYS: read word: 46c046c0, parity 0
PHYS: transfer 9f = read ap c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
PHYS: transfer bd = read dp c
  PHYS: turning out
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
PHYS: sending read bit cmd in write_cmd
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read byte: 1
  PHYS: read byte: 0
  PHYS: read byte: 0
  PHYS: read ack: 1
PHYS: read_word_and_parity
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: c0 46 c0 46 00
  PHYS: read word: 46c046c0, parity 0
SWD: read  ap c < 20004000 00000415 0000045d 0000045f 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000461 00000000 00000000 00000463 00000465 00000467 00000467 00000467 00000467 00000467 00000000 00000467 00000467 00000467 00000467 00000467 00000467 00000467 00000467 00000467 00000467 00000467 00000467 00000467 00000467 00000467 00000467 00000467 00000467 00000467 00000467 00000000 00000000 00000000 00000000 00000000 00000000 4c06b510 2b007823 4b05d107 d0022b00 e0004804 2301bf00 bd107023 20002068 00000000 00000488 4b08b508 d0032b00 49084807 bf00e000 68034807 d1002b00 4b06bd08 d0fb2b00 e7f94798 00000000 00000488 2000206c 20002068 00000000 2b004b16 4b14d100 2240469d 1a9a0292 21004692 460f468b 4a144813 f0001a12 4b0ff867 d0002b00 4b0e4798 d0002b00 20004798 00042100 480d000d d0022800 e000480c f000bf00 0020f82d f0000029 f000f8a7 46c0f811 00080000 20004000 00000000 00000000 20002068 20002084 00000000 00000000 b5104b08 2b001c04 2100d002 bf00e000 68184b05 2b006a83 4798d000 f0001c20 46c0f833 00000000 00000484 b5704b0e 1c1e2500 1ae44c0d 42a510a4 00abd004 479858f3 e7f83501 f942f000 25004b08 4c081c1e 10a41ae4 d00442a5 58f300ab 35014798 bd70e7f8 20002060 20002060 20002060 20002064 18821c03 d0024293 33017019 4770e7fa 46c0e7fe 781b4b1f d0002b01 4b1e4770 071b681b 22f0d1fa 681b4b1c d1184013 681b4b1b d01a4213 681b4b17 d1ed071b 4b1622f0 4013681b d1e72b40 681b4b14 d1e34213 228023c1 00db2101 50d105d2 2b10e7dc 4b0ed10f 4213681b 4a0dd1e8 601a4b0d 4b0d2280 601a0212 781b4b05 d0d92b01 2b30e7ca 4b05d1da 4213681b e7ecd1d6 f0000fe0 f0000fe4 f0000fe8 f0000fec c007ffdf 40000504 40006c18 22e9b570 230324a0 05e42500 50a300d2 4e3e4a3d 320450a3 4a3d50a3 320450a3 20fa50a3 f0000080 59a3f877 35012301 402bb2ed 2180d133 02c922a1 50a100d2 50a34a34 230259a3 d133402b 22a12180 00d20309 4a2f50a1 59a350a3 402b2304 2180d133 034922a1 50a100d2 50a34a29 230859a3 d133402b 22a12180 00d20389 4a2450a1 59a350a3 402b2310 2180d133 03c922a1 50a100d2 50a34a1e 2280e7c1 02d24b1c 220050e2 50e23b04 230259a3 d0cb402b 4b172280 50e20312 3b042200 59a350e2 402b2304 2280d0cb 03524b11 220050e2 50e23b04 230859a3 d0cb402b 4b0c2280 50e20392 3b042200 59a350e2 402b2310 2280d0cb 03d24b06 220050e2 50e23b04 46c0e78d 0000074c 00000504 00000754 0000050c 9001b082 2b009b01 9b01d014 3b01480a 38019301 46c046c0 46c046c0 46c046c0 46c046c0 46c046c0
  DP: read ap 0000000c < 20004000, 00000415, 0000045d, 0000045f, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000461, 00000000, 00000000, 00000463, 00000465, 00000467, 00000467, 00000467, 00000467, 00000467, 00000000, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 4c06b510, 2b007823, 4b05d107, d0022b00, e0004804, 2301bf00, bd107023, 20002068, 00000000, 00000488, 4b08b508, d0032b00, 49084807, bf00e000, 68034807, d1002b00, 4b06bd08, d0fb2b00, e7f94798, 00000000, 00000488, 2000206c, 20002068, 00000000, 2b004b16, 4b14d100, 2240469d, 1a9a0292, 21004692, 460f468b, 4a144813, f0001a12, 4b0ff867, d0002b00, 4b0e4798, d0002b00, 20004798, 00042100, 480d000d, d0022800, e000480c, f000bf00, 0020f82d, f0000029, f000f8a7, 46c0f811, 00080000, 20004000, 00000000, 00000000, 20002068, 20002084, 00000000, 00000000, b5104b08, 2b001c04, 2100d002, bf00e000, 68184b05, 2b006a83, 4798d000, f0001c20, 46c0f833, 00000000, 00000484, b5704b0e, 1c1e2500, 1ae44c0d, 42a510a4, 00abd004, 479858f3, e7f83501, f942f000, 25004b08, 4c081c1e, 10a41ae4, d00442a5, 58f300ab, 35014798, bd70e7f8, 20002060, 20002060, 20002060, 20002064, 18821c03, d0024293, 33017019, 4770e7fa, 46c0e7fe, 781b4b1f, d0002b01, 4b1e4770, 071b681b, 22f0d1fa, 681b4b1c, d1184013, 681b4b1b, d01a4213, 681b4b17, d1ed071b, 4b1622f0, 4013681b, d1e72b40, 681b4b14, d1e34213, 228023c1, 00db2101, 50d105d2, 2b10e7dc, 4b0ed10f, 4213681b, 4a0dd1e8, 601a4b0d, 4b0d2280, 601a0212, 781b4b05, d0d92b01, 2b30e7ca, 4b05d1da, 4213681b, e7ecd1d6, f0000fe0, f0000fe4, f0000fe8, f0000fec, c007ffdf, 40000504, 40006c18, 22e9b570, 230324a0, 05e42500, 50a300d2, 4e3e4a3d, 320450a3, 4a3d50a3, 320450a3, 20fa50a3, f0000080, 59a3f877, 35012301, 402bb2ed, 2180d133, 02c922a1, 50a100d2, 50a34a34, 230259a3, d133402b, 22a12180, 00d20309, 4a2f50a1, 59a350a3, 402b2304, 2180d133, 034922a1, 50a100d2, 50a34a29, 230859a3, d133402b, 22a12180, 00d20389, 4a2450a1, 59a350a3, 402b2310, 2180d133, 03c922a1, 50a100d2, 50a34a1e, 2280e7c1, 02d24b1c, 220050e2, 50e23b04, 230259a3, d0cb402b, 4b172280, 50e20312, 3b042200, 59a350e2, 402b2304, 2280d0cb, 03524b11, 220050e2, 50e23b04, 230859a3, d0cb402b, 4b0c2280, 50e20392, 3b042200, 59a350e2, 402b2310, 2280d0cb, 03d24b06, 220050e2, 50e23b04, 46c0e78d, 0000074c, 00000504, 00000754, 0000050c, 9001b082, 2b009b01, 9b01d014, 3b01480a, 38019301, 46c046c0, 46c046c0, 46c046c0, 46c046c0, 46c046c0
    AP: 0 read 0000000c < 20004000, 00000415, 0000045d, 0000045f, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000461, 00000000, 00000000, 00000463, 00000465, 00000467, 00000467, 00000467, 00000467, 00000467, 00000000, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 4c06b510, 2b007823, 4b05d107, d0022b00, e0004804, 2301bf00, bd107023, 20002068, 00000000, 00000488, 4b08b508, d0032b00, 49084807, bf00e000, 68034807, d1002b00, 4b06bd08, d0fb2b00, e7f94798, 00000000, 00000488, 2000206c, 20002068, 00000000, 2b004b16, 4b14d100, 2240469d, 1a9a0292, 21004692, 460f468b, 4a144813, f0001a12, 4b0ff867, d0002b00, 4b0e4798, d0002b00, 20004798, 00042100, 480d000d, d0022800, e000480c, f000bf00, 0020f82d, f0000029, f000f8a7, 46c0f811, 00080000, 20004000, 00000000, 00000000, 20002068, 20002084, 00000000, 00000000, b5104b08, 2b001c04, 2100d002, bf00e000, 68184b05, 2b006a83, 4798d000, f0001c20, 46c0f833, 00000000, 00000484, b5704b0e, 1c1e2500, 1ae44c0d, 42a510a4, 00abd004, 479858f3, e7f83501, f942f000, 25004b08, 4c081c1e, 10a41ae4, d00442a5, 58f300ab, 35014798, bd70e7f8, 20002060, 20002060, 20002060, 20002064, 18821c03, d0024293, 33017019, 4770e7fa, 46c0e7fe, 781b4b1f, d0002b01, 4b1e4770, 071b681b, 22f0d1fa, 681b4b1c, d1184013, 681b4b1b, d01a4213, 681b4b17, d1ed071b, 4b1622f0, 4013681b, d1e72b40, 681b4b14, d1e34213, 228023c1, 00db2101, 50d105d2, 2b10e7dc, 4b0ed10f, 4213681b, 4a0dd1e8, 601a4b0d, 4b0d2280, 601a0212, 781b4b05, d0d92b01, 2b30e7ca, 4b05d1da, 4213681b, e7ecd1d6, f0000fe0, f0000fe4, f0000fe8, f0000fec, c007ffdf, 40000504, 40006c18, 22e9b570, 230324a0, 05e42500, 50a300d2, 4e3e4a3d, 320450a3, 4a3d50a3, 320450a3, 20fa50a3, f0000080, 59a3f877, 35012301, 402bb2ed, 2180d133, 02c922a1, 50a100d2, 50a34a34, 230259a3, d133402b, 22a12180, 00d20309, 4a2f50a1, 59a350a3, 402b2304, 2180d133, 034922a1, 50a100d2, 50a34a29, 230859a3, d133402b, 22a12180, 00d20389, 4a2450a1, 59a350a3, 402b2310, 2180d133, 03c922a1, 50a100d2, 50a34a1e, 2280e7c1, 02d24b1c, 220050e2, 50e23b04, 230259a3, d0cb402b, 4b172280, 50e20312, 3b042200, 59a350e2, 402b2304, 2280d0cb, 03524b11, 220050e2, 50e23b04, 230859a3, d0cb402b, 4b0c2280, 50e20392, 3b042200, 59a350e2, 402b2310, 2280d0cb, 03d24b06, 220050e2, 50e23b04, 46c0e78d, 0000074c, 00000504, 00000754, 0000050c, 9001b082, 2b009b01, 9b01d014, 3b01480a, 38019301, 46c046c0, 46c046c0, 46c046c0, 46c046c0, 46c046c0
MEM: read 00000000 < 20004000, 00000415, 0000045d, 0000045f, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000461, 00000000, 00000000, 00000463, 00000465, 00000467, 00000467, 00000467, 00000467, 00000467, 00000000, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 4c06b510, 2b007823, 4b05d107, d0022b00, e0004804, 2301bf00, bd107023, 20002068, 00000000, 00000488, 4b08b508, d0032b00, 49084807, bf00e000, 68034807, d1002b00, 4b06bd08, d0fb2b00, e7f94798, 00000000, 00000488, 2000206c, 20002068, 00000000, 2b004b16, 4b14d100, 2240469d, 1a9a0292, 21004692, 460f468b, 4a144813, f0001a12, 4b0ff867, d0002b00, 4b0e4798, d0002b00, 20004798, 00042100, 480d000d, d0022800, e000480c, f000bf00, 0020f82d, f0000029, f000f8a7, 46c0f811, 00080000, 20004000, 00000000, 00000000, 20002068, 20002084, 00000000, 00000000, b5104b08, 2b001c04, 2100d002, bf00e000, 68184b05, 2b006a83, 4798d000, f0001c20, 46c0f833, 00000000, 00000484, b5704b0e, 1c1e2500, 1ae44c0d, 42a510a4, 00abd004, 479858f3, e7f83501, f942f000, 25004b08, 4c081c1e, 10a41ae4, d00442a5, 58f300ab, 35014798, bd70e7f8, 20002060, 20002060, 20002060, 20002064, 18821c03, d0024293, 33017019, 4770e7fa, 46c0e7fe, 781b4b1f, d0002b01, 4b1e4770, 071b681b, 22f0d1fa, 681b4b1c, d1184013, 681b4b1b, d01a4213, 681b4b17, d1ed071b, 4b1622f0, 4013681b, d1e72b40, 681b4b14, d1e34213, 228023c1, 00db2101, 50d105d2, 2b10e7dc, 4b0ed10f, 4213681b, 4a0dd1e8, 601a4b0d, 4b0d2280, 601a0212, 781b4b05, d0d92b01, 2b30e7ca, 4b05d1da, 4213681b, e7ecd1d6, f0000fe0, f0000fe4, f0000fe8, f0000fec, c007ffdf, 40000504, 40006c18, 22e9b570, 230324a0, 05e42500, 50a300d2, 4e3e4a3d, 320450a3, 4a3d50a3, 320450a3, 20fa50a3, f0000080, 59a3f877, 35012301, 402bb2ed, 2180d133, 02c922a1, 50a100d2, 50a34a34, 230259a3, d133402b, 22a12180, 00d20309, 4a2f50a1, 59a350a3, 402b2304, 2180d133, 034922a1, 50a100d2, 50a34a29, 230859a3, d133402b, 22a12180, 00d20389, 4a2450a1, 59a350a3, 402b2310, 2180d133, 03c922a1, 50a100d2, 50a34a1e, 2280e7c1, 02d24b1c, 220050e2, 50e23b04, 230259a3, d0cb402b, 4b172280, 50e20312, 3b042200, 59a350e2, 402b2304, 2280d0cb, 03524b11, 220050e2, 50e23b04, 230859a3, d0cb402b, 4b0c2280, 50e20392, 3b042200, 59a350e2, 402b2310, 2280d0cb, 03d24b06, 220050e2, 50e23b04, 46c0e78d, 0000074c, 00000504, 00000754, 0000050c, 9001b082, 2b009b01, 9b01d014, 3b01480a, 38019301, 46c046c0, 46c046c0, 46c046c0, 46c046c0, 46c046c0
20004000, 00000415, 0000045d, 0000045f, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000461, 00000000, 00000000, 00000463, 00000465, 00000467, 00000467, 00000467, 00000467, 00000467, 00000000, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 4c06b510, 2b007823, 4b05d107, d0022b00, e0004804, 2301bf00, bd107023, 20002068, 00000000, 00000488, 4b08b508, d0032b00, 49084807, bf00e000, 68034807, d1002b00, 4b06bd08, d0fb2b00, e7f94798, 00000000, 00000488, 2000206c, 20002068, 00000000, 2b004b16, 4b14d100, 2240469d, 1a9a0292, 21004692, 460f468b, 4a144813, f0001a12, 4b0ff867, d0002b00, 4b0e4798, d0002b00, 20004798, 00042100, 480d000d, d0022800, e000480c, f000bf00, 0020f82d, f0000029, f000f8a7, 46c0f811, 00080000, 20004000, 00000000, 00000000, 20002068, 20002084, 00000000, 00000000, b5104b08, 2b001c04, 2100d002, bf00e000, 68184b05, 2b006a83, 4798d000, f0001c20, 46c0f833, 00000000, 00000484, b5704b0e, 1c1e2500, 1ae44c0d, 42a510a4, 00abd004, 479858f3, e7f83501, f942f000, 25004b08, 4c081c1e, 10a41ae4, d00442a5, 58f300ab, 35014798, bd70e7f8, 20002060, 20002060, 20002060, 20002064, 18821c03, d0024293, 33017019, 4770e7fa, 46c0e7fe, 781b4b1f, d0002b01, 4b1e4770, 071b681b, 22f0d1fa, 681b4b1c, d1184013, 681b4b1b, d01a4213, 681b4b17, d1ed071b, 4b1622f0, 4013681b, d1e72b40, 681b4b14, d1e34213, 228023c1, 00db2101, 50d105d2, 2b10e7dc, 4b0ed10f, 4213681b, 4a0dd1e8, 601a4b0d, 4b0d2280, 601a0212, 781b4b05, d0d92b01, 2b30e7ca, 4b05d1da, 4213681b, e7ecd1d6, f0000fe0, f0000fe4, f0000fe8, f0000fec, c007ffdf, 40000504, 40006c18, 22e9b570, 230324a0, 05e42500, 50a300d2, 4e3e4a3d, 320450a3, 4a3d50a3, 320450a3, 20fa50a3, f0000080, 59a3f877, 35012301, 402bb2ed, 2180d133, 02c922a1, 50a100d2, 50a34a34, 230259a3, d133402b, 22a12180, 00d20309, 4a2f50a1, 59a350a3, 402b2304, 2180d133, 034922a1, 50a100d2, 50a34a29, 230859a3, d133402b, 22a12180, 00d20389, 4a2450a1, 59a350a3, 402b2310, 2180d133, 03c922a1, 50a100d2, 50a34a1e, 2280e7c1, 02d24b1c, 220050e2, 50e23b04, 230259a3, d0cb402b, 4b172280, 50e20312, 3b042200, 59a350e2, 402b2304, 2280d0cb, 03524b11, 220050e2, 50e23b04, 230859a3, d0cb402b, 4b0c2280, 50e20392, 3b042200, 59a350e2, 402b2310, 2280d0cb, 03d24b06, 220050e2, 50e23b04, 46c0e78d, 0000074c, 00000504, 00000754, 0000050c, 9001b082, 2b009b01, 9b01d014, 3b01480a, 38019301, 46c046c0, 46c046c0, 46c046c0, 46c046c0, 46c046c0
herman@touring:/arm/opt/nordic/programmer$ exit
exit

Script done on Sat 13 Aug 2016 06:17:14 PM CDT
