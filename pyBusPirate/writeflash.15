Script started on Mon 29 Aug 2016 03:52:37 PM CDT
herman@touring:/arm/opt/nordic/mchck/programmer$ DEBUG=15 ruby flash.rb name- =d buspirate:dev=/dev/ttyUSB0 /tmp/nrf51422_xxaa.bin 0x0
Attaching debugger...
PHYS: initializing bus pirate
  PHYS: setting binary mode
  PHYS: waiting for BBIO1
    PHYS: data: BBIO1
  PHYS: setting raw mode
  PHYS: waiting for RAW1
    PHYS: data: BBIO1RAW1
  PHYS: configuring lines
  PHYS: flush 8a 63 48
PHYS: swd raw 56: 11111111111111111111111111111111111111111111111111111111
PHYS: swd raw 16: 1001111011100111
PHYS: swd raw 56: 11111111111111111111111111111111111111111111111111111111
PHYS: swd raw 8: 00000000
  PHYS: flush 16 ff ff ff ff ff ff ff 11 9e e7 16 ff ff ff ff ff ff ff 10 00
PHYS: transact 10100101
  PHYS: flush 10 a5 07 07 07
        PHYS: expecting 29 = 26 ack + 3 data bytes
      PHYS: skipping 26 acks: 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 77 14 b1 0b 01
  PHYS: read word: 0bb11477, parity 1
SWD: write dp 0 = 0000001e
  SWD: SWD transaction dp out 0, try 1
PHYS: transact 10000001
  PHYS: turning out
  PHYS: flush 21 10 81 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
SWD: write dp 8 = 00000000
  SWD: SWD transaction dp out 8, try 1
PHYS: transact 10110001
  PHYS: flush 21 13 1e 00 00 00 30 00 10 b1 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  PHYS: flush 21 13 00 00 00 00 30 00
  REG: writing #<Peripheral::CachingProxy:0x9ccffc0> @ 0x00000004 backing Adiv5::DP::CTRLSTAT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9ccffc0> @ 0x00000004 backing Adiv5::DP::CTRLSTAT = 0000000000
  REG: writing Adiv5::DP::CTRLSTAT.CDBGPWRUPREQ = 0x00000001
  REG: writing #<Peripheral::CachingProxy:0x9ccffc0> @ 0x00000004 backing Adiv5::DP::CTRLSTAT = 0x10000000
  REG: reading #<Peripheral::CachingProxy:0x9ccffc0> @ 0x00000004 backing Adiv5::DP::CTRLSTAT = 0x10000000
  REG: writing Adiv5::DP::CTRLSTAT.CSYSPWRUPREQ = 0x00000001
  REG: writing #<Peripheral::CachingProxy:0x9ccffc0> @ 0x00000004 backing Adiv5::DP::CTRLSTAT = 0x50000000
  DP: write dp 00000004 = 50000000
SWD: write dp 4 = 50000000
  SWD: SWD transaction dp out 4, try 1
PHYS: transact 10101001
  PHYS: flush 10 a9 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  dp 4 (1 words)...
  SWD: SWD transaction dp in 4, try 1
PHYS: transact 10001101
  PHYS: flush 21 13 00 00 00 50 30 00 10 8d 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 f0 00
  PHYS: read word: f0000000, parity 0
SWD: read  dp 4 < f0000000
  DP: read dp 00000004 < f0000000
  REG: reading #<Peripheral::BackingProxy:0x9aa73c4> @ 0x00000004 backing Adiv5::DP::CTRLSTAT = 0xf0000000
  REG: reading #<Peripheral::CachingProxy:0x9b91b2c> @ 0x00000004 backing Adiv5::DP::CTRLSTAT = 0xf0000000
  REG: reading Adiv5::DP::CTRLSTAT.CDBGPWRUPACK = 0x00000001
  REG: reading #<Peripheral::CachingProxy:0x9b91b2c> @ 0x00000004 backing Adiv5::DP::CTRLSTAT = 0xf0000000
  REG: reading Adiv5::DP::CTRLSTAT.CSYSPWRUPACK = 0x00000001
AP: all systems up
DEVICE: detecting device
    DP: selecting 0:f
  REG: writing #<Peripheral::CachingProxy:0x9b91028> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9b91028> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9b91028> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9b91028> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0x0000000f
  REG: writing #<Peripheral::CachingProxy:0x9b91028> @ 0x00000008 backing Adiv5::DP::SELECT = 0x000000f0
  DP: write dp 00000008 = 000000f0
SWD: write dp 8 = 000000f0
  SWD: SWD transaction dp out 8, try 1
PHYS: transact 10110001
  PHYS: turning out
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap c (1 words)...
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: flush 21 13 f0 00 00 00 30 00 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 21 00 77 04 01
  PHYS: read word: 04770021, parity 1
SWD: read  ap c < 04770021
  DP: read ap 0000000c < 04770021
    AP: 0 read 000000fc < 04770021
  REG: reading #<Peripheral::BackingProxy:0x9b9126c> @ 0x000000fc backing Adiv5::AP::IDR = 0x04770021
  SWD: read  ap c (1 words)...
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: turning out
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 21 00 77 04 01
  PHYS: read word: 04770021, parity 1
SWD: read  ap c < 04770021
  DP: read ap 0000000c < 04770021
    AP: 0 read 000000fc < 04770021
  REG: reading #<Peripheral::BackingProxy:0x9a9d950> @ 0x000000fc backing Adiv5::AP::IDR = 0x04770021
  REG: reading Adiv5::AP::IDR.mem? = 0x00000001
AP: initializing memap 0
    DP: selecting 0:0
  REG: writing #<Peripheral::CachingProxy:0x9ba71ac> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9ba71ac> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9ba71ac> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9ba71ac> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9ba71ac> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  DP: write dp 00000008 = 00000000
SWD: write dp 8 = 00000000
  SWD: SWD transaction dp out 8, try 1
PHYS: transact 10110001
  PHYS: turning out
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap 0 (1 words)...
  SWD: SWD transaction ap in 0, try 1
PHYS: transact 10000111
  PHYS: flush 21 13 00 00 00 00 30 00 10 87 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 40 00 00 03 01
  PHYS: read word: 03000040, parity 1
SWD: read  ap 0 < 03000040
  DP: read ap 00000000 < 03000040
    AP: 0 read 00000000 < 03000040
  REG: reading #<Peripheral::CachingProxy:0x9ba73f0> @ 0000000000 backing Adiv5::MemAP::CSW = 0x03000040
  REG: writing Adiv5::MemAP::CSW.Size = 0x00000002
  REG: writing #<Peripheral::CachingProxy:0x9ba73f0> @ 0000000000 backing Adiv5::MemAP::CSW = 0x03000042
  REG: reading #<Peripheral::CachingProxy:0x9ba73f0> @ 0000000000 backing Adiv5::MemAP::CSW = 0x03000042
  REG: writing Adiv5::MemAP::CSW.AddrInc = 0x00000001
  REG: writing #<Peripheral::CachingProxy:0x9ba73f0> @ 0000000000 backing Adiv5::MemAP::CSW = 0x03000052
  REG: reading #<Peripheral::CachingProxy:0x9ba73f0> @ 0000000000 backing Adiv5::MemAP::CSW = 0x03000052
  REG: writing Adiv5::MemAP::CSW.Mode = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9ba73f0> @ 0000000000 backing Adiv5::MemAP::CSW = 0x03000052
    AP: 0 write 00000000 = 03000052
  DP: write ap 00000000 = 03000052
SWD: write ap 0 = 03000052
  SWD: SWD transaction ap out 0, try 1
PHYS: transact 10100011
  PHYS: turning out
  PHYS: flush 21 10 a3 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
    DP: selecting 0:f
  REG: writing #<Peripheral::CachingProxy:0x9cdcfb8> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9cdcfb8> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9cdcfb8> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9cdcfb8> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0x0000000f
  REG: writing #<Peripheral::CachingProxy:0x9cdcfb8> @ 0x00000008 backing Adiv5::DP::SELECT = 0x000000f0
  DP: write dp 00000008 = 000000f0
SWD: write dp 8 = 000000f0
  SWD: SWD transaction dp out 8, try 1
PHYS: transact 10110001
  PHYS: flush 21 13 52 00 00 03 30 80 10 b1 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap 4 (1 words)...
  SWD: SWD transaction ap in 4, try 1
PHYS: transact 10101111
  PHYS: flush 21 13 f0 00 00 00 30 00 10 af 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
SWD: read  ap 4 < 00000000
  DP: read ap 00000004 < 00000000
    AP: 0 read 000000f4 < 00000000
  REG: reading #<Peripheral::BackingProxy:0x9cdd1e8> @ 0x000000f4 backing Adiv5::MemAP::CFG = 0000000000
  REG: reading Adiv5::MemAP::CFG.endian = 0000000000
  SWD: read  ap c (1 words)...
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: turning out
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 21 00 77 04 01
  PHYS: read word: 04770021, parity 1
SWD: read  ap c < 04770021
  DP: read ap 0000000c < 04770021
    AP: 0 read 000000fc < 04770021
  REG: reading #<Peripheral::BackingProxy:0x9cf11ac> @ 0x000000fc backing Adiv5::AP::IDR = 0x04770021
NRF51: Detected nRF51.
  SWD: read  ap c (1 words)...
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: turning out
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 21 00 77 04 01
  PHYS: read word: 04770021, parity 1
SWD: read  ap c < 04770021
  DP: read ap 0000000c < 04770021
    AP: 0 read 000000fc < 04770021
  REG: reading #<Peripheral::BackingProxy:0x9cf9ec4> @ 0x000000fc backing Adiv5::AP::IDR = 0x04770021
  SWD: read  ap c (1 words)...
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: turning out
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 21 00 77 04 01
  PHYS: read word: 04770021, parity 1
SWD: read  ap c < 04770021
  DP: read ap 0000000c < 04770021
    AP: 0 read 000000fc < 04770021
  REG: reading #<Peripheral::BackingProxy:0x9e6d6c0> @ 0x000000fc backing Adiv5::AP::IDR = 0x04770021
  REG: reading Adiv5::AP::IDR.mem? = 0x00000001
AP: initializing memap 0
    DP: selecting 0:0
  REG: writing #<Peripheral::CachingProxy:0x998c110> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x998c110> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x998c110> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x998c110> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x998c110> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  DP: write dp 00000008 = 00000000
SWD: write dp 8 = 00000000
  SWD: SWD transaction dp out 8, try 1
PHYS: transact 10110001
  PHYS: turning out
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap 0 (1 words)...
  SWD: SWD transaction ap in 0, try 1
PHYS: transact 10000111
  PHYS: flush 21 13 00 00 00 00 30 00 10 87 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 52 00 00 03 01
  PHYS: read word: 03000052, parity 1
SWD: read  ap 0 < 03000052
  DP: read ap 00000000 < 03000052
    AP: 0 read 00000000 < 03000052
  REG: reading #<Peripheral::CachingProxy:0x998d1b4> @ 0000000000 backing Adiv5::MemAP::CSW = 0x03000052
  REG: writing Adiv5::MemAP::CSW.Size = 0x00000002
  REG: writing #<Peripheral::CachingProxy:0x998d1b4> @ 0000000000 backing Adiv5::MemAP::CSW = 0x03000052
  REG: reading #<Peripheral::CachingProxy:0x998d1b4> @ 0000000000 backing Adiv5::MemAP::CSW = 0x03000052
  REG: writing Adiv5::MemAP::CSW.AddrInc = 0x00000001
  REG: writing #<Peripheral::CachingProxy:0x998d1b4> @ 0000000000 backing Adiv5::MemAP::CSW = 0x03000052
  REG: reading #<Peripheral::CachingProxy:0x998d1b4> @ 0000000000 backing Adiv5::MemAP::CSW = 0x03000052
  REG: writing Adiv5::MemAP::CSW.Mode = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x998d1b4> @ 0000000000 backing Adiv5::MemAP::CSW = 0x03000052
    AP: 0 write 00000000 = 03000052
  DP: write ap 00000000 = 03000052
SWD: write ap 0 = 03000052
  SWD: SWD transaction ap out 0, try 1
PHYS: transact 10100011
  PHYS: turning out
  PHYS: flush 21 10 a3 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
    DP: selecting 0:f
  REG: writing #<Peripheral::CachingProxy:0x9e748a8> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9e748a8> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9e748a8> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9e748a8> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0x0000000f
  REG: writing #<Peripheral::CachingProxy:0x9e748a8> @ 0x00000008 backing Adiv5::DP::SELECT = 0x000000f0
  DP: write dp 00000008 = 000000f0
SWD: write dp 8 = 000000f0
  SWD: SWD transaction dp out 8, try 1
PHYS: transact 10110001
  PHYS: flush 21 13 52 00 00 03 30 80 10 b1 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap 4 (1 words)...
  SWD: SWD transaction ap in 4, try 1
PHYS: transact 10101111
  PHYS: flush 21 13 f0 00 00 00 30 00 10 af 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
SWD: read  ap 4 < 00000000
  DP: read ap 00000004 < 00000000
    AP: 0 read 000000f4 < 00000000
  REG: reading #<Peripheral::BackingProxy:0x9e74b00> @ 0x000000f4 backing Adiv5::MemAP::CFG = 0000000000
  REG: reading Adiv5::MemAP::CFG.endian = 0000000000
AP: found AP 0, #<Adiv5::AP::IDR:0x9cf9fa0>, mem: true
  SWD: read  ap c (1 words)...
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: turning out
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 21 00 77 04 01
  PHYS: read word: 04770021, parity 1
SWD: read  ap c < 04770021
  DP: read ap 0000000c < 04770021
    AP: 0 read 000000fc < 04770021
  REG: reading #<Peripheral::BackingProxy:0x9cf9d5c> @ 0x000000fc backing Adiv5::AP::IDR = 0x04770021
  SWD: read  ap c (1 words)...
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: turning out
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 21 00 77 04 01
  PHYS: read word: 04770021, parity 1
SWD: read  ap c < 04770021
  DP: read ap 0000000c < 04770021
    AP: 0 read 000000fc < 04770021
  REG: reading #<Peripheral::BackingProxy:0x9cf12d8> @ 0x000000fc backing Adiv5::AP::IDR = 0x04770021
  REG: reading Adiv5::AP::IDR.mem? = 0x00000001
AP: initializing memap 0
    DP: selecting 0:0
  REG: writing #<Peripheral::CachingProxy:0x9ce8f34> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9ce8f34> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9ce8f34> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9ce8f34> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9ce8f34> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  DP: write dp 00000008 = 00000000
SWD: write dp 8 = 00000000
  SWD: SWD transaction dp out 8, try 1
PHYS: transact 10110001
  PHYS: turning out
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap 0 (1 words)...
  SWD: SWD transaction ap in 0, try 1
PHYS: transact 10000111
  PHYS: flush 21 13 00 00 00 00 30 00 10 87 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 52 00 00 03 01
  PHYS: read word: 03000052, parity 1
SWD: read  ap 0 < 03000052
  DP: read ap 00000000 < 03000052
    AP: 0 read 00000000 < 03000052
  REG: reading #<Peripheral::CachingProxy:0x9ce91c8> @ 0000000000 backing Adiv5::MemAP::CSW = 0x03000052
  REG: writing Adiv5::MemAP::CSW.Size = 0x00000002
  REG: writing #<Peripheral::CachingProxy:0x9ce91c8> @ 0000000000 backing Adiv5::MemAP::CSW = 0x03000052
  REG: reading #<Peripheral::CachingProxy:0x9ce91c8> @ 0000000000 backing Adiv5::MemAP::CSW = 0x03000052
  REG: writing Adiv5::MemAP::CSW.AddrInc = 0x00000001
  REG: writing #<Peripheral::CachingProxy:0x9ce91c8> @ 0000000000 backing Adiv5::MemAP::CSW = 0x03000052
  REG: reading #<Peripheral::CachingProxy:0x9ce91c8> @ 0000000000 backing Adiv5::MemAP::CSW = 0x03000052
  REG: writing Adiv5::MemAP::CSW.Mode = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9ce91c8> @ 0000000000 backing Adiv5::MemAP::CSW = 0x03000052
    AP: 0 write 00000000 = 03000052
  DP: write ap 00000000 = 03000052
SWD: write ap 0 = 03000052
  SWD: SWD transaction ap out 0, try 1
PHYS: transact 10100011
  PHYS: turning out
  PHYS: flush 21 10 a3 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
    DP: selecting 0:f
  REG: writing #<Peripheral::CachingProxy:0x9cd5880> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9cd5880> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9cd5880> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9cd5880> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0x0000000f
  REG: writing #<Peripheral::CachingProxy:0x9cd5880> @ 0x00000008 backing Adiv5::DP::SELECT = 0x000000f0
  DP: write dp 00000008 = 000000f0
SWD: write dp 8 = 000000f0
  SWD: SWD transaction dp out 8, try 1
PHYS: transact 10110001
  PHYS: flush 21 13 52 00 00 03 30 80 10 b1 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap 4 (1 words)...
  SWD: SWD transaction ap in 4, try 1
PHYS: transact 10101111
  PHYS: flush 21 13 f0 00 00 00 30 00 10 af 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
SWD: read  ap 4 < 00000000
  DP: read ap 00000004 < 00000000
    AP: 0 read 000000f4 < 00000000
  REG: reading #<Peripheral::BackingProxy:0x9cd5ab0> @ 0x000000f4 backing Adiv5::MemAP::CFG = 0000000000
  REG: reading Adiv5::MemAP::CFG.endian = 0000000000
  SWD: read  ap c (1 words)...
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: turning out
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 21 00 77 04 01
  PHYS: read word: 04770021, parity 1
SWD: read  ap c < 04770021
  DP: read ap 0000000c < 04770021
    AP: 0 read 000000fc < 04770021
  REG: reading #<Peripheral::BackingProxy:0x9b55ff0> @ 0x000000fc backing Adiv5::AP::IDR = 0x04770021
  REG: writing Adiv5::MemAP.TAR = 0xe000ed00
    AP: 0 write 00000004 = e000ed00
    DP: selecting 0:0
  REG: writing #<Peripheral::CachingProxy:0x9b93648> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9b93648> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9b93648> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9b93648> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9b93648> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  DP: write dp 00000008 = 00000000
SWD: write dp 8 = 00000000
  SWD: SWD transaction dp out 8, try 1
PHYS: transact 10110001
  PHYS: turning out
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  DP: write ap 00000004 = e000ed00
SWD: write ap 4 = e000ed00
  SWD: SWD transaction ap out 4, try 1
PHYS: transact 10001011
  PHYS: flush 21 13 00 00 00 00 30 00 10 8b 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap c (1 words)...
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: flush 21 13 00 ed 00 e0 30 80 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 c2 0c 41 01
  PHYS: read word: 410cc200, parity 1
SWD: read  ap c < 410cc200
  DP: read ap 0000000c < 410cc200
    AP: 0 read 0000000c < 410cc200
MEM: read e000ed00 < 410cc200
  REG: writing Adiv5::MemAP.TAR = 0x10000010
    AP: 0 write 00000004 = 10000010
  DP: write ap 00000004 = 10000010
SWD: write ap 4 = 10000010
  SWD: SWD transaction ap out 4, try 1
PHYS: transact 10001011
  PHYS: turning out
  PHYS: flush 21 10 8b 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap c (1 words)...
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: flush 21 13 10 00 00 10 30 00 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 04 00 00 01
  PHYS: read word: 00000400, parity 1
SWD: read  ap c < 00000400
  DP: read ap 0000000c < 00000400
    AP: 0 read 0000000c < 00000400
MEM: read 10000010 < 00000400
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0x10000010 backing NRF51::FICR = 0x00000400
  REG: reading NRF51::FICR.CODEPAGESIZE = 0x00000400
    DP: selecting 0:f
  REG: writing #<Peripheral::CachingProxy:0x9cc49a4> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9cc49a4> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9cc49a4> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9cc49a4> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0x0000000f
  REG: writing #<Peripheral::CachingProxy:0x9cc49a4> @ 0x00000008 backing Adiv5::DP::SELECT = 0x000000f0
  DP: write dp 00000008 = 000000f0
SWD: write dp 8 = 000000f0
  SWD: SWD transaction dp out 8, try 1
PHYS: transact 10110001
  PHYS: turning out
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap 8 (1 words)...
  SWD: SWD transaction ap in 8, try 1
PHYS: transact 10110111
  PHYS: flush 21 13 f0 00 00 00 30 00 10 b7 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 03 00 00 f0 00
  PHYS: read word: f0000003, parity 0
SWD: read  ap 8 < f0000003
  DP: read ap 00000008 < f0000003
    AP: 0 read 000000f8 < f0000003
  REG: reading #<Peripheral::BackingProxy:0x9cc4c38> @ 0x000000f8 backing Adiv5::MemAP::BASE = 0xf0000003
  REG: reading #<Peripheral::CachingProxy:0x9d29430> @ 0x000000f8 backing Adiv5::MemAP::BASE = 0xf0000003
  REG: reading #<Peripheral::CachingProxy:0x9d29430> @ 0x000000f8 backing Adiv5::MemAP::BASE = 0xf0000003
  REG: reading Adiv5::MemAP::BASE.format? = 0x00000001
  REG: reading #<Peripheral::CachingProxy:0x9d29430> @ 0x000000f8 backing Adiv5::MemAP::BASE = 0xf0000003
  REG: reading Adiv5::MemAP::BASE.present? = 0x00000001
  REG: reading #<Peripheral::CachingProxy:0x9d29430> @ 0x000000f8 backing Adiv5::MemAP::BASE = 0xf0000003
  REG: reading Adiv5::MemAP::BASE.BASEADDR = 0xf0000000
AP: Adiv5::DebugDevice at f0000000
  REG: writing Adiv5::MemAP.TAR = 0xf0000ff0
    AP: 0 write 00000004 = f0000ff0
    DP: selecting 0:0
  REG: writing #<Peripheral::CachingProxy:0x9d28094> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9d28094> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9d28094> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9d28094> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9d28094> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  DP: write dp 00000008 = 00000000
SWD: write dp 8 = 00000000
  SWD: SWD transaction dp out 8, try 1
PHYS: transact 10110001
  PHYS: turning out
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  DP: write ap 00000004 = f0000ff0
SWD: write ap 4 = f0000ff0
  SWD: SWD transaction ap out 4, try 1
PHYS: transact 10001011
  PHYS: flush 21 13 00 00 00 00 30 00 10 8b 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap c (4 words)...
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: flush 21 13 f0 0f 00 f0 30 00 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: turning out
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 0d 00 00 00 01
  PHYS: read word: 0000000d, parity 1
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: turning out
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 10 00 00 00 01
  PHYS: read word: 00000010, parity 1
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: turning out
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 05 00 00 00 00
  PHYS: read word: 00000005, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: b1 00 00 00 00
  PHYS: read word: 000000b1, parity 0
SWD: read  ap c < 0000000d 00000010 00000005 000000b1
  DP: read ap 0000000c < 0000000d, 00000010, 00000005, 000000b1
    AP: 0 read 0000000c < 0000000d, 00000010, 00000005, 000000b1
MEM: read f0000ff0 < 0000000d, 00000010, 00000005, 000000b1
  AP: device component class: rom
  REG: writing Adiv5::MemAP.TAR = 0xf0000fd0
    AP: 0 write 00000004 = f0000fd0
  DP: write ap 00000004 = f0000fd0
SWD: write ap 4 = f0000fd0
  SWD: SWD transaction ap out 4, try 1
PHYS: transact 10001011
  PHYS: turning out
  PHYS: flush 21 10 8b 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap c (1 words)...
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: flush 21 13 d0 0f 00 f0 30 80 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 02 00 00 00 01
  PHYS: read word: 00000002, parity 1
SWD: read  ap c < 00000002
  DP: read ap 0000000c < 00000002
    AP: 0 read 0000000c < 00000002
MEM: read f0000fd0 < 00000002
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0xf0000fd0 backing Adiv5::DebugDevice = 0x00000002
    DP: selecting 0:1
  REG: writing #<Peripheral::CachingProxy:0x9e60fec> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9e60fec> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9e60fec> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9e60fec> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0x00000001
  REG: writing #<Peripheral::CachingProxy:0x9e60fec> @ 0x00000008 backing Adiv5::DP::SELECT = 0x00000010
  DP: write dp 00000008 = 00000010
SWD: write dp 8 = 00000010
  SWD: SWD transaction dp out 8, try 1
PHYS: transact 10110001
  PHYS: turning out
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap 4 (1 words)...
  SWD: SWD transaction ap in 4, try 1
PHYS: transact 10101111
  PHYS: flush 21 13 10 00 00 00 30 80 10 af 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
SWD: read  ap 4 < 00000000
  DP: read ap 00000004 < 00000000
    AP: 0 read 00000014 < 00000000
MEM: read f0000fd4 < 00000000
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0xf0000fd4 backing Adiv5::DebugDevice = 0000000000
  SWD: read  ap 8 (1 words)...
  SWD: SWD transaction ap in 8, try 1
PHYS: transact 10110111
  PHYS: turning out
  PHYS: flush 21 10 b7 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
SWD: read  ap 8 < 00000000
  DP: read ap 00000008 < 00000000
    AP: 0 read 00000018 < 00000000
MEM: read f0000fd8 < 00000000
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0xf0000fd8 backing Adiv5::DebugDevice = 0000000000
  SWD: read  ap c (1 words)...
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: turning out
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
SWD: read  ap c < 00000000
  DP: read ap 0000000c < 00000000
    AP: 0 read 0000001c < 00000000
MEM: read f0000fdc < 00000000
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0xf0000fdc backing Adiv5::DebugDevice = 0000000000
  REG: reading #<Peripheral::BackingProxy:0x9d1aef8> @ 0000000000 backing Adiv5::DebugDevice::PeripheralID::PERIPHERAL4 = 0x00000002
  REG: reading Adiv5::DebugDevice::PeripheralID::PERIPHERAL4.count_4kb = 0000000000
  AP: device size: 4096
AP: Adiv5::ROMTable at f0000000
  REG: writing Adiv5::MemAP.TAR = 0xf0000ff0
    AP: 0 write 00000004 = f0000ff0
    DP: selecting 0:0
  REG: writing #<Peripheral::CachingProxy:0x9ddd6d8> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9ddd6d8> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9ddd6d8> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9ddd6d8> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9ddd6d8> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  DP: write dp 00000008 = 00000000
SWD: write dp 8 = 00000000
  SWD: SWD transaction dp out 8, try 1
PHYS: transact 10110001
  PHYS: turning out
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  DP: write ap 00000004 = f0000ff0
SWD: write ap 4 = f0000ff0
  SWD: SWD transaction ap out 4, try 1
PHYS: transact 10001011
  PHYS: flush 21 13 00 00 00 00 30 00 10 8b 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap c (4 words)...
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: flush 21 13 f0 0f 00 f0 30 00 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: turning out
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 0d 00 00 00 01
  PHYS: read word: 0000000d, parity 1
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: turning out
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 10 00 00 00 01
  PHYS: read word: 00000010, parity 1
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: turning out
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 05 00 00 00 00
  PHYS: read word: 00000005, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: b1 00 00 00 00
  PHYS: read word: 000000b1, parity 0
SWD: read  ap c < 0000000d 00000010 00000005 000000b1
  DP: read ap 0000000c < 0000000d, 00000010, 00000005, 000000b1
    AP: 0 read 0000000c < 0000000d, 00000010, 00000005, 000000b1
MEM: read f0000ff0 < 0000000d, 00000010, 00000005, 000000b1
  AP: device component class: rom
  REG: writing Adiv5::MemAP.TAR = 0xf0000fd0
    AP: 0 write 00000004 = f0000fd0
  DP: write ap 00000004 = f0000fd0
SWD: write ap 4 = f0000fd0
  SWD: SWD transaction ap out 4, try 1
PHYS: transact 10001011
  PHYS: turning out
  PHYS: flush 21 10 8b 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap c (1 words)...
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: flush 21 13 d0 0f 00 f0 30 80 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 02 00 00 00 01
  PHYS: read word: 00000002, parity 1
SWD: read  ap c < 00000002
  DP: read ap 0000000c < 00000002
    AP: 0 read 0000000c < 00000002
MEM: read f0000fd0 < 00000002
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0xf0000fd0 backing Adiv5::ROMTable = 0x00000002
    DP: selecting 0:1
  REG: writing #<Peripheral::CachingProxy:0x9c57700> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9c57700> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9c57700> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9c57700> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0x00000001
  REG: writing #<Peripheral::CachingProxy:0x9c57700> @ 0x00000008 backing Adiv5::DP::SELECT = 0x00000010
  DP: write dp 00000008 = 00000010
SWD: write dp 8 = 00000010
  SWD: SWD transaction dp out 8, try 1
PHYS: transact 10110001
  PHYS: turning out
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap 4 (1 words)...
  SWD: SWD transaction ap in 4, try 1
PHYS: transact 10101111
  PHYS: flush 21 13 10 00 00 00 30 80 10 af 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
SWD: read  ap 4 < 00000000
  DP: read ap 00000004 < 00000000
    AP: 0 read 00000014 < 00000000
MEM: read f0000fd4 < 00000000
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0xf0000fd4 backing Adiv5::ROMTable = 0000000000
  SWD: read  ap 8 (1 words)...
  SWD: SWD transaction ap in 8, try 1
PHYS: transact 10110111
  PHYS: turning out
  PHYS: flush 21 10 b7 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
SWD: read  ap 8 < 00000000
  DP: read ap 00000008 < 00000000
    AP: 0 read 00000018 < 00000000
MEM: read f0000fd8 < 00000000
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0xf0000fd8 backing Adiv5::ROMTable = 0000000000
  SWD: read  ap c (1 words)...
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: turning out
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
SWD: read  ap c < 00000000
  DP: read ap 0000000c < 00000000
    AP: 0 read 0000001c < 00000000
MEM: read f0000fdc < 00000000
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0xf0000fdc backing Adiv5::ROMTable = 0000000000
  REG: reading #<Peripheral::BackingProxy:0x9d7b30c> @ 0000000000 backing Adiv5::DebugDevice::PeripheralID::PERIPHERAL4 = 0x00000002
  REG: reading Adiv5::DebugDevice::PeripheralID::PERIPHERAL4.count_4kb = 0000000000
  AP: device size: 4096
  REG: writing Adiv5::MemAP.TAR = 0xf0000fcc
    AP: 0 write 00000004 = f0000fcc
    DP: selecting 0:0
  REG: writing #<Peripheral::CachingProxy:0x9bb7d68> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9bb7d68> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9bb7d68> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9bb7d68> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9bb7d68> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  DP: write dp 00000008 = 00000000
SWD: write dp 8 = 00000000
  SWD: SWD transaction dp out 8, try 1
PHYS: transact 10110001
  PHYS: turning out
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  DP: write ap 00000004 = f0000fcc
SWD: write ap 4 = f0000fcc
  SWD: SWD transaction ap out 4, try 1
PHYS: transact 10001011
  PHYS: flush 21 13 00 00 00 00 30 00 10 8b 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap c (1 words)...
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: flush 21 13 cc 0f 00 f0 30 00 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 01 00 00 00 01
  PHYS: read word: 00000001, parity 1
SWD: read  ap c < 00000001
  DP: read ap 0000000c < 00000001
    AP: 0 read 0000000c < 00000001
MEM: read f0000fcc < 00000001
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0xf0000fcc backing Adiv5::ROMTable = 0x00000001
  REG: reading #<Peripheral::BackingProxy:0x9bb8ab0> @ 0x00000fcc backing Adiv5::ROMTable::MEMTYPE = 0x00000001
  REG: reading Adiv5::ROMTable::MEMTYPE.sysmem? = 0000000000
  REG: writing Adiv5::MemAP.TAR = 0xf0000000
    AP: 0 write 00000004 = f0000000
  DP: write ap 00000004 = f0000000
SWD: write ap 4 = f0000000
  SWD: SWD transaction ap out 4, try 1
PHYS: transact 10001011
  PHYS: turning out
  PHYS: flush 21 10 8b 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap c (1 words)...
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: flush 21 13 00 00 00 f0 30 00 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 03 f0 0f f0 00
  PHYS: read word: f00ff003, parity 0
SWD: read  ap c < f00ff003
  DP: read ap 0000000c < f00ff003
    AP: 0 read 0000000c < f00ff003
MEM: read f0000000 < f00ff003
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0xf0000000 backing Adiv5::ROMTable = 0xf00ff003
  REG: reading #<Peripheral::BackingProxy:0x9b60450> @ 0000000000 backing Adiv5::ROMTable::Entries = 0xf00ff003
  REG: reading Adiv5::ROMTable::Entries.format? = 0x00000001
    DP: selecting 0:1
  REG: writing #<Peripheral::CachingProxy:0x9a888e8> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9a888e8> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9a888e8> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9a888e8> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0x00000001
  REG: writing #<Peripheral::CachingProxy:0x9a888e8> @ 0x00000008 backing Adiv5::DP::SELECT = 0x00000010
  DP: write dp 00000008 = 00000010
SWD: write dp 8 = 00000010
  SWD: SWD transaction dp out 8, try 1
PHYS: transact 10110001
  PHYS: turning out
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap 0 (1 words)...
  SWD: SWD transaction ap in 0, try 1
PHYS: transact 10000111
  PHYS: flush 21 13 10 00 00 00 30 80 10 87 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 03 f0 0f f0 00
  PHYS: read word: f00ff003, parity 0
SWD: read  ap 0 < f00ff003
  DP: read ap 00000000 < f00ff003
    AP: 0 read 00000010 < f00ff003
MEM: read f0000000 < f00ff003
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0xf0000000 backing Adiv5::ROMTable = 0xf00ff003
  REG: reading #<Peripheral::BackingProxy:0x9a88c08> @ 0000000000 backing Adiv5::ROMTable::Entries = 0xf00ff003
  SWD: read  ap 0 (1 words)...
  SWD: SWD transaction ap in 0, try 1
PHYS: transact 10000111
  PHYS: turning out
  PHYS: flush 21 10 87 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 03 f0 0f f0 00
  PHYS: read word: f00ff003, parity 0
SWD: read  ap 0 < f00ff003
  DP: read ap 00000000 < f00ff003
    AP: 0 read 00000010 < f00ff003
MEM: read f0000000 < f00ff003
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0xf0000000 backing Adiv5::ROMTable = 0xf00ff003
  REG: reading #<Peripheral::BackingProxy:0x9a88c08> @ 0000000000 backing Adiv5::ROMTable::Entries = 0xf00ff003
  AP: rom table entry f00ff003
  SWD: read  ap 0 (1 words)...
  SWD: SWD transaction ap in 0, try 1
PHYS: transact 10000111
  PHYS: turning out
  PHYS: flush 21 10 87 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 03 f0 0f f0 00
  PHYS: read word: f00ff003, parity 0
SWD: read  ap 0 < f00ff003
  DP: read ap 00000000 < f00ff003
    AP: 0 read 00000010 < f00ff003
MEM: read f0000000 < f00ff003
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0xf0000000 backing Adiv5::ROMTable = 0xf00ff003
  REG: reading #<Peripheral::BackingProxy:0x9a88c08> @ 0000000000 backing Adiv5::ROMTable::Entries = 0xf00ff003
  REG: reading Adiv5::ROMTable::Entries.present? = 0x00000001
  SWD: read  ap 0 (1 words)...
  SWD: SWD transaction ap in 0, try 1
PHYS: transact 10000111
  PHYS: turning out
  PHYS: flush 21 10 87 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 03 f0 0f f0 00
  PHYS: read word: f00ff003, parity 0
SWD: read  ap 0 < f00ff003
  DP: read ap 00000000 < f00ff003
    AP: 0 read 00000010 < f00ff003
MEM: read f0000000 < f00ff003
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0xf0000000 backing Adiv5::ROMTable = 0xf00ff003
  REG: reading #<Peripheral::BackingProxy:0x9a88c08> @ 0000000000 backing Adiv5::ROMTable::Entries = 0xf00ff003
  REG: reading Adiv5::ROMTable::Entries.addroffs = 0xf00ff000
AP: Adiv5::DebugDevice at e00ff000
  REG: writing Adiv5::MemAP.TAR = 0xe00ffff0
    AP: 0 write 00000004 = e00ffff0
    DP: selecting 0:0
  REG: writing #<Peripheral::CachingProxy:0x9a91178> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9a91178> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9a91178> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9a91178> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9a91178> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  DP: write dp 00000008 = 00000000
SWD: write dp 8 = 00000000
  SWD: SWD transaction dp out 8, try 1
PHYS: transact 10110001
  PHYS: turning out
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  DP: write ap 00000004 = e00ffff0
SWD: write ap 4 = e00ffff0
  SWD: SWD transaction ap out 4, try 1
PHYS: transact 10001011
  PHYS: flush 21 13 00 00 00 00 30 00 10 8b 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap c (4 words)...
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: flush 21 13 f0 ff 0f e0 30 80 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: turning out
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 0d 00 00 00 01
  PHYS: read word: 0000000d, parity 1
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: turning out
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 10 00 00 00 01
  PHYS: read word: 00000010, parity 1
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: turning out
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 05 00 00 00 00
  PHYS: read word: 00000005, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: b1 00 00 00 00
  PHYS: read word: 000000b1, parity 0
SWD: read  ap c < 0000000d 00000010 00000005 000000b1
  DP: read ap 0000000c < 0000000d, 00000010, 00000005, 000000b1
    AP: 0 read 0000000c < 0000000d, 00000010, 00000005, 000000b1
MEM: read e00ffff0 < 0000000d, 00000010, 00000005, 000000b1
  AP: device component class: rom
  REG: writing Adiv5::MemAP.TAR = 0xe00fffd0
    AP: 0 write 00000004 = e00fffd0
  DP: write ap 00000004 = e00fffd0
SWD: write ap 4 = e00fffd0
  SWD: SWD transaction ap out 4, try 1
PHYS: transact 10001011
  PHYS: turning out
  PHYS: flush 21 10 8b 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap c (1 words)...
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: flush 21 13 d0 ff 0f e0 30 00 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 04 00 00 00 01
  PHYS: read word: 00000004, parity 1
SWD: read  ap c < 00000004
  DP: read ap 0000000c < 00000004
    AP: 0 read 0000000c < 00000004
MEM: read e00fffd0 < 00000004
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0xe00fffd0 backing Adiv5::DebugDevice = 0x00000004
    DP: selecting 0:1
  REG: writing #<Peripheral::CachingProxy:0x9cf1ad0> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9cf1ad0> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9cf1ad0> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9cf1ad0> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0x00000001
  REG: writing #<Peripheral::CachingProxy:0x9cf1ad0> @ 0x00000008 backing Adiv5::DP::SELECT = 0x00000010
  DP: write dp 00000008 = 00000010
SWD: write dp 8 = 00000010
  SWD: SWD transaction dp out 8, try 1
PHYS: transact 10110001
  PHYS: turning out
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap 4 (1 words)...
  SWD: SWD transaction ap in 4, try 1
PHYS: transact 10101111
  PHYS: flush 21 13 10 00 00 00 30 80 10 af 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
SWD: read  ap 4 < 00000000
  DP: read ap 00000004 < 00000000
    AP: 0 read 00000014 < 00000000
MEM: read e00fffd4 < 00000000
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0xe00fffd4 backing Adiv5::DebugDevice = 0000000000
  SWD: read  ap 8 (1 words)...
  SWD: SWD transaction ap in 8, try 1
PHYS: transact 10110111
  PHYS: turning out
  PHYS: flush 21 10 b7 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
SWD: read  ap 8 < 00000000
  DP: read ap 00000008 < 00000000
    AP: 0 read 00000018 < 00000000
MEM: read e00fffd8 < 00000000
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0xe00fffd8 backing Adiv5::DebugDevice = 0000000000
  SWD: read  ap c (1 words)...
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: turning out
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
SWD: read  ap c < 00000000
  DP: read ap 0000000c < 00000000
    AP: 0 read 0000001c < 00000000
MEM: read e00fffdc < 00000000
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0xe00fffdc backing Adiv5::DebugDevice = 0000000000
  REG: reading #<Peripheral::BackingProxy:0x9e6bd20> @ 0000000000 backing Adiv5::DebugDevice::PeripheralID::PERIPHERAL4 = 0x00000004
  REG: reading Adiv5::DebugDevice::PeripheralID::PERIPHERAL4.count_4kb = 0000000000
  AP: device size: 4096
AP: Adiv5::ROMTable at e00ff000
  REG: writing Adiv5::MemAP.TAR = 0xe00ffff0
    AP: 0 write 00000004 = e00ffff0
    DP: selecting 0:0
  REG: writing #<Peripheral::CachingProxy:0x9cd3a44> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9cd3a44> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9cd3a44> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9cd3a44> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9cd3a44> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  DP: write dp 00000008 = 00000000
SWD: write dp 8 = 00000000
  SWD: SWD transaction dp out 8, try 1
PHYS: transact 10110001
  PHYS: turning out
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  DP: write ap 00000004 = e00ffff0
SWD: write ap 4 = e00ffff0
  SWD: SWD transaction ap out 4, try 1
PHYS: transact 10001011
  PHYS: flush 21 13 00 00 00 00 30 00 10 8b 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap c (4 words)...
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: flush 21 13 f0 ff 0f e0 30 80 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: turning out
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 0d 00 00 00 01
  PHYS: read word: 0000000d, parity 1
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: turning out
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 10 00 00 00 01
  PHYS: read word: 00000010, parity 1
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: turning out
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 05 00 00 00 00
  PHYS: read word: 00000005, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: b1 00 00 00 00
  PHYS: read word: 000000b1, parity 0
SWD: read  ap c < 0000000d 00000010 00000005 000000b1
  DP: read ap 0000000c < 0000000d, 00000010, 00000005, 000000b1
    AP: 0 read 0000000c < 0000000d, 00000010, 00000005, 000000b1
MEM: read e00ffff0 < 0000000d, 00000010, 00000005, 000000b1
  AP: device component class: rom
  REG: writing Adiv5::MemAP.TAR = 0xe00fffd0
    AP: 0 write 00000004 = e00fffd0
  DP: write ap 00000004 = e00fffd0
SWD: write ap 4 = e00fffd0
  SWD: SWD transaction ap out 4, try 1
PHYS: transact 10001011
  PHYS: turning out
  PHYS: flush 21 10 8b 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap c (1 words)...
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: flush 21 13 d0 ff 0f e0 30 00 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 04 00 00 00 01
  PHYS: read word: 00000004, parity 1
SWD: read  ap c < 00000004
  DP: read ap 0000000c < 00000004
    AP: 0 read 0000000c < 00000004
MEM: read e00fffd0 < 00000004
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0xe00fffd0 backing Adiv5::ROMTable = 0x00000004
    DP: selecting 0:1
  REG: writing #<Peripheral::CachingProxy:0x9c8e5c0> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9c8e5c0> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9c8e5c0> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9c8e5c0> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0x00000001
  REG: writing #<Peripheral::CachingProxy:0x9c8e5c0> @ 0x00000008 backing Adiv5::DP::SELECT = 0x00000010
  DP: write dp 00000008 = 00000010
SWD: write dp 8 = 00000010
  SWD: SWD transaction dp out 8, try 1
PHYS: transact 10110001
  PHYS: turning out
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap 4 (1 words)...
  SWD: SWD transaction ap in 4, try 1
PHYS: transact 10101111
  PHYS: flush 21 13 10 00 00 00 30 80 10 af 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
SWD: read  ap 4 < 00000000
  DP: read ap 00000004 < 00000000
    AP: 0 read 00000014 < 00000000
MEM: read e00fffd4 < 00000000
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0xe00fffd4 backing Adiv5::ROMTable = 0000000000
  SWD: read  ap 8 (1 words)...
  SWD: SWD transaction ap in 8, try 1
PHYS: transact 10110111
  PHYS: turning out
  PHYS: flush 21 10 b7 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
SWD: read  ap 8 < 00000000
  DP: read ap 00000008 < 00000000
    AP: 0 read 00000018 < 00000000
MEM: read e00fffd8 < 00000000
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0xe00fffd8 backing Adiv5::ROMTable = 0000000000
  SWD: read  ap c (1 words)...
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: turning out
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
SWD: read  ap c < 00000000
  DP: read ap 0000000c < 00000000
    AP: 0 read 0000001c < 00000000
MEM: read e00fffdc < 00000000
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0xe00fffdc backing Adiv5::ROMTable = 0000000000
  REG: reading #<Peripheral::BackingProxy:0x9cd1bb8> @ 0000000000 backing Adiv5::DebugDevice::PeripheralID::PERIPHERAL4 = 0x00000004
  REG: reading Adiv5::DebugDevice::PeripheralID::PERIPHERAL4.count_4kb = 0000000000
  AP: device size: 4096
  REG: writing Adiv5::MemAP.TAR = 0xe00fffcc
    AP: 0 write 00000004 = e00fffcc
    DP: selecting 0:0
  REG: writing #<Peripheral::CachingProxy:0x9d22d24> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9d22d24> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9d22d24> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9d22d24> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9d22d24> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  DP: write dp 00000008 = 00000000
SWD: write dp 8 = 00000000
  SWD: SWD transaction dp out 8, try 1
PHYS: transact 10110001
  PHYS: turning out
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  DP: write ap 00000004 = e00fffcc
SWD: write ap 4 = e00fffcc
  SWD: SWD transaction ap out 4, try 1
PHYS: transact 10001011
  PHYS: flush 21 13 00 00 00 00 30 00 10 8b 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap c (1 words)...
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: flush 21 13 cc ff 0f e0 30 80 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 01 00 00 00 01
  PHYS: read word: 00000001, parity 1
SWD: read  ap c < 00000001
  DP: read ap 0000000c < 00000001
    AP: 0 read 0000000c < 00000001
MEM: read e00fffcc < 00000001
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0xe00fffcc backing Adiv5::ROMTable = 0x00000001
  REG: reading #<Peripheral::BackingProxy:0x9d234a4> @ 0x00000fcc backing Adiv5::ROMTable::MEMTYPE = 0x00000001
  REG: reading Adiv5::ROMTable::MEMTYPE.sysmem? = 0000000000
  REG: writing Adiv5::MemAP.TAR = 0xe00ff000
    AP: 0 write 00000004 = e00ff000
  DP: write ap 00000004 = e00ff000
SWD: write ap 4 = e00ff000
  SWD: SWD transaction ap out 4, try 1
PHYS: transact 10001011
  PHYS: turning out
  PHYS: flush 21 10 8b 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap c (1 words)...
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: flush 21 13 00 f0 0f e0 30 80 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 03 f0 f0 ff 00
  PHYS: read word: fff0f003, parity 0
SWD: read  ap c < fff0f003
  DP: read ap 0000000c < fff0f003
    AP: 0 read 0000000c < fff0f003
MEM: read e00ff000 < fff0f003
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0xe00ff000 backing Adiv5::ROMTable = 0xfff0f003
  REG: reading #<Peripheral::BackingProxy:0x9c142c0> @ 0000000000 backing Adiv5::ROMTable::Entries = 0xfff0f003
  REG: reading Adiv5::ROMTable::Entries.format? = 0x00000001
    DP: selecting 0:1
  REG: writing #<Peripheral::CachingProxy:0x9c911f8> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9c911f8> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9c911f8> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9c911f8> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0x00000001
  REG: writing #<Peripheral::CachingProxy:0x9c911f8> @ 0x00000008 backing Adiv5::DP::SELECT = 0x00000010
  DP: write dp 00000008 = 00000010
SWD: write dp 8 = 00000010
  SWD: SWD transaction dp out 8, try 1
PHYS: transact 10110001
  PHYS: turning out
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap 0 (1 words)...
  SWD: SWD transaction ap in 0, try 1
PHYS: transact 10000111
  PHYS: flush 21 13 10 00 00 00 30 80 10 87 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 03 f0 f0 ff 00
  PHYS: read word: fff0f003, parity 0
SWD: read  ap 0 < fff0f003
  DP: read ap 00000000 < fff0f003
    AP: 0 read 00000010 < fff0f003
MEM: read e00ff000 < fff0f003
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0xe00ff000 backing Adiv5::ROMTable = 0xfff0f003
  REG: reading #<Peripheral::BackingProxy:0x9c8e034> @ 0000000000 backing Adiv5::ROMTable::Entries = 0xfff0f003
  SWD: read  ap 0 (1 words)...
  SWD: SWD transaction ap in 0, try 1
PHYS: transact 10000111
  PHYS: turning out
  PHYS: flush 21 10 87 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 03 f0 f0 ff 00
  PHYS: read word: fff0f003, parity 0
SWD: read  ap 0 < fff0f003
  DP: read ap 00000000 < fff0f003
    AP: 0 read 00000010 < fff0f003
MEM: read e00ff000 < fff0f003
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0xe00ff000 backing Adiv5::ROMTable = 0xfff0f003
  REG: reading #<Peripheral::BackingProxy:0x9c8e034> @ 0000000000 backing Adiv5::ROMTable::Entries = 0xfff0f003
  AP: rom table entry fff0f003
  SWD: read  ap 0 (1 words)...
  SWD: SWD transaction ap in 0, try 1
PHYS: transact 10000111
  PHYS: turning out
  PHYS: flush 21 10 87 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 03 f0 f0 ff 00
  PHYS: read word: fff0f003, parity 0
SWD: read  ap 0 < fff0f003
  DP: read ap 00000000 < fff0f003
    AP: 0 read 00000010 < fff0f003
MEM: read e00ff000 < fff0f003
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0xe00ff000 backing Adiv5::ROMTable = 0xfff0f003
  REG: reading #<Peripheral::BackingProxy:0x9c8e034> @ 0000000000 backing Adiv5::ROMTable::Entries = 0xfff0f003
  REG: reading Adiv5::ROMTable::Entries.present? = 0x00000001
  SWD: read  ap 0 (1 words)...
  SWD: SWD transaction ap in 0, try 1
PHYS: transact 10000111
  PHYS: turning out
  PHYS: flush 21 10 87 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 03 f0 f0 ff 00
  PHYS: read word: fff0f003, parity 0
SWD: read  ap 0 < fff0f003
  DP: read ap 00000000 < fff0f003
    AP: 0 read 00000010 < fff0f003
MEM: read e00ff000 < fff0f003
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0xe00ff000 backing Adiv5::ROMTable = 0xfff0f003
  REG: reading #<Peripheral::BackingProxy:0x9c8e034> @ 0000000000 backing Adiv5::ROMTable::Entries = 0xfff0f003
  REG: reading Adiv5::ROMTable::Entries.addroffs = 0xfff0f000
AP: Adiv5::DebugDevice at e000e000
  REG: writing Adiv5::MemAP.TAR = 0xe000eff0
    AP: 0 write 00000004 = e000eff0
    DP: selecting 0:0
  REG: writing #<Peripheral::CachingProxy:0x9ae3bf8> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9ae3bf8> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9ae3bf8> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9ae3bf8> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9ae3bf8> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  DP: write dp 00000008 = 00000000
SWD: write dp 8 = 00000000
  SWD: SWD transaction dp out 8, try 1
PHYS: transact 10110001
  PHYS: turning out
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  DP: write ap 00000004 = e000eff0
SWD: write ap 4 = e000eff0
  SWD: SWD transaction ap out 4, try 1
PHYS: transact 10001011
  PHYS: flush 21 13 00 00 00 00 30 00 10 8b 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap c (4 words)...
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: flush 21 13 f0 ef 00 e0 30 00 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: turning out
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 0d 00 00 00 01
  PHYS: read word: 0000000d, parity 1
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: turning out
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: e0 00 00 00 01
  PHYS: read word: 000000e0, parity 1
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: turning out
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 05 00 00 00 00
  PHYS: read word: 00000005, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: b1 00 00 00 00
  PHYS: read word: 000000b1, parity 0
SWD: read  ap c < 0000000d 000000e0 00000005 000000b1
  DP: read ap 0000000c < 0000000d, 000000e0, 00000005, 000000b1
    AP: 0 read 0000000c < 0000000d, 000000e0, 00000005, 000000b1
MEM: read e000eff0 < 0000000d, 000000e0, 00000005, 000000b1
  AP: device component class: generic_ip
  REG: writing Adiv5::MemAP.TAR = 0xe000efd0
    AP: 0 write 00000004 = e000efd0
  DP: write ap 00000004 = e000efd0
SWD: write ap 4 = e000efd0
  SWD: SWD transaction ap out 4, try 1
PHYS: transact 10001011
  PHYS: turning out
  PHYS: flush 21 10 8b 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap c (1 words)...
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: flush 21 13 d0 ef 00 e0 30 80 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 04 00 00 00 01
  PHYS: read word: 00000004, parity 1
SWD: read  ap c < 00000004
  DP: read ap 0000000c < 00000004
    AP: 0 read 0000000c < 00000004
MEM: read e000efd0 < 00000004
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0xe000efd0 backing Adiv5::DebugDevice = 0x00000004
    DP: selecting 0:1
  REG: writing #<Peripheral::CachingProxy:0x9b782f8> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9b782f8> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9b782f8> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9b782f8> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0x00000001
  REG: writing #<Peripheral::CachingProxy:0x9b782f8> @ 0x00000008 backing Adiv5::DP::SELECT = 0x00000010
  DP: write dp 00000008 = 00000010
SWD: write dp 8 = 00000010
  SWD: SWD transaction dp out 8, try 1
PHYS: transact 10110001
  PHYS: turning out
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap 4 (1 words)...
  SWD: SWD transaction ap in 4, try 1
PHYS: transact 10101111
  PHYS: flush 21 13 10 00 00 00 30 80 10 af 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
SWD: read  ap 4 < 00000000
  DP: read ap 00000004 < 00000000
    AP: 0 read 00000014 < 00000000
MEM: read e000efd4 < 00000000
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0xe000efd4 backing Adiv5::DebugDevice = 0000000000
  SWD: read  ap 8 (1 words)...
  SWD: SWD transaction ap in 8, try 1
PHYS: transact 10110111
  PHYS: turning out
  PHYS: flush 21 10 b7 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
SWD: read  ap 8 < 00000000
  DP: read ap 00000008 < 00000000
    AP: 0 read 00000018 < 00000000
MEM: read e000efd8 < 00000000
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0xe000efd8 backing Adiv5::DebugDevice = 0000000000
  SWD: read  ap c (1 words)...
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: turning out
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
SWD: read  ap c < 00000000
  DP: read ap 0000000c < 00000000
    AP: 0 read 0000001c < 00000000
MEM: read e000efdc < 00000000
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0xe000efdc backing Adiv5::DebugDevice = 0000000000
  REG: reading #<Peripheral::BackingProxy:0x9b5ecb8> @ 0000000000 backing Adiv5::DebugDevice::PeripheralID::PERIPHERAL4 = 0x00000004
  REG: reading Adiv5::DebugDevice::PeripheralID::PERIPHERAL4.count_4kb = 0000000000
  AP: device size: 4096
  REG: writing Adiv5::MemAP.TAR = 0xe00ff004
    AP: 0 write 00000004 = e00ff004
    DP: selecting 0:0
  REG: writing #<Peripheral::CachingProxy:0x9c56710> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9c56710> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9c56710> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9c56710> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9c56710> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  DP: write dp 00000008 = 00000000
SWD: write dp 8 = 00000000
  SWD: SWD transaction dp out 8, try 1
PHYS: transact 10110001
  PHYS: turning out
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  DP: write ap 00000004 = e00ff004
SWD: write ap 4 = e00ff004
  SWD: SWD transaction ap out 4, try 1
PHYS: transact 10001011
  PHYS: flush 21 13 00 00 00 00 30 00 10 8b 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap c (1 words)...
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: flush 21 13 04 f0 0f e0 30 00 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 03 20 f0 ff 01
  PHYS: read word: fff02003, parity 1
SWD: read  ap c < fff02003
  DP: read ap 0000000c < fff02003
    AP: 0 read 0000000c < fff02003
MEM: read e00ff004 < fff02003
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0xe00ff004 backing Adiv5::ROMTable = 0xfff02003
  REG: reading #<Peripheral::BackingProxy:0x9c5764c> @ 0x00000004 backing Adiv5::ROMTable::Entries = 0xfff02003
    DP: selecting 0:1
  REG: writing #<Peripheral::CachingProxy:0x9d7b58c> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9d7b58c> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9d7b58c> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9d7b58c> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0x00000001
  REG: writing #<Peripheral::CachingProxy:0x9d7b58c> @ 0x00000008 backing Adiv5::DP::SELECT = 0x00000010
  DP: write dp 00000008 = 00000010
SWD: write dp 8 = 00000010
  SWD: SWD transaction dp out 8, try 1
PHYS: transact 10110001
  PHYS: turning out
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap 4 (1 words)...
  SWD: SWD transaction ap in 4, try 1
PHYS: transact 10101111
  PHYS: flush 21 13 10 00 00 00 30 80 10 af 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 03 20 f0 ff 01
  PHYS: read word: fff02003, parity 1
SWD: read  ap 4 < fff02003
  DP: read ap 00000004 < fff02003
    AP: 0 read 00000014 < fff02003
MEM: read e00ff004 < fff02003
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0xe00ff004 backing Adiv5::ROMTable = 0xfff02003
  REG: reading #<Peripheral::BackingProxy:0x9c5764c> @ 0x00000004 backing Adiv5::ROMTable::Entries = 0xfff02003
  AP: rom table entry fff02003
  SWD: read  ap 4 (1 words)...
  SWD: SWD transaction ap in 4, try 1
PHYS: transact 10101111
  PHYS: turning out
  PHYS: flush 21 10 af 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 03 20 f0 ff 01
  PHYS: read word: fff02003, parity 1
SWD: read  ap 4 < fff02003
  DP: read ap 00000004 < fff02003
    AP: 0 read 00000014 < fff02003
MEM: read e00ff004 < fff02003
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0xe00ff004 backing Adiv5::ROMTable = 0xfff02003
  REG: reading #<Peripheral::BackingProxy:0x9c5764c> @ 0x00000004 backing Adiv5::ROMTable::Entries = 0xfff02003
  REG: reading Adiv5::ROMTable::Entries.present? = 0x00000001
  SWD: read  ap 4 (1 words)...
  SWD: SWD transaction ap in 4, try 1
PHYS: transact 10101111
  PHYS: turning out
  PHYS: flush 21 10 af 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 03 20 f0 ff 01
  PHYS: read word: fff02003, parity 1
SWD: read  ap 4 < fff02003
  DP: read ap 00000004 < fff02003
    AP: 0 read 00000014 < fff02003
MEM: read e00ff004 < fff02003
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0xe00ff004 backing Adiv5::ROMTable = 0xfff02003
  REG: reading #<Peripheral::BackingProxy:0x9c5764c> @ 0x00000004 backing Adiv5::ROMTable::Entries = 0xfff02003
  REG: reading Adiv5::ROMTable::Entries.addroffs = 0xfff02000
AP: Adiv5::DebugDevice at e0001000
  REG: writing Adiv5::MemAP.TAR = 0xe0001ff0
    AP: 0 write 00000004 = e0001ff0
    DP: selecting 0:0
  REG: writing #<Peripheral::CachingProxy:0x9e4150c> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9e4150c> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9e4150c> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9e4150c> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9e4150c> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  DP: write dp 00000008 = 00000000
SWD: write dp 8 = 00000000
  SWD: SWD transaction dp out 8, try 1
PHYS: transact 10110001
  PHYS: turning out
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  DP: write ap 00000004 = e0001ff0
SWD: write ap 4 = e0001ff0
  SWD: SWD transaction ap out 4, try 1
PHYS: transact 10001011
  PHYS: flush 21 13 00 00 00 00 30 00 10 8b 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap c (4 words)...
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: flush 21 13 f0 1f 00 e0 30 00 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: turning out
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 0d 00 00 00 01
  PHYS: read word: 0000000d, parity 1
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: turning out
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: e0 00 00 00 01
  PHYS: read word: 000000e0, parity 1
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: turning out
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 05 00 00 00 00
  PHYS: read word: 00000005, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: b1 00 00 00 00
  PHYS: read word: 000000b1, parity 0
SWD: read  ap c < 0000000d 000000e0 00000005 000000b1
  DP: read ap 0000000c < 0000000d, 000000e0, 00000005, 000000b1
    AP: 0 read 0000000c < 0000000d, 000000e0, 00000005, 000000b1
MEM: read e0001ff0 < 0000000d, 000000e0, 00000005, 000000b1
  AP: device component class: generic_ip
  REG: writing Adiv5::MemAP.TAR = 0xe0001fd0
    AP: 0 write 00000004 = e0001fd0
  DP: write ap 00000004 = e0001fd0
SWD: write ap 4 = e0001fd0
  SWD: SWD transaction ap out 4, try 1
PHYS: transact 10001011
  PHYS: turning out
  PHYS: flush 21 10 8b 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap c (1 words)...
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: flush 21 13 d0 1f 00 e0 30 80 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 04 00 00 00 01
  PHYS: read word: 00000004, parity 1
SWD: read  ap c < 00000004
  DP: read ap 0000000c < 00000004
    AP: 0 read 0000000c < 00000004
MEM: read e0001fd0 < 00000004
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0xe0001fd0 backing Adiv5::DebugDevice = 0x00000004
    DP: selecting 0:1
  REG: writing #<Peripheral::CachingProxy:0x9d1fde0> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9d1fde0> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9d1fde0> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9d1fde0> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0x00000001
  REG: writing #<Peripheral::CachingProxy:0x9d1fde0> @ 0x00000008 backing Adiv5::DP::SELECT = 0x00000010
  DP: write dp 00000008 = 00000010
SWD: write dp 8 = 00000010
  SWD: SWD transaction dp out 8, try 1
PHYS: transact 10110001
  PHYS: turning out
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap 4 (1 words)...
  SWD: SWD transaction ap in 4, try 1
PHYS: transact 10101111
  PHYS: flush 21 13 10 00 00 00 30 80 10 af 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
SWD: read  ap 4 < 00000000
  DP: read ap 00000004 < 00000000
    AP: 0 read 00000014 < 00000000
MEM: read e0001fd4 < 00000000
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0xe0001fd4 backing Adiv5::DebugDevice = 0000000000
  SWD: read  ap 8 (1 words)...
  SWD: SWD transaction ap in 8, try 1
PHYS: transact 10110111
  PHYS: turning out
  PHYS: flush 21 10 b7 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
SWD: read  ap 8 < 00000000
  DP: read ap 00000008 < 00000000
    AP: 0 read 00000018 < 00000000
MEM: read e0001fd8 < 00000000
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0xe0001fd8 backing Adiv5::DebugDevice = 0000000000
  SWD: read  ap c (1 words)...
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: turning out
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
SWD: read  ap c < 00000000
  DP: read ap 0000000c < 00000000
    AP: 0 read 0000001c < 00000000
MEM: read e0001fdc < 00000000
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0xe0001fdc backing Adiv5::DebugDevice = 0000000000
  REG: reading #<Peripheral::BackingProxy:0x9e62964> @ 0000000000 backing Adiv5::DebugDevice::PeripheralID::PERIPHERAL4 = 0x00000004
  REG: reading Adiv5::DebugDevice::PeripheralID::PERIPHERAL4.count_4kb = 0000000000
  AP: device size: 4096
  REG: writing Adiv5::MemAP.TAR = 0xe00ff008
    AP: 0 write 00000004 = e00ff008
    DP: selecting 0:0
  REG: writing #<Peripheral::CachingProxy:0x9cc2bcc> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9cc2bcc> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9cc2bcc> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9cc2bcc> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9cc2bcc> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  DP: write dp 00000008 = 00000000
SWD: write dp 8 = 00000000
  SWD: SWD transaction dp out 8, try 1
PHYS: transact 10110001
  PHYS: turning out
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  DP: write ap 00000004 = e00ff008
SWD: write ap 4 = e00ff008
  SWD: SWD transaction ap out 4, try 1
PHYS: transact 10001011
  PHYS: flush 21 13 00 00 00 00 30 00 10 8b 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap c (1 words)...
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: flush 21 13 08 f0 0f e0 30 00 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 03 30 f0 ff 00
  PHYS: read word: fff03003, parity 0
SWD: read  ap c < fff03003
  DP: read ap 0000000c < fff03003
    AP: 0 read 0000000c < fff03003
MEM: read e00ff008 < fff03003
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0xe00ff008 backing Adiv5::ROMTable = 0xfff03003
  REG: reading #<Peripheral::BackingProxy:0x9cc38b0> @ 0x00000008 backing Adiv5::ROMTable::Entries = 0xfff03003
    DP: selecting 0:1
  REG: writing #<Peripheral::CachingProxy:0x9cd0420> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9cd0420> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9cd0420> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9cd0420> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0x00000001
  REG: writing #<Peripheral::CachingProxy:0x9cd0420> @ 0x00000008 backing Adiv5::DP::SELECT = 0x00000010
  DP: write dp 00000008 = 00000010
SWD: write dp 8 = 00000010
  SWD: SWD transaction dp out 8, try 1
PHYS: transact 10110001
  PHYS: turning out
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap 8 (1 words)...
  SWD: SWD transaction ap in 8, try 1
PHYS: transact 10110111
  PHYS: flush 21 13 10 00 00 00 30 80 10 b7 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 03 30 f0 ff 00
  PHYS: read word: fff03003, parity 0
SWD: read  ap 8 < fff03003
  DP: read ap 00000008 < fff03003
    AP: 0 read 00000018 < fff03003
MEM: read e00ff008 < fff03003
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0xe00ff008 backing Adiv5::ROMTable = 0xfff03003
  REG: reading #<Peripheral::BackingProxy:0x9cc38b0> @ 0x00000008 backing Adiv5::ROMTable::Entries = 0xfff03003
  AP: rom table entry fff03003
  SWD: read  ap 8 (1 words)...
  SWD: SWD transaction ap in 8, try 1
PHYS: transact 10110111
  PHYS: turning out
  PHYS: flush 21 10 b7 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 03 30 f0 ff 00
  PHYS: read word: fff03003, parity 0
SWD: read  ap 8 < fff03003
  DP: read ap 00000008 < fff03003
    AP: 0 read 00000018 < fff03003
MEM: read e00ff008 < fff03003
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0xe00ff008 backing Adiv5::ROMTable = 0xfff03003
  REG: reading #<Peripheral::BackingProxy:0x9cc38b0> @ 0x00000008 backing Adiv5::ROMTable::Entries = 0xfff03003
  REG: reading Adiv5::ROMTable::Entries.present? = 0x00000001
  SWD: read  ap 8 (1 words)...
  SWD: SWD transaction ap in 8, try 1
PHYS: transact 10110111
  PHYS: turning out
  PHYS: flush 21 10 b7 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 03 30 f0 ff 00
  PHYS: read word: fff03003, parity 0
SWD: read  ap 8 < fff03003
  DP: read ap 00000008 < fff03003
    AP: 0 read 00000018 < fff03003
MEM: read e00ff008 < fff03003
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0xe00ff008 backing Adiv5::ROMTable = 0xfff03003
  REG: reading #<Peripheral::BackingProxy:0x9cc38b0> @ 0x00000008 backing Adiv5::ROMTable::Entries = 0xfff03003
  REG: reading Adiv5::ROMTable::Entries.addroffs = 0xfff03000
AP: Adiv5::DebugDevice at e0002000
  REG: writing Adiv5::MemAP.TAR = 0xe0002ff0
    AP: 0 write 00000004 = e0002ff0
    DP: selecting 0:0
  REG: writing #<Peripheral::CachingProxy:0x9cd4b24> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9cd4b24> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9cd4b24> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9cd4b24> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9cd4b24> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  DP: write dp 00000008 = 00000000
SWD: write dp 8 = 00000000
  SWD: SWD transaction dp out 8, try 1
PHYS: transact 10110001
  PHYS: turning out
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  DP: write ap 00000004 = e0002ff0
SWD: write ap 4 = e0002ff0
  SWD: SWD transaction ap out 4, try 1
PHYS: transact 10001011
  PHYS: flush 21 13 00 00 00 00 30 00 10 8b 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap c (4 words)...
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: flush 21 13 f0 2f 00 e0 30 00 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: turning out
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 0d 00 00 00 01
  PHYS: read word: 0000000d, parity 1
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: turning out
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: e0 00 00 00 01
  PHYS: read word: 000000e0, parity 1
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: turning out
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 05 00 00 00 00
  PHYS: read word: 00000005, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: b1 00 00 00 00
  PHYS: read word: 000000b1, parity 0
SWD: read  ap c < 0000000d 000000e0 00000005 000000b1
  DP: read ap 0000000c < 0000000d, 000000e0, 00000005, 000000b1
    AP: 0 read 0000000c < 0000000d, 000000e0, 00000005, 000000b1
MEM: read e0002ff0 < 0000000d, 000000e0, 00000005, 000000b1
  AP: device component class: generic_ip
  REG: writing Adiv5::MemAP.TAR = 0xe0002fd0
    AP: 0 write 00000004 = e0002fd0
  DP: write ap 00000004 = e0002fd0
SWD: write ap 4 = e0002fd0
  SWD: SWD transaction ap out 4, try 1
PHYS: transact 10001011
  PHYS: turning out
  PHYS: flush 21 10 8b 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap c (1 words)...
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: flush 21 13 d0 2f 00 e0 30 80 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 04 00 00 00 01
  PHYS: read word: 00000004, parity 1
SWD: read  ap c < 00000004
  DP: read ap 0000000c < 00000004
    AP: 0 read 0000000c < 00000004
MEM: read e0002fd0 < 00000004
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0xe0002fd0 backing Adiv5::DebugDevice = 0x00000004
    DP: selecting 0:1
  REG: writing #<Peripheral::CachingProxy:0x9e6b6f4> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9e6b6f4> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9e6b6f4> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9e6b6f4> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0x00000001
  REG: writing #<Peripheral::CachingProxy:0x9e6b6f4> @ 0x00000008 backing Adiv5::DP::SELECT = 0x00000010
  DP: write dp 00000008 = 00000010
SWD: write dp 8 = 00000010
  SWD: SWD transaction dp out 8, try 1
PHYS: transact 10110001
  PHYS: turning out
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap 4 (1 words)...
  SWD: SWD transaction ap in 4, try 1
PHYS: transact 10101111
  PHYS: flush 21 13 10 00 00 00 30 80 10 af 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
SWD: read  ap 4 < 00000000
  DP: read ap 00000004 < 00000000
    AP: 0 read 00000014 < 00000000
MEM: read e0002fd4 < 00000000
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0xe0002fd4 backing Adiv5::DebugDevice = 0000000000
  SWD: read  ap 8 (1 words)...
  SWD: SWD transaction ap in 8, try 1
PHYS: transact 10110111
  PHYS: turning out
  PHYS: flush 21 10 b7 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
SWD: read  ap 8 < 00000000
  DP: read ap 00000008 < 00000000
    AP: 0 read 00000018 < 00000000
MEM: read e0002fd8 < 00000000
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0xe0002fd8 backing Adiv5::DebugDevice = 0000000000
  SWD: read  ap c (1 words)...
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: turning out
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
SWD: read  ap c < 00000000
  DP: read ap 0000000c < 00000000
    AP: 0 read 0000001c < 00000000
MEM: read e0002fdc < 00000000
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0xe0002fdc backing Adiv5::DebugDevice = 0000000000
  REG: reading #<Peripheral::BackingProxy:0x9cedcf0> @ 0000000000 backing Adiv5::DebugDevice::PeripheralID::PERIPHERAL4 = 0x00000004
  REG: reading Adiv5::DebugDevice::PeripheralID::PERIPHERAL4.count_4kb = 0000000000
  AP: device size: 4096
  REG: writing Adiv5::MemAP.TAR = 0xe00ff00c
    AP: 0 write 00000004 = e00ff00c
    DP: selecting 0:0
  REG: writing #<Peripheral::CachingProxy:0x9cf8a24> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9cf8a24> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9cf8a24> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9cf8a24> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9cf8a24> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  DP: write dp 00000008 = 00000000
SWD: write dp 8 = 00000000
  SWD: SWD transaction dp out 8, try 1
PHYS: transact 10110001
  PHYS: turning out
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  DP: write ap 00000004 = e00ff00c
SWD: write ap 4 = e00ff00c
  SWD: SWD transaction ap out 4, try 1
PHYS: transact 10001011
  PHYS: flush 21 13 00 00 00 00 30 00 10 8b 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap c (1 words)...
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: flush 21 13 0c f0 0f e0 30 80 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
SWD: read  ap c < 00000000
  DP: read ap 0000000c < 00000000
    AP: 0 read 0000000c < 00000000
MEM: read e00ff00c < 00000000
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0xe00ff00c backing Adiv5::ROMTable = 0000000000
  REG: reading #<Peripheral::BackingProxy:0x9cf9118> @ 0x0000000c backing Adiv5::ROMTable::Entries = 0000000000
  REG: writing Adiv5::MemAP.TAR = 0xf0000004
    AP: 0 write 00000004 = f0000004
  DP: write ap 00000004 = f0000004
SWD: write ap 4 = f0000004
  SWD: SWD transaction ap out 4, try 1
PHYS: transact 10001011
  PHYS: turning out
  PHYS: flush 21 10 8b 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap c (1 words)...
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: flush 21 13 04 00 00 f0 30 80 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 03 20 00 00 01
  PHYS: read word: 00002003, parity 1
SWD: read  ap c < 00002003
  DP: read ap 0000000c < 00002003
    AP: 0 read 0000000c < 00002003
MEM: read f0000004 < 00002003
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0xf0000004 backing Adiv5::ROMTable = 0x00002003
  REG: reading #<Peripheral::BackingProxy:0x9ce7d8c> @ 0x00000004 backing Adiv5::ROMTable::Entries = 0x00002003
    DP: selecting 0:1
  REG: writing #<Peripheral::CachingProxy:0x9cd6d5c> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9cd6d5c> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9cd6d5c> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9cd6d5c> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0x00000001
  REG: writing #<Peripheral::CachingProxy:0x9cd6d5c> @ 0x00000008 backing Adiv5::DP::SELECT = 0x00000010
  DP: write dp 00000008 = 00000010
SWD: write dp 8 = 00000010
  SWD: SWD transaction dp out 8, try 1
PHYS: transact 10110001
  PHYS: turning out
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap 4 (1 words)...
  SWD: SWD transaction ap in 4, try 1
PHYS: transact 10101111
  PHYS: flush 21 13 10 00 00 00 30 80 10 af 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 03 20 00 00 01
  PHYS: read word: 00002003, parity 1
SWD: read  ap 4 < 00002003
  DP: read ap 00000004 < 00002003
    AP: 0 read 00000014 < 00002003
MEM: read f0000004 < 00002003
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0xf0000004 backing Adiv5::ROMTable = 0x00002003
  REG: reading #<Peripheral::BackingProxy:0x9ce7d8c> @ 0x00000004 backing Adiv5::ROMTable::Entries = 0x00002003
  AP: rom table entry 00002003
  SWD: read  ap 4 (1 words)...
  SWD: SWD transaction ap in 4, try 1
PHYS: transact 10101111
  PHYS: turning out
  PHYS: flush 21 10 af 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 03 20 00 00 01
  PHYS: read word: 00002003, parity 1
SWD: read  ap 4 < 00002003
  DP: read ap 00000004 < 00002003
    AP: 0 read 00000014 < 00002003
MEM: read f0000004 < 00002003
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0xf0000004 backing Adiv5::ROMTable = 0x00002003
  REG: reading #<Peripheral::BackingProxy:0x9ce7d8c> @ 0x00000004 backing Adiv5::ROMTable::Entries = 0x00002003
  REG: reading Adiv5::ROMTable::Entries.present? = 0x00000001
  SWD: read  ap 4 (1 words)...
  SWD: SWD transaction ap in 4, try 1
PHYS: transact 10101111
  PHYS: turning out
  PHYS: flush 21 10 af 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 03 20 00 00 01
  PHYS: read word: 00002003, parity 1
SWD: read  ap 4 < 00002003
  DP: read ap 00000004 < 00002003
    AP: 0 read 00000014 < 00002003
MEM: read f0000004 < 00002003
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0xf0000004 backing Adiv5::ROMTable = 0x00002003
  REG: reading #<Peripheral::BackingProxy:0x9ce7d8c> @ 0x00000004 backing Adiv5::ROMTable::Entries = 0x00002003
  REG: reading Adiv5::ROMTable::Entries.addroffs = 0x00002000
AP: Adiv5::DebugDevice at f0002000
  REG: writing Adiv5::MemAP.TAR = 0xf0002ff0
    AP: 0 write 00000004 = f0002ff0
    DP: selecting 0:0
  REG: writing #<Peripheral::CachingProxy:0x9cd2630> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9cd2630> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9cd2630> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9cd2630> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9cd2630> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  DP: write dp 00000008 = 00000000
SWD: write dp 8 = 00000000
  SWD: SWD transaction dp out 8, try 1
PHYS: transact 10110001
  PHYS: turning out
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  DP: write ap 00000004 = f0002ff0
SWD: write ap 4 = f0002ff0
  SWD: SWD transaction ap out 4, try 1
PHYS: transact 10001011
  PHYS: flush 21 13 00 00 00 00 30 00 10 8b 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap c (4 words)...
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: flush 21 13 f0 2f 00 f0 30 80 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: turning out
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 0d 00 00 00 01
  PHYS: read word: 0000000d, parity 1
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: turning out
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 90 00 00 00 00
  PHYS: read word: 00000090, parity 0
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: turning out
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 05 00 00 00 00
  PHYS: read word: 00000005, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: b1 00 00 00 00
  PHYS: read word: 000000b1, parity 0
SWD: read  ap c < 0000000d 00000090 00000005 000000b1
  DP: read ap 0000000c < 0000000d, 00000090, 00000005, 000000b1
    AP: 0 read 0000000c < 0000000d, 00000090, 00000005, 000000b1
MEM: read f0002ff0 < 0000000d, 00000090, 00000005, 000000b1
  AP: device component class: debug
  REG: writing Adiv5::MemAP.TAR = 0xf0002fd0
    AP: 0 write 00000004 = f0002fd0
  DP: write ap 00000004 = f0002fd0
SWD: write ap 4 = f0002fd0
  SWD: SWD transaction ap out 4, try 1
PHYS: transact 10001011
  PHYS: turning out
  PHYS: flush 21 10 8b 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap c (1 words)...
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: flush 21 13 d0 2f 00 f0 30 00 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 04 00 00 00 01
  PHYS: read word: 00000004, parity 1
SWD: read  ap c < 00000004
  DP: read ap 0000000c < 00000004
    AP: 0 read 0000000c < 00000004
MEM: read f0002fd0 < 00000004
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0xf0002fd0 backing Adiv5::DebugDevice = 0x00000004
    DP: selecting 0:1
  REG: writing #<Peripheral::CachingProxy:0x9d25880> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9d25880> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9d25880> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9d25880> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0x00000001
  REG: writing #<Peripheral::CachingProxy:0x9d25880> @ 0x00000008 backing Adiv5::DP::SELECT = 0x00000010
  DP: write dp 00000008 = 00000010
SWD: write dp 8 = 00000010
  SWD: SWD transaction dp out 8, try 1
PHYS: transact 10110001
  PHYS: turning out
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap 4 (1 words)...
  SWD: SWD transaction ap in 4, try 1
PHYS: transact 10101111
  PHYS: flush 21 13 10 00 00 00 30 80 10 af 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
SWD: read  ap 4 < 00000000
  DP: read ap 00000004 < 00000000
    AP: 0 read 00000014 < 00000000
MEM: read f0002fd4 < 00000000
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0xf0002fd4 backing Adiv5::DebugDevice = 0000000000
  SWD: read  ap 8 (1 words)...
  SWD: SWD transaction ap in 8, try 1
PHYS: transact 10110111
  PHYS: turning out
  PHYS: flush 21 10 b7 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
SWD: read  ap 8 < 00000000
  DP: read ap 00000008 < 00000000
    AP: 0 read 00000018 < 00000000
MEM: read f0002fd8 < 00000000
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0xf0002fd8 backing Adiv5::DebugDevice = 0000000000
  SWD: read  ap c (1 words)...
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: turning out
  PHYS: flush 21 10 9f 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
SWD: read  ap c < 00000000
  DP: read ap 0000000c < 00000000
    AP: 0 read 0000001c < 00000000
MEM: read f0002fdc < 00000000
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0xf0002fdc backing Adiv5::DebugDevice = 0000000000
  REG: reading #<Peripheral::BackingProxy:0x9cc0034> @ 0000000000 backing Adiv5::DebugDevice::PeripheralID::PERIPHERAL4 = 0x00000004
  REG: reading Adiv5::DebugDevice::PeripheralID::PERIPHERAL4.count_4kb = 0000000000
  AP: device size: 4096
  REG: writing Adiv5::MemAP.TAR = 0xf0000008
    AP: 0 write 00000004 = f0000008
    DP: selecting 0:0
  REG: writing #<Peripheral::CachingProxy:0x9e616f4> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9e616f4> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9e616f4> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9e616f4> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9e616f4> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  DP: write dp 00000008 = 00000000
SWD: write dp 8 = 00000000
  SWD: SWD transaction dp out 8, try 1
PHYS: transact 10110001
  PHYS: turning out
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  DP: write ap 00000004 = f0000008
SWD: write ap 4 = f0000008
  SWD: SWD transaction ap out 4, try 1
PHYS: transact 10001011
  PHYS: flush 21 13 00 00 00 00 30 00 10 8b 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap c (1 words)...
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: flush 21 13 08 00 00 f0 30 80 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
SWD: read  ap c < 00000000
  DP: read ap 0000000c < 00000000
    AP: 0 read 0000000c < 00000000
MEM: read f0000008 < 00000000
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0xf0000008 backing Adiv5::ROMTable = 0000000000
  REG: reading #<Peripheral::BackingProxy:0x9e61e74> @ 0x00000008 backing Adiv5::ROMTable::Entries = 0000000000
done.
Programming 1272 bytes of firmware to address 0...
ARM: waiting for core to halt
  REG: writing Adiv5::MemAP.TAR = 0xe000edf0
    AP: 0 write 00000004 = e000edf0
  DP: write ap 00000004 = e000edf0
SWD: write ap 4 = e000edf0
  SWD: SWD transaction ap out 4, try 1
PHYS: transact 10001011
  PHYS: turning out
  PHYS: flush 21 10 8b 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap c (1 words)...
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: flush 21 13 f0 ed 00 e0 30 80 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 03 00
  PHYS: read word: 03000000, parity 0
SWD: read  ap c < 03000000
  DP: read ap 0000000c < 03000000
    AP: 0 read 0000000c < 03000000
MEM: read e000edf0 < 03000000
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0xe000edf0 backing ARMv7::SCS = 0x03000000
  REG: reading #<Peripheral::BackingProxy:0x9e41c00> @ 0xe000edf0 backing ARMv7::SCS::DHCSR = 0x03000000
  REG: reading ARMv7::SCS::DHCSR.S_HALT = 0000000000
    DP: selecting 0:1
  REG: writing #<Peripheral::CachingProxy:0x9ddd5fc> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9ddd5fc> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9ddd5fc> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9ddd5fc> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0x00000001
  REG: writing #<Peripheral::CachingProxy:0x9ddd5fc> @ 0x00000008 backing Adiv5::DP::SELECT = 0x00000010
  DP: write dp 00000008 = 00000010
SWD: write dp 8 = 00000010
  SWD: SWD transaction dp out 8, try 1
PHYS: transact 10110001
  PHYS: turning out
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap 0 (1 words)...
  SWD: SWD transaction ap in 0, try 1
PHYS: transact 10000111
  PHYS: flush 21 13 10 00 00 00 30 80 10 87 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 01 01
  PHYS: read word: 01000000, parity 1
SWD: read  ap 0 < 01000000
  DP: read ap 00000000 < 01000000
    AP: 0 read 00000010 < 01000000
MEM: read e000edf0 < 01000000
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0xe000edf0 backing ARMv7::SCS = 0x01000000
  REG: reading #<Peripheral::CachingProxy:0x9dddad4> @ 0xe000edf0 backing ARMv7::SCS::DHCSR = 0x01000000
  REG: writing ARMv7::SCS::DHCSR.DBGKEY = 0x0000a05f
  REG: writing #<Peripheral::CachingProxy:0x9dddad4> @ 0xe000edf0 backing ARMv7::SCS::DHCSR = 0xa05f0000
  REG: reading #<Peripheral::CachingProxy:0x9dddad4> @ 0xe000edf0 backing ARMv7::SCS::DHCSR = 0xa05f0000
  REG: writing ARMv7::SCS::DHCSR.C_DEBUGEN = 0x00000001
  REG: writing #<Peripheral::CachingProxy:0x9dddad4> @ 0xe000edf0 backing ARMv7::SCS::DHCSR = 0xa05f0001
  REG: reading #<Peripheral::CachingProxy:0x9dddad4> @ 0xe000edf0 backing ARMv7::SCS::DHCSR = 0xa05f0001
  REG: writing ARMv7::SCS::DHCSR.C_HALT = 0x00000001
  REG: writing #<Peripheral::CachingProxy:0x9dddad4> @ 0xe000edf0 backing ARMv7::SCS::DHCSR = 0xa05f0003
  REG: writing #<Adiv5::MemAP:0x9e699bc> @ 0xe000edf0 backing ARMv7::SCS = 0xa05f0003
MEM: write e000edf0 = a05f0003
    AP: 0 write 00000010 = a05f0003
  DP: write ap 00000000 = a05f0003
SWD: write ap 0 = a05f0003
  SWD: SWD transaction ap out 0, try 1
PHYS: transact 10100011
  PHYS: turning out
  PHYS: flush 21 10 a3 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap 0 (1 words)...
  SWD: SWD transaction ap in 0, try 1
PHYS: transact 10000111
  PHYS: flush 21 13 03 00 5f a0 30 00 10 87 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 03 00 03 01 01
  PHYS: read word: 01030003, parity 1
SWD: read  ap 0 < 01030003
  DP: read ap 00000000 < 01030003
    AP: 0 read 00000010 < 01030003
MEM: read e000edf0 < 01030003
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0xe000edf0 backing ARMv7::SCS = 0x01030003
  REG: reading #<Peripheral::BackingProxy:0x9d84510> @ 0xe000edf0 backing ARMv7::SCS::DHCSR = 0x01030003
  REG: reading ARMv7::SCS::DHCSR.S_HALT = 0x00000001
  SWD: read  ap 0 (1 words)...
  SWD: SWD transaction ap in 0, try 1
PHYS: transact 10000111
  PHYS: turning out
  PHYS: flush 21 10 87 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 03 00 03 00 00
  PHYS: read word: 00030003, parity 0
SWD: read  ap 0 < 00030003
  DP: read ap 00000000 < 00030003
    AP: 0 read 00000010 < 00030003
MEM: read e000edf0 < 00030003
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0xe000edf0 backing ARMv7::SCS = 0x00030003
  REG: reading #<Peripheral::BackingProxy:0x9d51da4> @ 0xe000edf0 backing ARMv7::SCS::DHCSR = 0x00030003
  REG: reading ARMv7::SCS::DHCSR.S_HALT = 0x00000001
programming 0, 0 of 2048
  REG: writing Adiv5::MemAP.TAR = 0x4001e504
    AP: 0 write 00000004 = 4001e504
    DP: selecting 0:0
  REG: writing #<Peripheral::CachingProxy:0x9c545c8> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9c545c8> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9c545c8> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9c545c8> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9c545c8> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  DP: write dp 00000008 = 00000000
SWD: write dp 8 = 00000000
  SWD: SWD transaction dp out 8, try 1
PHYS: transact 10110001
  PHYS: turning out
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  DP: write ap 00000004 = 4001e504
SWD: write ap 4 = 4001e504
  SWD: SWD transaction ap out 4, try 1
PHYS: transact 10001011
  PHYS: flush 21 13 00 00 00 00 30 00 10 8b 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap c (1 words)...
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: flush 21 13 04 e5 01 40 30 00 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
SWD: read  ap c < 00000000
  DP: read ap 0000000c < 00000000
    AP: 0 read 0000000c < 00000000
MEM: read 4001e504 < 00000000
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0x4001e504 backing NRF51::NVMC = 0000000000
  REG: reading #<Peripheral::BackingProxy:0x9c55234> @ 0x00000504 backing NRF51::NVMC::CONFIG = 0000000000
  REG: writing NRF51::NVMC::CONFIG.WEN = 0x00000002
  REG: writing #<Peripheral::BackingProxy:0x9c55234> @ 0x00000504 backing NRF51::NVMC::CONFIG = 0x00000002
  REG: writing #<Adiv5::MemAP:0x9e699bc> @ 0x4001e504 backing NRF51::NVMC = 0x00000002
MEM: write 4001e504 = 00000002
    AP: 0 write 00000014 = 00000002
    DP: selecting 0:1
  REG: writing #<Peripheral::CachingProxy:0x9beca54> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9beca54> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9beca54> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9beca54> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0x00000001
  REG: writing #<Peripheral::CachingProxy:0x9beca54> @ 0x00000008 backing Adiv5::DP::SELECT = 0x00000010
  DP: write dp 00000008 = 00000010
SWD: write dp 8 = 00000010
  SWD: SWD transaction dp out 8, try 1
PHYS: transact 10110001
  PHYS: turning out
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  DP: write ap 00000004 = 00000002
SWD: write ap 4 = 00000002
  SWD: SWD transaction ap out 4, try 1
PHYS: transact 10001011
  PHYS: flush 21 13 10 00 00 00 30 80 10 8b 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap 4 (1 words)...
  SWD: SWD transaction ap in 4, try 1
PHYS: transact 10101111
  PHYS: flush 21 13 02 00 00 00 30 80 10 af 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 02 00 00 00 01
  PHYS: read word: 00000002, parity 1
SWD: read  ap 4 < 00000002
  DP: read ap 00000004 < 00000002
    AP: 0 read 00000014 < 00000002
MEM: read 4001e504 < 00000002
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0x4001e504 backing NRF51::NVMC = 0x00000002
  REG: reading #<Peripheral::BackingProxy:0x9bb8600> @ 0x00000504 backing NRF51::NVMC::CONFIG = 0x00000002
  REG: reading NRF51::NVMC::CONFIG.WEN = 0x00000002
  REG: writing NRF51::NVMC.ERASEPAGE = 0000000000
  REG: writing #<Adiv5::MemAP:0x9e699bc> @ 0x4001e508 backing NRF51::NVMC = 0000000000
MEM: write 4001e508 = 00000000
    AP: 0 write 00000018 = 00000000
  DP: write ap 00000008 = 00000000
SWD: write ap 8 = 00000000
  SWD: SWD transaction ap out 8, try 1
PHYS: transact 10010011
  PHYS: turning out
  PHYS: flush 21 10 93 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  REG: writing Adiv5::MemAP.TAR = 0x4001e400
    AP: 0 write 00000004 = 4001e400
    DP: selecting 0:0
  REG: writing #<Peripheral::CachingProxy:0x9b635ec> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9b635ec> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9b635ec> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9b635ec> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9b635ec> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  DP: write dp 00000008 = 00000000
SWD: write dp 8 = 00000000
  SWD: SWD transaction dp out 8, try 1
PHYS: transact 10110001
  PHYS: flush 21 13 00 00 00 00 30 00 10 b1 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  DP: write ap 00000004 = 4001e400
SWD: write ap 4 = 4001e400
  SWD: SWD transaction ap out 4, try 1
PHYS: transact 10001011
  PHYS: flush 21 13 00 00 00 00 30 00 10 8b 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap c (1 words)...
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: flush 21 13 00 e4 01 40 30 00 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
SWD: read  ap c < 00000000
  DP: read ap 0000000c < 00000000
    AP: 0 read 0000000c < 00000000
MEM: read 4001e400 < 00000000
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0x4001e400 backing NRF51::NVMC = 0000000000
  REG: reading #<Peripheral::BackingProxy:0x9b63dd0> @ 0x00000400 backing NRF51::NVMC::READY = 0000000000
  REG: reading NRF51::NVMC::READY.ready = 0000000000
NRF51: waiting for flash erase completion
    DP: selecting 0:1
  REG: writing #<Peripheral::CachingProxy:0x9a86660> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9a86660> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9a86660> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9a86660> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0x00000001
  REG: writing #<Peripheral::CachingProxy:0x9a86660> @ 0x00000008 backing Adiv5::DP::SELECT = 0x00000010
  DP: write dp 00000008 = 00000010
SWD: write dp 8 = 00000010
  SWD: SWD transaction dp out 8, try 1
PHYS: transact 10110001
  PHYS: turning out
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap 0 (1 words)...
  SWD: SWD transaction ap in 0, try 1
PHYS: transact 10000111
  PHYS: flush 21 13 10 00 00 00 30 80 10 87 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 01 00 00 00 01
  PHYS: read word: 00000001, parity 1
SWD: read  ap 0 < 00000001
  DP: read ap 00000000 < 00000001
    AP: 0 read 00000010 < 00000001
MEM: read 4001e400 < 00000001
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0x4001e400 backing NRF51::NVMC = 0x00000001
  REG: reading #<Peripheral::BackingProxy:0x9a86a84> @ 0x00000400 backing NRF51::NVMC::READY = 0x00000001
  REG: reading NRF51::NVMC::READY.ready = 0x00000001
  REG: writing Adiv5::MemAP.TAR = 0x4001e504
    AP: 0 write 00000004 = 4001e504
    DP: selecting 0:0
  REG: writing #<Peripheral::CachingProxy:0x9ae68e4> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9ae68e4> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9ae68e4> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9ae68e4> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9ae68e4> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  DP: write dp 00000008 = 00000000
SWD: write dp 8 = 00000000
  SWD: SWD transaction dp out 8, try 1
PHYS: transact 10110001
  PHYS: turning out
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  DP: write ap 00000004 = 4001e504
SWD: write ap 4 = 4001e504
  SWD: SWD transaction ap out 4, try 1
PHYS: transact 10001011
  PHYS: flush 21 13 00 00 00 00 30 00 10 8b 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap c (1 words)...
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: flush 21 13 04 e5 01 40 30 00 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 02 00 00 00 01
  PHYS: read word: 00000002, parity 1
SWD: read  ap c < 00000002
  DP: read ap 0000000c < 00000002
    AP: 0 read 0000000c < 00000002
MEM: read 4001e504 < 00000002
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0x4001e504 backing NRF51::NVMC = 0x00000002
  REG: reading #<Peripheral::BackingProxy:0x9ae7258> @ 0x00000504 backing NRF51::NVMC::CONFIG = 0x00000002
  REG: writing NRF51::NVMC::CONFIG.WEN = 0x00000001
  REG: writing #<Peripheral::BackingProxy:0x9ae7258> @ 0x00000504 backing NRF51::NVMC::CONFIG = 0x00000001
  REG: writing #<Adiv5::MemAP:0x9e699bc> @ 0x4001e504 backing NRF51::NVMC = 0x00000001
MEM: write 4001e504 = 00000001
    AP: 0 write 00000014 = 00000001
    DP: selecting 0:1
  REG: writing #<Peripheral::CachingProxy:0x9abdb9c> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9abdb9c> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9abdb9c> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9abdb9c> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0x00000001
  REG: writing #<Peripheral::CachingProxy:0x9abdb9c> @ 0x00000008 backing Adiv5::DP::SELECT = 0x00000010
  DP: write dp 00000008 = 00000010
SWD: write dp 8 = 00000010
  SWD: SWD transaction dp out 8, try 1
PHYS: transact 10110001
  PHYS: turning out
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  DP: write ap 00000004 = 00000001
SWD: write ap 4 = 00000001
  SWD: SWD transaction ap out 4, try 1
PHYS: transact 10001011
  PHYS: flush 21 13 10 00 00 00 30 80 10 8b 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap 4 (1 words)...
  SWD: SWD transaction ap in 4, try 1
PHYS: transact 10101111
  PHYS: flush 21 13 01 00 00 00 30 80 10 af 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 01 00 00 00 01
  PHYS: read word: 00000001, parity 1
SWD: read  ap 4 < 00000001
  DP: read ap 00000004 < 00000001
    AP: 0 read 00000014 < 00000001
MEM: read 4001e504 < 00000001
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0x4001e504 backing NRF51::NVMC = 0x00000001
  REG: reading #<Peripheral::BackingProxy:0x998abbc> @ 0x00000504 backing NRF51::NVMC::CONFIG = 0x00000001
  REG: reading NRF51::NVMC::CONFIG.WEN = 0x00000001
MEM: write 00000000 = 20004000, 00000415, 0000045d, 0000045f, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000461, 00000000, 00000000, 00000463, 00000465, 00000467, 00000467, 00000467, 00000467, 00000467, 00000000, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 4c06b510, 2b007823, 4b05d107, d0022b00, e0004804, 2301bf00, bd107023, 20002068, 00000000, 00000488, 4b08b508, d0032b00, 49084807, bf00e000, 68034807, d1002b00, 4b06bd08, d0fb2b00, e7f94798, 00000000, 00000488, 2000206c, 20002068, 00000000, 2b004b16, 4b14d100, 2240469d, 1a9a0292, 21004692, 460f468b, 4a144813, f0001a12, 4b0ff867, d0002b00, 4b0e4798, d0002b00, 20004798, 00042100, 480d000d, d0022800, e000480c, f000bf00, 0020f82d, f0000029, f000f8a7, 46c0f811, 00080000, 20004000, 00000000, 00000000, 20002068, 20002084, 00000000, 00000000, b5104b08, 2b001c04, 2100d002, bf00e000, 68184b05, 2b006a83, 4798d000, f0001c20, 46c0f833, 00000000, 00000484, b5704b0e, 1c1e2500, 1ae44c0d, 42a510a4, 00abd004, 479858f3, e7f83501, f942f000, 25004b08, 4c081c1e, 10a41ae4, d00442a5, 58f300ab, 35014798, bd70e7f8, 20002060, 20002060, 20002060, 20002064, 18821c03, d0024293, 33017019, 4770e7fa, 46c0e7fe, 781b4b1f, d0002b01, 4b1e4770, 071b681b, 22f0d1fa, 681b4b1c, d1184013, 681b4b1b, d01a4213, 681b4b17, d1ed071b, 4b1622f0, 4013681b, d1e72b40, 681b4b14, d1e34213, 228023c1, 00db2101, 50d105d2, 2b10e7dc, 4b0ed10f, 4213681b, 4a0dd1e8, 601a4b0d, 4b0d2280, 601a0212, 781b4b05, d0d92b01, 2b30e7ca, 4b05d1da, 4213681b, e7ecd1d6, f0000fe0, f0000fe4, f0000fe8, f0000fec, c007ffdf, 40000504, 40006c18, 22e9b570, 230324a0, 05e42500, 50a300d2, 4e3e4a3d, 320450a3, 4a3d50a3, 320450a3, 20fa50a3, f0000080, 59a3f877, 35012301, 402bb2ed, 2180d133, 02c922a1, 50a100d2, 50a34a34, 230259a3, d133402b, 22a12180, 00d20309, 4a2f50a1, 59a350a3, 402b2304, 2180d133, 034922a1, 50a100d2, 50a34a29, 230859a3, d133402b, 22a12180, 00d20389, 4a2450a1, 59a350a3, 402b2310, 2180d133, 03c922a1, 50a100d2, 50a34a1e, 2280e7c1, 02d24b1c, 220050e2, 50e23b04, 230259a3, d0cb402b, 4b172280, 50e20312, 3b042200, 59a350e2, 402b2304, 2280d0cb, 03524b11, 220050e2, 50e23b04, 230859a3, d0cb402b, 4b0c2280, 50e20392, 3b042200, 59a350e2, 402b2310, 2280d0cb, 03d24b06, 220050e2, 50e23b04, 46c0e78d, 0000074c, 00000504, 00000754, 0000050c, 9001b082, 2b009b01, 9b01d014, 3b01480a, 38019301, 46c046c0, 46c046c0, 46c046c0, 46c046c0, 46c046c0
  REG: writing Adiv5::MemAP.TAR = 0000000000
    AP: 0 write 00000004 = 00000000
    DP: selecting 0:0
  REG: writing #<Peripheral::CachingProxy:0x9e6d418> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9e6d418> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9e6d418> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9e6d418> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9e6d418> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  DP: write dp 00000008 = 00000000
SWD: write dp 8 = 00000000
  SWD: SWD transaction dp out 8, try 1
PHYS: transact 10110001
  PHYS: turning out
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  DP: write ap 00000004 = 00000000
SWD: write ap 4 = 00000000
  SWD: SWD transaction ap out 4, try 1
PHYS: transact 10001011
  PHYS: flush 21 13 00 00 00 00 30 00 10 8b 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
    AP: 0 write 0000000c = 20004000, 00000415, 0000045d, 0000045f, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000461, 00000000, 00000000, 00000463, 00000465, 00000467, 00000467, 00000467, 00000467, 00000467, 00000000, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 4c06b510, 2b007823, 4b05d107, d0022b00, e0004804, 2301bf00, bd107023, 20002068, 00000000, 00000488, 4b08b508, d0032b00, 49084807, bf00e000, 68034807, d1002b00, 4b06bd08, d0fb2b00, e7f94798, 00000000, 00000488, 2000206c, 20002068, 00000000, 2b004b16, 4b14d100, 2240469d, 1a9a0292, 21004692, 460f468b, 4a144813, f0001a12, 4b0ff867, d0002b00, 4b0e4798, d0002b00, 20004798, 00042100, 480d000d, d0022800, e000480c, f000bf00, 0020f82d, f0000029, f000f8a7, 46c0f811, 00080000, 20004000, 00000000, 00000000, 20002068, 20002084, 00000000, 00000000, b5104b08, 2b001c04, 2100d002, bf00e000, 68184b05, 2b006a83, 4798d000, f0001c20, 46c0f833, 00000000, 00000484, b5704b0e, 1c1e2500, 1ae44c0d, 42a510a4, 00abd004, 479858f3, e7f83501, f942f000, 25004b08, 4c081c1e, 10a41ae4, d00442a5, 58f300ab, 35014798, bd70e7f8, 20002060, 20002060, 20002060, 20002064, 18821c03, d0024293, 33017019, 4770e7fa, 46c0e7fe, 781b4b1f, d0002b01, 4b1e4770, 071b681b, 22f0d1fa, 681b4b1c, d1184013, 681b4b1b, d01a4213, 681b4b17, d1ed071b, 4b1622f0, 4013681b, d1e72b40, 681b4b14, d1e34213, 228023c1, 00db2101, 50d105d2, 2b10e7dc, 4b0ed10f, 4213681b, 4a0dd1e8, 601a4b0d, 4b0d2280, 601a0212, 781b4b05, d0d92b01, 2b30e7ca, 4b05d1da, 4213681b, e7ecd1d6, f0000fe0, f0000fe4, f0000fe8, f0000fec, c007ffdf, 40000504, 40006c18, 22e9b570, 230324a0, 05e42500, 50a300d2, 4e3e4a3d, 320450a3, 4a3d50a3, 320450a3, 20fa50a3, f0000080, 59a3f877, 35012301, 402bb2ed, 2180d133, 02c922a1, 50a100d2, 50a34a34, 230259a3, d133402b, 22a12180, 00d20309, 4a2f50a1, 59a350a3, 402b2304, 2180d133, 034922a1, 50a100d2, 50a34a29, 230859a3, d133402b, 22a12180, 00d20389, 4a2450a1, 59a350a3, 402b2310, 2180d133, 03c922a1, 50a100d2, 50a34a1e, 2280e7c1, 02d24b1c, 220050e2, 50e23b04, 230259a3, d0cb402b, 4b172280, 50e20312, 3b042200, 59a350e2, 402b2304, 2280d0cb, 03524b11, 220050e2, 50e23b04, 230859a3, d0cb402b, 4b0c2280, 50e20392, 3b042200, 59a350e2, 402b2310, 2280d0cb, 03d24b06, 220050e2, 50e23b04, 46c0e78d, 0000074c, 00000504, 00000754, 0000050c, 9001b082, 2b009b01, 9b01d014, 3b01480a, 38019301, 46c046c0, 46c046c0, 46c046c0, 46c046c0, 46c046c0
  DP: write ap 0000000c = 20004000, 00000415, 0000045d, 0000045f, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000461, 00000000, 00000000, 00000463, 00000465, 00000467, 00000467, 00000467, 00000467, 00000467, 00000000, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000467, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 4c06b510, 2b007823, 4b05d107, d0022b00, e0004804, 2301bf00, bd107023, 20002068, 00000000, 00000488, 4b08b508, d0032b00, 49084807, bf00e000, 68034807, d1002b00, 4b06bd08, d0fb2b00, e7f94798, 00000000, 00000488, 2000206c, 20002068, 00000000, 2b004b16, 4b14d100, 2240469d, 1a9a0292, 21004692, 460f468b, 4a144813, f0001a12, 4b0ff867, d0002b00, 4b0e4798, d0002b00, 20004798, 00042100, 480d000d, d0022800, e000480c, f000bf00, 0020f82d, f0000029, f000f8a7, 46c0f811, 00080000, 20004000, 00000000, 00000000, 20002068, 20002084, 00000000, 00000000, b5104b08, 2b001c04, 2100d002, bf00e000, 68184b05, 2b006a83, 4798d000, f0001c20, 46c0f833, 00000000, 00000484, b5704b0e, 1c1e2500, 1ae44c0d, 42a510a4, 00abd004, 479858f3, e7f83501, f942f000, 25004b08, 4c081c1e, 10a41ae4, d00442a5, 58f300ab, 35014798, bd70e7f8, 20002060, 20002060, 20002060, 20002064, 18821c03, d0024293, 33017019, 4770e7fa, 46c0e7fe, 781b4b1f, d0002b01, 4b1e4770, 071b681b, 22f0d1fa, 681b4b1c, d1184013, 681b4b1b, d01a4213, 681b4b17, d1ed071b, 4b1622f0, 4013681b, d1e72b40, 681b4b14, d1e34213, 228023c1, 00db2101, 50d105d2, 2b10e7dc, 4b0ed10f, 4213681b, 4a0dd1e8, 601a4b0d, 4b0d2280, 601a0212, 781b4b05, d0d92b01, 2b30e7ca, 4b05d1da, 4213681b, e7ecd1d6, f0000fe0, f0000fe4, f0000fe8, f0000fec, c007ffdf, 40000504, 40006c18, 22e9b570, 230324a0, 05e42500, 50a300d2, 4e3e4a3d, 320450a3, 4a3d50a3, 320450a3, 20fa50a3, f0000080, 59a3f877, 35012301, 402bb2ed, 2180d133, 02c922a1, 50a100d2, 50a34a34, 230259a3, d133402b, 22a12180, 00d20309, 4a2f50a1, 59a350a3, 402b2304, 2180d133, 034922a1, 50a100d2, 50a34a29, 230859a3, d133402b, 22a12180, 00d20389, 4a2450a1, 59a350a3, 402b2310, 2180d133, 03c922a1, 50a100d2, 50a34a1e, 2280e7c1, 02d24b1c, 220050e2, 50e23b04, 230259a3, d0cb402b, 4b172280, 50e20312, 3b042200, 59a350e2, 402b2304, 2280d0cb, 03524b11, 220050e2, 50e23b04, 230859a3, d0cb402b, 4b0c2280, 50e20392, 3b042200, 59a350e2, 402b2310, 2280d0cb, 03d24b06, 220050e2, 50e23b04, 46c0e78d, 0000074c, 00000504, 00000754, 0000050c, 9001b082, 2b009b01, 9b01d014, 3b01480a, 38019301, 46c046c0, 46c046c0, 46c046c0, 46c046c0, 46c046c0
SWD: write ap c = 20004000 00000415 0000045d 0000045f 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000461 00000000 00000000 00000463 00000465 00000467 00000467 00000467 00000467 00000467 00000000 00000467 00000467 00000467 00000467 00000467 00000467 00000467 00000467 00000467 00000467 00000467 00000467 00000467 00000467 00000467 00000467 00000467 00000467 00000467 00000467 00000000 00000000 00000000 00000000 00000000 00000000 4c06b510 2b007823 4b05d107 d0022b00 e0004804 2301bf00 bd107023 20002068 00000000 00000488 4b08b508 d0032b00 49084807 bf00e000 68034807 d1002b00 4b06bd08 d0fb2b00 e7f94798 00000000 00000488 2000206c 20002068 00000000 2b004b16 4b14d100 2240469d 1a9a0292 21004692 460f468b 4a144813 f0001a12 4b0ff867 d0002b00 4b0e4798 d0002b00 20004798 00042100 480d000d d0022800 e000480c f000bf00 0020f82d f0000029 f000f8a7 46c0f811 00080000 20004000 00000000 00000000 20002068 20002084 00000000 00000000 b5104b08 2b001c04 2100d002 bf00e000 68184b05 2b006a83 4798d000 f0001c20 46c0f833 00000000 00000484 b5704b0e 1c1e2500 1ae44c0d 42a510a4 00abd004 479858f3 e7f83501 f942f000 25004b08 4c081c1e 10a41ae4 d00442a5 58f300ab 35014798 bd70e7f8 20002060 20002060 20002060 20002064 18821c03 d0024293 33017019 4770e7fa 46c0e7fe 781b4b1f d0002b01 4b1e4770 071b681b 22f0d1fa 681b4b1c d1184013 681b4b1b d01a4213 681b4b17 d1ed071b 4b1622f0 4013681b d1e72b40 681b4b14 d1e34213 228023c1 00db2101 50d105d2 2b10e7dc 4b0ed10f 4213681b 4a0dd1e8 601a4b0d 4b0d2280 601a0212 781b4b05 d0d92b01 2b30e7ca 4b05d1da 4213681b e7ecd1d6 f0000fe0 f0000fe4 f0000fe8 f0000fec c007ffdf 40000504 40006c18 22e9b570 230324a0 05e42500 50a300d2 4e3e4a3d 320450a3 4a3d50a3 320450a3 20fa50a3 f0000080 59a3f877 35012301 402bb2ed 2180d133 02c922a1 50a100d2 50a34a34 230259a3 d133402b 22a12180 00d20309 4a2f50a1 59a350a3 402b2304 2180d133 034922a1 50a100d2 50a34a29 230859a3 d133402b 22a12180 00d20389 4a2450a1 59a350a3 402b2310 2180d133 03c922a1 50a100d2 50a34a1e 2280e7c1 02d24b1c 220050e2 50e23b04 230259a3 d0cb402b 4b172280 50e20312 3b042200 59a350e2 402b2304 2280d0cb 03524b11 220050e2 50e23b04 230859a3 d0cb402b 4b0c2280 50e20392 3b042200 59a350e2 402b2310 2280d0cb 03d24b06 220050e2 50e23b04 46c0e78d 0000074c 00000504 00000754 0000050c 9001b082 2b009b01 9b01d014 3b01480a 38019301 46c046c0 46c046c0 46c046c0 46c046c0 46c046c0
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 00 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 40 00 20 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 15 04 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 5d 04 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 5f 04 00 00 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 00 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 00 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 00 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 00 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 00 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 00 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 00 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 61 04 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 00 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 00 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 63 04 00 00 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 65 04 00 00 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 67 04 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 67 04 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 67 04 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 67 04 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 67 04 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 00 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 67 04 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 67 04 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 67 04 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 67 04 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 67 04 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 67 04 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 67 04 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 67 04 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 67 04 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 67 04 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 67 04 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 67 04 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 67 04 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 67 04 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 67 04 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 67 04 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 67 04 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 67 04 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 67 04 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 67 04 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 00 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 00 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 00 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 00 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 00 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 00 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 10 b5 06 4c 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 23 78 00 2b 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 07 d1 05 4b 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 2b 02 d0 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 04 48 00 e0 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 bf 01 23 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 23 70 10 bd 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 68 20 00 20 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 00 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 88 04 00 00 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 08 b5 08 4b 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 2b 03 d0 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 07 48 08 49 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 e0 00 bf 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 07 48 03 68 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 2b 00 d1 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 08 bd 06 4b 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 2b fb d0 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 98 47 f9 e7 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 00 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 88 04 00 00 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 6c 20 00 20 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 68 20 00 20 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 00 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 16 4b 00 2b 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 d1 14 4b 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 9d 46 40 22 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 92 02 9a 1a 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 92 46 00 21 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 8b 46 0f 46 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 13 48 14 4a 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 12 1a 00 f0 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 67 f8 0f 4b 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 2b 00 d0 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 98 47 0e 4b 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 2b 00 d0 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 98 47 00 20 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 21 04 00 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 0d 00 0d 48 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 28 02 d0 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 0c 48 00 e0 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 bf 00 f0 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 2d f8 20 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 29 00 00 f0 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 a7 f8 00 f0 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 11 f8 c0 46 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 00 08 00 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 40 00 20 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 00 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 00 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 68 20 00 20 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 84 20 00 20 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 00 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 00 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 08 4b 10 b5 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 04 1c 00 2b 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 02 d0 00 21 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 e0 00 bf 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 05 4b 18 68 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 83 6a 00 2b 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 d0 98 47 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 20 1c 00 f0 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 33 f8 c0 46 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 00 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 84 04 00 00 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 0e 4b 70 b5 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 25 1e 1c 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 0d 4c e4 1a 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 a4 10 a5 42 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 04 d0 ab 00 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 f3 58 98 47 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 01 35 f8 e7 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 f0 42 f9 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 08 4b 00 25 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 1e 1c 08 4c 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 e4 1a a4 10 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 a5 42 04 d0 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ab 00 f3 58 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 98 47 01 35 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 f8 e7 70 bd 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 60 20 00 20 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 60 20 00 20 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 60 20 00 20 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 64 20 00 20 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 03 1c 82 18 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 93 42 02 d0 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 19 70 01 33 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 fa e7 70 47 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 fe e7 c0 46 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 1f 4b 1b 78 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 01 2b 00 d0 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 70 47 1e 4b 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 1b 68 1b 07 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 fa d1 f0 22 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 1c 4b 1b 68 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 13 40 18 d1 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 1b 4b 1b 68 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 13 42 1a d0 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 17 4b 1b 68 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 1b 07 ed d1 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 f0 22 16 4b 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 1b 68 13 40 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 40 2b e7 d1 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 14 4b 1b 68 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 13 42 e3 d1 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 c1 23 80 22 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 01 21 db 00 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 d2 05 d1 50 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 dc e7 10 2b 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 0f d1 0e 4b 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 1b 68 13 42 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 e8 d1 0d 4a 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 0d 4b 1a 60 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 80 22 0d 4b 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 12 02 1a 60 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 05 4b 1b 78 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 01 2b d9 d0 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ca e7 30 2b 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 da d1 05 4b 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 1b 68 13 42 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 d6 d1 ec e7 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 e0 0f 00 f0 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 e4 0f 00 f0 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 e8 0f 00 f0 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ec 0f 00 f0 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 df ff 07 c0 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 04 05 00 40 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 18 6c 00 40 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 70 b5 e9 22 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 a0 24 03 23 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 25 e4 05 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 d2 00 a3 50 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 3d 4a 3e 4e 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 a3 50 04 32 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 a3 50 3d 4a 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 a3 50 04 32 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 a3 50 fa 20 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 80 00 00 f0 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 77 f8 a3 59 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 01 23 01 35 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ed b2 2b 40 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 33 d1 80 21 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 a1 22 c9 02 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 d2 00 a1 50 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 34 4a a3 50 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 a3 59 02 23 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 2b 40 33 d1 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 80 21 a1 22 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 09 03 d2 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 a1 50 2f 4a 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 a3 50 a3 59 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 04 23 2b 40 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 33 d1 80 21 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 a1 22 49 03 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 d2 00 a1 50 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 29 4a a3 50 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 a3 59 08 23 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 2b 40 33 d1 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 80 21 a1 22 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 89 03 d2 00 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 a1 50 24 4a 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 a3 50 a3 59 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 10 23 2b 40 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 33 d1 80 21 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 a1 22 c9 03 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 d2 00 a1 50 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 1e 4a a3 50 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 c1 e7 80 22 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 1c 4b d2 02 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 e2 50 00 22 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 04 3b e2 50 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 a3 59 02 23 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 2b 40 cb d0 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 80 22 17 4b 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 12 03 e2 50 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 22 04 3b 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 e2 50 a3 59 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 04 23 2b 40 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 cb d0 80 22 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 11 4b 52 03 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 e2 50 00 22 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 04 3b e2 50 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 a3 59 08 23 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 2b 40 cb d0 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 80 22 0c 4b 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 92 03 e2 50 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 22 04 3b 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 e2 50 a3 59 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 10 23 2b 40 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 cb d0 80 22 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 06 4b d2 03 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 e2 50 00 22 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 04 3b e2 50 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 8d e7 c0 46 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 4c 07 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 04 05 00 00 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 54 07 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 0c 05 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 82 b0 01 90 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 01 9b 00 2b 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 14 d0 01 9b 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 0a 48 01 3b 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 01 93 01 38 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 c0 46 c0 46 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 c0 46 c0 46 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 c0 46 c0 46 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 c0 46 c0 46 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  REG: writing Adiv5::MemAP.TAR = 0x4001e400
    AP: 0 write 00000004 = 4001e400
  DP: write ap 00000004 = 4001e400
SWD: write ap 4 = 4001e400
  SWD: SWD transaction ap out 4, try 1
PHYS: transact 10001011
  PHYS: flush 21 13 c0 46 c0 46 30 00 10 8b 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap c (1 words)...
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: flush 21 13 00 e4 01 40 30 00 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 01 00 00 00 01
  PHYS: read word: 00000001, parity 1
SWD: read  ap c < 00000001
  DP: read ap 0000000c < 00000001
    AP: 0 read 0000000c < 00000001
MEM: read 4001e400 < 00000001
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0x4001e400 backing NRF51::NVMC = 0x00000001
  REG: reading #<Peripheral::BackingProxy:0x9b5eba0> @ 0x00000400 backing NRF51::NVMC::READY = 0x00000001
  REG: reading NRF51::NVMC::READY.ready = 0x00000001
  REG: writing Adiv5::MemAP.TAR = 0x4001e504
    AP: 0 write 00000004 = 4001e504
  DP: write ap 00000004 = 4001e504
SWD: write ap 4 = 4001e504
  SWD: SWD transaction ap out 4, try 1
PHYS: transact 10001011
  PHYS: turning out
  PHYS: flush 21 10 8b 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap c (1 words)...
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: flush 21 13 04 e5 01 40 30 00 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 01 00 00 00 01
  PHYS: read word: 00000001, parity 1
SWD: read  ap c < 00000001
  DP: read ap 0000000c < 00000001
    AP: 0 read 0000000c < 00000001
MEM: read 4001e504 < 00000001
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0x4001e504 backing NRF51::NVMC = 0x00000001
  REG: reading #<Peripheral::BackingProxy:0x9b77b50> @ 0x00000504 backing NRF51::NVMC::CONFIG = 0x00000001
  REG: writing NRF51::NVMC::CONFIG.WEN = 0000000000
  REG: writing #<Peripheral::BackingProxy:0x9b77b50> @ 0x00000504 backing NRF51::NVMC::CONFIG = 0000000000
  REG: writing #<Adiv5::MemAP:0x9e699bc> @ 0x4001e504 backing NRF51::NVMC = 0000000000
MEM: write 4001e504 = 00000000
    AP: 0 write 00000014 = 00000000
    DP: selecting 0:1
  REG: writing #<Peripheral::CachingProxy:0x9bece78> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9bece78> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9bece78> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9bece78> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0x00000001
  REG: writing #<Peripheral::CachingProxy:0x9bece78> @ 0x00000008 backing Adiv5::DP::SELECT = 0x00000010
  DP: write dp 00000008 = 00000010
SWD: write dp 8 = 00000010
  SWD: SWD transaction dp out 8, try 1
PHYS: transact 10110001
  PHYS: turning out
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  DP: write ap 00000004 = 00000000
SWD: write ap 4 = 00000000
  SWD: SWD transaction ap out 4, try 1
PHYS: transact 10001011
  PHYS: flush 21 13 10 00 00 00 30 80 10 8b 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap 4 (1 words)...
  SWD: SWD transaction ap in 4, try 1
PHYS: transact 10101111
  PHYS: flush 21 13 00 00 00 00 30 00 10 af 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
SWD: read  ap 4 < 00000000
  DP: read ap 00000004 < 00000000
    AP: 0 read 00000014 < 00000000
MEM: read 4001e504 < 00000000
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0x4001e504 backing NRF51::NVMC = 0000000000
  REG: reading #<Peripheral::BackingProxy:0x9c10710> @ 0x00000504 backing NRF51::NVMC::CONFIG = 0000000000
  REG: reading NRF51::NVMC::CONFIG.WEN = 0000000000
programming 0x400, 1024 of 2048
  SWD: read  ap 4 (1 words)...
  SWD: SWD transaction ap in 4, try 1
PHYS: transact 10101111
  PHYS: turning out
  PHYS: flush 21 10 af 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
SWD: read  ap 4 < 00000000
  DP: read ap 00000004 < 00000000
    AP: 0 read 00000014 < 00000000
MEM: read 4001e504 < 00000000
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0x4001e504 backing NRF51::NVMC = 0000000000
  REG: reading #<Peripheral::BackingProxy:0x9c6dc94> @ 0x00000504 backing NRF51::NVMC::CONFIG = 0000000000
  REG: writing NRF51::NVMC::CONFIG.WEN = 0x00000002
  REG: writing #<Peripheral::BackingProxy:0x9c6dc94> @ 0x00000504 backing NRF51::NVMC::CONFIG = 0x00000002
  REG: writing #<Adiv5::MemAP:0x9e699bc> @ 0x4001e504 backing NRF51::NVMC = 0x00000002
MEM: write 4001e504 = 00000002
    AP: 0 write 00000014 = 00000002
  DP: write ap 00000004 = 00000002
SWD: write ap 4 = 00000002
  SWD: SWD transaction ap out 4, try 1
PHYS: transact 10001011
  PHYS: turning out
  PHYS: flush 21 10 8b 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap 4 (1 words)...
  SWD: SWD transaction ap in 4, try 1
PHYS: transact 10101111
  PHYS: flush 21 13 02 00 00 00 30 80 10 af 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 02 00 00 00 01
  PHYS: read word: 00000002, parity 1
SWD: read  ap 4 < 00000002
  DP: read ap 00000004 < 00000002
    AP: 0 read 00000014 < 00000002
MEM: read 4001e504 < 00000002
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0x4001e504 backing NRF51::NVMC = 0x00000002
  REG: reading #<Peripheral::BackingProxy:0x9d7c7e8> @ 0x00000504 backing NRF51::NVMC::CONFIG = 0x00000002
  REG: reading NRF51::NVMC::CONFIG.WEN = 0x00000002
  REG: writing NRF51::NVMC.ERASEPAGE = 0x00000400
  REG: writing #<Adiv5::MemAP:0x9e699bc> @ 0x4001e508 backing NRF51::NVMC = 0x00000400
MEM: write 4001e508 = 00000400
    AP: 0 write 00000018 = 00000400
  DP: write ap 00000008 = 00000400
SWD: write ap 8 = 00000400
  SWD: SWD transaction ap out 8, try 1
PHYS: transact 10010011
  PHYS: turning out
  PHYS: flush 21 10 93 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  REG: writing Adiv5::MemAP.TAR = 0x4001e400
    AP: 0 write 00000004 = 4001e400
    DP: selecting 0:0
  REG: writing #<Peripheral::CachingProxy:0x9da9cc0> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9da9cc0> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9da9cc0> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9da9cc0> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9da9cc0> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  DP: write dp 00000008 = 00000000
SWD: write dp 8 = 00000000
  SWD: SWD transaction dp out 8, try 1
PHYS: transact 10110001
  PHYS: flush 21 13 00 04 00 00 30 80 10 b1 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  DP: write ap 00000004 = 4001e400
SWD: write ap 4 = 4001e400
  SWD: SWD transaction ap out 4, try 1
PHYS: transact 10001011
  PHYS: flush 21 13 00 00 00 00 30 00 10 8b 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap c (1 words)...
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: flush 21 13 00 e4 01 40 30 00 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
SWD: read  ap c < 00000000
  DP: read ap 0000000c < 00000000
    AP: 0 read 0000000c < 00000000
MEM: read 4001e400 < 00000000
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0x4001e400 backing NRF51::NVMC = 0000000000
  REG: reading #<Peripheral::BackingProxy:0x9daa3f0> @ 0x00000400 backing NRF51::NVMC::READY = 0000000000
  REG: reading NRF51::NVMC::READY.ready = 0000000000
NRF51: waiting for flash erase completion
    DP: selecting 0:1
  REG: writing #<Peripheral::CachingProxy:0x9e02794> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9e02794> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9e02794> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9e02794> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0x00000001
  REG: writing #<Peripheral::CachingProxy:0x9e02794> @ 0x00000008 backing Adiv5::DP::SELECT = 0x00000010
  DP: write dp 00000008 = 00000010
SWD: write dp 8 = 00000010
  SWD: SWD transaction dp out 8, try 1
PHYS: transact 10110001
  PHYS: turning out
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap 0 (1 words)...
  SWD: SWD transaction ap in 0, try 1
PHYS: transact 10000111
  PHYS: flush 21 13 10 00 00 00 30 80 10 87 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 01 00 00 00 01
  PHYS: read word: 00000001, parity 1
SWD: read  ap 0 < 00000001
  DP: read ap 00000000 < 00000001
    AP: 0 read 00000010 < 00000001
MEM: read 4001e400 < 00000001
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0x4001e400 backing NRF51::NVMC = 0x00000001
  REG: reading #<Peripheral::BackingProxy:0x9e02af0> @ 0x00000400 backing NRF51::NVMC::READY = 0x00000001
  REG: reading NRF51::NVMC::READY.ready = 0x00000001
  REG: writing Adiv5::MemAP.TAR = 0x4001e504
    AP: 0 write 00000004 = 4001e504
    DP: selecting 0:0
  REG: writing #<Peripheral::CachingProxy:0x9e45e54> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9e45e54> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9e45e54> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9e45e54> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9e45e54> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  DP: write dp 00000008 = 00000000
SWD: write dp 8 = 00000000
  SWD: SWD transaction dp out 8, try 1
PHYS: transact 10110001
  PHYS: turning out
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  DP: write ap 00000004 = 4001e504
SWD: write ap 4 = 4001e504
  SWD: SWD transaction ap out 4, try 1
PHYS: transact 10001011
  PHYS: flush 21 13 00 00 00 00 30 00 10 8b 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap c (1 words)...
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: flush 21 13 04 e5 01 40 30 00 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 02 00 00 00 01
  PHYS: read word: 00000002, parity 1
SWD: read  ap c < 00000002
  DP: read ap 0000000c < 00000002
    AP: 0 read 0000000c < 00000002
MEM: read 4001e504 < 00000002
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0x4001e504 backing NRF51::NVMC = 0x00000002
  REG: reading #<Peripheral::BackingProxy:0x9e46548> @ 0x00000504 backing NRF51::NVMC::CONFIG = 0x00000002
  REG: writing NRF51::NVMC::CONFIG.WEN = 0x00000001
  REG: writing #<Peripheral::BackingProxy:0x9e46548> @ 0x00000504 backing NRF51::NVMC::CONFIG = 0x00000001
  REG: writing #<Adiv5::MemAP:0x9e699bc> @ 0x4001e504 backing NRF51::NVMC = 0x00000001
MEM: write 4001e504 = 00000001
    AP: 0 write 00000014 = 00000001
    DP: selecting 0:1
  REG: writing #<Peripheral::CachingProxy:0x9e62450> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9e62450> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9e62450> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9e62450> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0x00000001
  REG: writing #<Peripheral::CachingProxy:0x9e62450> @ 0x00000008 backing Adiv5::DP::SELECT = 0x00000010
  DP: write dp 00000008 = 00000010
SWD: write dp 8 = 00000010
  SWD: SWD transaction dp out 8, try 1
PHYS: transact 10110001
  PHYS: turning out
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  DP: write ap 00000004 = 00000001
SWD: write ap 4 = 00000001
  SWD: SWD transaction ap out 4, try 1
PHYS: transact 10001011
  PHYS: flush 21 13 10 00 00 00 30 80 10 8b 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap 4 (1 words)...
  SWD: SWD transaction ap in 4, try 1
PHYS: transact 10101111
  PHYS: flush 21 13 01 00 00 00 30 80 10 af 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 01 00 00 00 01
  PHYS: read word: 00000001, parity 1
SWD: read  ap 4 < 00000001
  DP: read ap 00000004 < 00000001
    AP: 0 read 00000014 < 00000001
MEM: read 4001e504 < 00000001
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0x4001e504 backing NRF51::NVMC = 0x00000001
  REG: reading #<Peripheral::BackingProxy:0x9d1a458> @ 0x00000504 backing NRF51::NVMC::CONFIG = 0x00000001
  REG: reading NRF51::NVMC::CONFIG.WEN = 0x00000001
MEM: write 00000400 = 46c046c0, 9b01d1f1, d1ea2b00, 4770b002, 000003e7, 480a2103, 430a6802, 48096002, 430a6802, 49086002, 4b094a08, dd031a9b, 58c83b04, dcfb50d0, 47804806, 47004806, 40000524, 40000554, 00000490, 20002000, 20002068, 00000225, 00000121, e7fee7fe, e7fee7fe, e7fee7fe, 46c0b5f8, bc08bcf8, 4770469e, 46c0b5f8, bc08bcf8, 4770469e, 00000043, 20002000, 7ffffc98, 00000001, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000480, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 000000e9, 000000c1, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff
  REG: writing Adiv5::MemAP.TAR = 0x00000400
    AP: 0 write 00000004 = 00000400
    DP: selecting 0:0
  REG: writing #<Peripheral::CachingProxy:0x9d26a78> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9d26a78> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9d26a78> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9d26a78> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9d26a78> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  DP: write dp 00000008 = 00000000
SWD: write dp 8 = 00000000
  SWD: SWD transaction dp out 8, try 1
PHYS: transact 10110001
  PHYS: turning out
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  DP: write ap 00000004 = 00000400
SWD: write ap 4 = 00000400
  SWD: SWD transaction ap out 4, try 1
PHYS: transact 10001011
  PHYS: flush 21 13 00 00 00 00 30 00 10 8b 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
    AP: 0 write 0000000c = 46c046c0, 9b01d1f1, d1ea2b00, 4770b002, 000003e7, 480a2103, 430a6802, 48096002, 430a6802, 49086002, 4b094a08, dd031a9b, 58c83b04, dcfb50d0, 47804806, 47004806, 40000524, 40000554, 00000490, 20002000, 20002068, 00000225, 00000121, e7fee7fe, e7fee7fe, e7fee7fe, 46c0b5f8, bc08bcf8, 4770469e, 46c0b5f8, bc08bcf8, 4770469e, 00000043, 20002000, 7ffffc98, 00000001, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000480, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 000000e9, 000000c1, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff
  DP: write ap 0000000c = 46c046c0, 9b01d1f1, d1ea2b00, 4770b002, 000003e7, 480a2103, 430a6802, 48096002, 430a6802, 49086002, 4b094a08, dd031a9b, 58c83b04, dcfb50d0, 47804806, 47004806, 40000524, 40000554, 00000490, 20002000, 20002068, 00000225, 00000121, e7fee7fe, e7fee7fe, e7fee7fe, 46c0b5f8, bc08bcf8, 4770469e, 46c0b5f8, bc08bcf8, 4770469e, 00000043, 20002000, 7ffffc98, 00000001, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000480, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 000000e9, 000000c1, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff
SWD: write ap c = 46c046c0 9b01d1f1 d1ea2b00 4770b002 000003e7 480a2103 430a6802 48096002 430a6802 49086002 4b094a08 dd031a9b 58c83b04 dcfb50d0 47804806 47004806 40000524 40000554 00000490 20002000 20002068 00000225 00000121 e7fee7fe e7fee7fe e7fee7fe 46c0b5f8 bc08bcf8 4770469e 46c0b5f8 bc08bcf8 4770469e 00000043 20002000 7ffffc98 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000480 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 000000e9 000000c1 ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 04 00 00 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 c0 46 c0 46 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 f1 d1 01 9b 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 2b ea d1 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 02 b0 70 47 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 e7 03 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 03 21 0a 48 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 02 68 0a 43 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 02 60 09 48 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 02 68 0a 43 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 02 60 08 49 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 08 4a 09 4b 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 9b 1a 03 dd 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 04 3b c8 58 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 d0 50 fb dc 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 06 48 80 47 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 06 48 00 47 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 24 05 00 40 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 54 05 00 40 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 90 04 00 00 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 20 00 20 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 68 20 00 20 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 25 02 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 21 01 00 00 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 fe e7 fe e7 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 fe e7 fe e7 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 fe e7 fe e7 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 f8 b5 c0 46 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 f8 bc 08 bc 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 9e 46 70 47 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 f8 b5 c0 46 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 f8 bc 08 bc 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 9e 46 70 47 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 43 00 00 00 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 20 00 20 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 98 fc ff 7f 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 01 00 00 00 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 00 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 00 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 00 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 00 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 00 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 00 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 00 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 00 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 80 04 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 00 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 00 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 00 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 00 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 00 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 00 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 00 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 00 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 00 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 00 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 00 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 00 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 00 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 00 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 00 00 00 00 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 e9 00 00 00 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 c1 00 00 00 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  REG: writing Adiv5::MemAP.TAR = 0x4001e400
    AP: 0 write 00000004 = 4001e400
  DP: write ap 00000004 = 4001e400
SWD: write ap 4 = 4001e400
  SWD: SWD transaction ap out 4, try 1
PHYS: transact 10001011
  PHYS: flush 21 13 ff ff ff ff 30 00 10 8b 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap c (1 words)...
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: flush 21 13 00 e4 01 40 30 00 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 01 00 00 00 01
  PHYS: read word: 00000001, parity 1
SWD: read  ap c < 00000001
  DP: read ap 0000000c < 00000001
    AP: 0 read 0000000c < 00000001
MEM: read 4001e400 < 00000001
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0x4001e400 backing NRF51::NVMC = 0x00000001
  REG: reading #<Peripheral::BackingProxy:0x9a3b034> @ 0x00000400 backing NRF51::NVMC::READY = 0x00000001
  REG: reading NRF51::NVMC::READY.ready = 0x00000001
  REG: writing Adiv5::MemAP.TAR = 0x4001e504
    AP: 0 write 00000004 = 4001e504
  DP: write ap 00000004 = 4001e504
SWD: write ap 4 = 4001e504
  SWD: SWD transaction ap out 4, try 1
PHYS: transact 10001011
  PHYS: turning out
  PHYS: flush 21 10 8b 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap c (1 words)...
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: flush 21 13 04 e5 01 40 30 00 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 01 00 00 00 01
  PHYS: read word: 00000001, parity 1
SWD: read  ap c < 00000001
  DP: read ap 0000000c < 00000001
    AP: 0 read 0000000c < 00000001
MEM: read 4001e504 < 00000001
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0x4001e504 backing NRF51::NVMC = 0x00000001
  REG: reading #<Peripheral::BackingProxy:0x998d628> @ 0x00000504 backing NRF51::NVMC::CONFIG = 0x00000001
  REG: writing NRF51::NVMC::CONFIG.WEN = 0000000000
  REG: writing #<Peripheral::BackingProxy:0x998d628> @ 0x00000504 backing NRF51::NVMC::CONFIG = 0000000000
  REG: writing #<Adiv5::MemAP:0x9e699bc> @ 0x4001e504 backing NRF51::NVMC = 0000000000
MEM: write 4001e504 = 00000000
    AP: 0 write 00000014 = 00000000
    DP: selecting 0:1
  REG: writing #<Peripheral::CachingProxy:0x9e760e0> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9e760e0> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9e760e0> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9e760e0> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0x00000001
  REG: writing #<Peripheral::CachingProxy:0x9e760e0> @ 0x00000008 backing Adiv5::DP::SELECT = 0x00000010
  DP: write dp 00000008 = 00000010
SWD: write dp 8 = 00000010
  SWD: SWD transaction dp out 8, try 1
PHYS: transact 10110001
  PHYS: turning out
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  DP: write ap 00000004 = 00000000
SWD: write ap 4 = 00000000
  SWD: SWD transaction ap out 4, try 1
PHYS: transact 10001011
  PHYS: flush 21 13 10 00 00 00 30 80 10 8b 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap 4 (1 words)...
  SWD: SWD transaction ap in 4, try 1
PHYS: transact 10101111
  PHYS: flush 21 13 00 00 00 00 30 00 10 af 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
SWD: read  ap 4 < 00000000
  DP: read ap 00000004 < 00000000
    AP: 0 read 00000014 < 00000000
MEM: read 4001e504 < 00000000
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0x4001e504 backing NRF51::NVMC = 0000000000
  REG: reading #<Peripheral::BackingProxy:0x9e7265c> @ 0x00000504 backing NRF51::NVMC::CONFIG = 0000000000
  REG: reading NRF51::NVMC::CONFIG.WEN = 0000000000
done.
resetting...
ARM: resetting system
  REG: writing Adiv5::MemAP.TAR = 0xe000ed0c
    AP: 0 write 00000004 = e000ed0c
    DP: selecting 0:0
  REG: writing #<Peripheral::CachingProxy:0x9cf9618> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9cf9618> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9cf9618> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9cf9618> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9cf9618> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  DP: write dp 00000008 = 00000000
SWD: write dp 8 = 00000000
  SWD: SWD transaction dp out 8, try 1
PHYS: transact 10110001
  PHYS: turning out
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  DP: write ap 00000004 = e000ed0c
SWD: write ap 4 = e000ed0c
  SWD: SWD transaction ap out 4, try 1
PHYS: transact 10001011
  PHYS: flush 21 13 00 00 00 00 30 00 10 8b 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap c (1 words)...
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: flush 21 13 0c ed 00 e0 30 80 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 05 fa 00
  PHYS: read word: fa050000, parity 0
SWD: read  ap c < fa050000
  DP: read ap 0000000c < fa050000
    AP: 0 read 0000000c < fa050000
MEM: read e000ed0c < fa050000
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0xe000ed0c backing ARMv7::SCS = 0xfa050000
  REG: reading #<Peripheral::CachingProxy:0x9cf9ec4> @ 0xe000ed0c backing ARMv7::SCS::AIRCR = 0xfa050000
  REG: writing ARMv7::SCS::AIRCR.VECTKEY = 0x000005fa
  REG: writing #<Peripheral::CachingProxy:0x9cf9ec4> @ 0xe000ed0c backing ARMv7::SCS::AIRCR = 0x05fa0000
  REG: reading #<Peripheral::CachingProxy:0x9cf9ec4> @ 0xe000ed0c backing ARMv7::SCS::AIRCR = 0x05fa0000
  REG: writing ARMv7::SCS::AIRCR.SYSRESETREQ = 0x00000001
  REG: writing #<Peripheral::CachingProxy:0x9cf9ec4> @ 0xe000ed0c backing ARMv7::SCS::AIRCR = 0x05fa0004
  REG: writing #<Adiv5::MemAP:0x9e699bc> @ 0xe000ed0c backing ARMv7::SCS = 0x05fa0004
MEM: write e000ed0c = 05fa0004
  REG: writing Adiv5::MemAP.TAR = 0xe000ed0c
    AP: 0 write 00000004 = e000ed0c
  DP: write ap 00000004 = e000ed0c
SWD: write ap 4 = e000ed0c
  SWD: SWD transaction ap out 4, try 1
PHYS: transact 10001011
  PHYS: turning out
  PHYS: flush 21 10 8b 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
    AP: 0 write 0000000c = 05fa0004
  DP: write ap 0000000c = 05fa0004
SWD: write ap c = 05fa0004
  SWD: SWD transaction ap out 12, try 1
PHYS: transact 10111011
  PHYS: flush 21 13 0c ed 00 e0 30 80 10 bb 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
ARM: disabling debug
  REG: writing Adiv5::MemAP.TAR = 0xe000edf0
    AP: 0 write 00000004 = e000edf0
  DP: write ap 00000004 = e000edf0
SWD: write ap 4 = e000edf0
  SWD: SWD transaction ap out 4, try 1
PHYS: transact 10001011
  PHYS: flush 21 13 04 00 fa 05 30 80 10 8b 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  SWD: read  ap c (1 words)...
  SWD: SWD transaction ap in 12, try 1
PHYS: transact 10011111
  PHYS: flush 21 13 f0 ed 00 e0 30 80 10 9f 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 01 00 00 03 01
  PHYS: read word: 03000001, parity 1
SWD: read  ap c < 03000001
  DP: read ap 0000000c < 03000001
    AP: 0 read 0000000c < 03000001
MEM: read e000edf0 < 03000001
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0xe000edf0 backing ARMv7::SCS = 0x03000001
  REG: reading #<Peripheral::CachingProxy:0x9cde37c> @ 0xe000edf0 backing ARMv7::SCS::DHCSR = 0x03000001
  REG: writing ARMv7::SCS::DHCSR.DBGKEY = 0x0000a05f
  REG: writing #<Peripheral::CachingProxy:0x9cde37c> @ 0xe000edf0 backing ARMv7::SCS::DHCSR = 0xa05f0001
  REG: reading #<Peripheral::CachingProxy:0x9cde37c> @ 0xe000edf0 backing ARMv7::SCS::DHCSR = 0xa05f0001
  REG: writing ARMv7::SCS::DHCSR.C_MASKINTS = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9cde37c> @ 0xe000edf0 backing ARMv7::SCS::DHCSR = 0xa05f0001
  REG: reading #<Peripheral::CachingProxy:0x9cde37c> @ 0xe000edf0 backing ARMv7::SCS::DHCSR = 0xa05f0001
  REG: writing ARMv7::SCS::DHCSR.C_STEP = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9cde37c> @ 0xe000edf0 backing ARMv7::SCS::DHCSR = 0xa05f0001
  REG: reading #<Peripheral::CachingProxy:0x9cde37c> @ 0xe000edf0 backing ARMv7::SCS::DHCSR = 0xa05f0001
  REG: writing ARMv7::SCS::DHCSR.C_HALT = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9cde37c> @ 0xe000edf0 backing ARMv7::SCS::DHCSR = 0xa05f0001
  REG: reading #<Peripheral::CachingProxy:0x9cde37c> @ 0xe000edf0 backing ARMv7::SCS::DHCSR = 0xa05f0001
  REG: writing ARMv7::SCS::DHCSR.C_DEBUGEN = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9cde37c> @ 0xe000edf0 backing ARMv7::SCS::DHCSR = 0xa05f0000
  REG: writing #<Adiv5::MemAP:0x9e699bc> @ 0xe000edf0 backing ARMv7::SCS = 0xa05f0000
MEM: write e000edf0 = a05f0000
    AP: 0 write 00000010 = a05f0000
    DP: selecting 0:1
  REG: writing #<Peripheral::CachingProxy:0x9ba8264> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9ba8264> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APSEL = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9ba8264> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: reading #<Peripheral::CachingProxy:0x9ba8264> @ 0x00000008 backing Adiv5::DP::SELECT = 0000000000
  REG: writing Adiv5::DP::SELECT.APBANKSEL = 0x00000001
  REG: writing #<Peripheral::CachingProxy:0x9ba8264> @ 0x00000008 backing Adiv5::DP::SELECT = 0x00000010
  DP: write dp 00000008 = 00000010
SWD: write dp 8 = 00000010
  SWD: SWD transaction dp out 8, try 1
PHYS: transact 10110001
  PHYS: turning out
  PHYS: flush 21 10 b1 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
  DP: write ap 00000000 = a05f0000
SWD: write ap 0 = a05f0000
  SWD: SWD transaction ap out 0, try 1
PHYS: transact 10100011
  PHYS: flush 21 13 10 00 00 00 30 80 10 a3 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
ARM: releasing core
  SWD: read  ap 0 (1 words)...
  SWD: SWD transaction ap in 0, try 1
PHYS: transact 10000111
  PHYS: flush 21 13 00 00 5f a0 30 00 10 87 07 07 07
        PHYS: expecting 13 = 10 ack + 3 data bytes
      PHYS: skipping 10 acks: 01 01 01 01 01 01 01 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 00 00
  PHYS: read word: 00000000, parity 0
  SWD: SWD transaction dp in 12, try 1
PHYS: transact 10111101
  PHYS: turning out
  PHYS: flush 21 10 bd 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: flush 06 06 06 06 07
        PHYS: expecting 5 = 0 ack + 5 data bytes
      PHYS: skipping 0 acks: 
    PHYS: read: 00 00 00 01 01
  PHYS: read word: 01000000, parity 1
SWD: read  ap 0 < 01000000
  DP: read ap 00000000 < 01000000
    AP: 0 read 00000010 < 01000000
MEM: read e000edf0 < 01000000
  REG: reading #<Adiv5::MemAP:0x9e699bc> @ 0xe000edf0 backing ARMv7::SCS = 0x01000000
  REG: reading #<Peripheral::CachingProxy:0x9b538f4> @ 0xe000edf0 backing ARMv7::SCS::DHCSR = 0x01000000
  REG: writing ARMv7::SCS::DHCSR.DBGKEY = 0x0000a05f
  REG: writing #<Peripheral::CachingProxy:0x9b538f4> @ 0xe000edf0 backing ARMv7::SCS::DHCSR = 0xa05f0000
  REG: reading #<Peripheral::CachingProxy:0x9b538f4> @ 0xe000edf0 backing ARMv7::SCS::DHCSR = 0xa05f0000
  REG: writing ARMv7::SCS::DHCSR.C_MASKINTS = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9b538f4> @ 0xe000edf0 backing ARMv7::SCS::DHCSR = 0xa05f0000
  REG: reading #<Peripheral::CachingProxy:0x9b538f4> @ 0xe000edf0 backing ARMv7::SCS::DHCSR = 0xa05f0000
  REG: writing ARMv7::SCS::DHCSR.C_STEP = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9b538f4> @ 0xe000edf0 backing ARMv7::SCS::DHCSR = 0xa05f0000
  REG: reading #<Peripheral::CachingProxy:0x9b538f4> @ 0xe000edf0 backing ARMv7::SCS::DHCSR = 0xa05f0000
  REG: writing ARMv7::SCS::DHCSR.C_HALT = 0000000000
  REG: writing #<Peripheral::CachingProxy:0x9b538f4> @ 0xe000edf0 backing ARMv7::SCS::DHCSR = 0xa05f0000
  REG: writing #<Adiv5::MemAP:0x9e699bc> @ 0xe000edf0 backing ARMv7::SCS = 0xa05f0000
MEM: write e000edf0 = a05f0000
    AP: 0 write 00000010 = a05f0000
  DP: write ap 00000000 = a05f0000
SWD: write ap 0 = a05f0000
  SWD: SWD transaction ap out 0, try 1
PHYS: transact 10100011
  PHYS: turning out
  PHYS: flush 21 10 a3 07 07 07
        PHYS: expecting 6 = 3 ack + 3 data bytes
      PHYS: skipping 3 acks: 01 01 01
    PHYS: read: 01 00 00
  PHYS: read ack: 1
  PHYS: turning out
done.
herman@touring:/arm/opt/nordic/mchck/programmer$ exit
exit

Script done on Mon 29 Aug 2016 03:53:23 PM CDT
